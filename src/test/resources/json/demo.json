[
 {
  "line": 7,
  "elements": [
   {
    "line": 9,
    "name": "",
    "description": "",
    "type": "background",
    "keyword": "Background",
    "steps": [
     {
      "result": {
       "duration": 958000,
       "status": "passed"
      },
      "line": 10,
      "name": "a root domain admin user is logged in",
      "match": {
       "location": "UserSteps.aRootDomainAdminUserIsLoggedIn()"
      },
      "keyword": "Given "
     },
     {
      "result": {
       "duration": 42000,
       "status": "passed"
      },
      "line": 11,
      "name": "the current domain is a root domain",
      "match": {
       "location": "DomainSteps.theCurrentDomainIsARootDomain()"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 410117000,
       "status": "passed"
      },
      "line": 12,
      "name": "the vault is configured",
      "match": {
       "location": "VaultsSteps.theVaultIsConfigured()"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 1114371000,
       "status": "passed"
      },
      "line": 14,
      "name": "pre-conditions for \"solana-devnet\" accounts balances recovery are met",
      "match": {
       "arguments": [
        {
         "val": "\"solana-devnet\"",
         "offset": 19
        }
       ],
       "location": "AccountsSteps.preConditionsForAccountsBalancesRecoveryAreMet(java.lang.String)"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 533804000,
       "status": "passed"
      },
      "line": 15,
      "name": "all recovery transfers are released to accounts",
      "match": {
       "location": "transactionsSteps.TransactionsSteps.allRecoveryQuarantinedTransfersAreReleased()"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 898639000,
       "status": "passed"
      },
      "line": 16,
      "name": "all ongoing quarantined transfers are released to accounts",
      "match": {
       "location": "transactionsSteps.TransactionsSteps.quarantinedTransfersAreReleasedToAccounts()"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 177638000,
       "status": "passed"
      },
      "line": 17,
      "name": "all policies except default are locked",
      "match": {
       "location": "PolicySteps.allPoliciesExceptDefaultAreLocked()"
      },
      "keyword": "And "
     }
    ]
   },
   {
    "start_timestamp": "2023-01-09T16:13:28.552Z",
    "before": [
     {
      "result": {
       "duration": 57000,
       "status": "passed"
      },
      "match": {
       "location": "PolicySteps.before(io.cucumber.java.Scenario)"
      }
     },
     {
      "result": {
       "duration": 1023702000,
       "status": "passed"
      },
      "match": {
       "location": "Hooks.beforeScenario()"
      }
     }
    ],
    "line": 20,
    "name": "Solana dry run with Priority fee strategy. Success",
    "description": "",
    "id": "solana-transactions-dry-run;solana-dry-run-with-priority-fee-strategy.-success",
    "after": [
     {
      "result": {
       "duration": 73000,
       "status": "passed"
      },
      "match": {
       "location": "Hooks.afterScenario()"
      }
     }
    ],
    "type": "scenario",
    "keyword": "Scenario",
    "steps": [
     {
      "result": {
       "duration": 692433000,
       "status": "passed"
      },
      "line": 21,
      "name": "we have two recovered \"solana-devnet\" accounts",
      "match": {
       "arguments": [
        {
         "val": "\"solana-devnet\"",
         "offset": 22
        }
       ],
       "location": "AccountsSteps.weHaveTwoRecoveredAccounts(java.lang.String)"
      },
      "keyword": "Given "
     },
     {
      "result": {
       "duration": 154218000,
       "status": "passed"
      },
      "line": 22,
      "name": "dry run of solana transaction from \"account1\" to address of \"account2\" is executed with the default maximumFee",
      "match": {
       "arguments": [
        {
         "val": "\"account1\"",
         "offset": 35
        },
        {
         "val": "\"account2\"",
         "offset": 60
        }
       ],
       "location": "transactionsSteps.SolanaTransactionsSteps.theMaximumFeeValueIsSetSufficientToSatisfyTheChosenFeeStrategyForSolanaTransactionFromToAddressOf(java.lang.String,java.lang.String)"
      },
      "keyword": "When "
     },
     {
      "result": {
       "duration": 442000,
       "status": "passed"
      },
      "line": 23,
      "name": "dry run result is success",
      "match": {
       "location": "transactionsSteps.TransactionsSteps.dryRunResultIsSuccess()"
      },
      "keyword": "And "
     }
    ],
    "tags": [
     {
      "name": "@transactions-and-accounts"
     },
     {
      "name": "@transactions-and-dry-runs"
     },
     {
      "name": "@candidate"
     },
     {
      "name": "@solana"
     },
     {
      "name": "@tr_section-solana-dry-runs"
     },
     {
      "name": "@solana-dry-run-priority-success"
     }
    ]
   },
   {
    "line": 9,
    "name": "",
    "description": "",
    "type": "background",
    "keyword": "Background",
    "steps": [
     {
      "result": {
       "duration": 1113000,
       "status": "passed"
      },
      "line": 10,
      "name": "a root domain admin user is logged in",
      "match": {
       "location": "UserSteps.aRootDomainAdminUserIsLoggedIn()"
      },
      "keyword": "Given "
     },
     {
      "result": {
       "duration": 50000,
       "status": "passed"
      },
      "line": 11,
      "name": "the current domain is a root domain",
      "match": {
       "location": "DomainSteps.theCurrentDomainIsARootDomain()"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 410141000,
       "status": "passed"
      },
      "line": 12,
      "name": "the vault is configured",
      "match": {
       "location": "VaultsSteps.theVaultIsConfigured()"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 1020384000,
       "status": "passed"
      },
      "line": 14,
      "name": "pre-conditions for \"solana-devnet\" accounts balances recovery are met",
      "match": {
       "arguments": [
        {
         "val": "\"solana-devnet\"",
         "offset": 19
        }
       ],
       "location": "AccountsSteps.preConditionsForAccountsBalancesRecoveryAreMet(java.lang.String)"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 458210000,
       "status": "passed"
      },
      "line": 15,
      "name": "all recovery transfers are released to accounts",
      "match": {
       "location": "transactionsSteps.TransactionsSteps.allRecoveryQuarantinedTransfersAreReleased()"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 701652000,
       "status": "passed"
      },
      "line": 16,
      "name": "all ongoing quarantined transfers are released to accounts",
      "match": {
       "location": "transactionsSteps.TransactionsSteps.quarantinedTransfersAreReleasedToAccounts()"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 156979000,
       "status": "passed"
      },
      "line": 17,
      "name": "all policies except default are locked",
      "match": {
       "location": "PolicySteps.allPoliciesExceptDefaultAreLocked()"
      },
      "keyword": "And "
     }
    ]
   },
   {
    "start_timestamp": "2023-01-09T16:13:33.595Z",
    "before": [
     {
      "result": {
       "duration": 47000,
       "status": "passed"
      },
      "match": {
       "location": "PolicySteps.before(io.cucumber.java.Scenario)"
      }
     },
     {
      "result": {
       "duration": 1000674000,
       "status": "passed"
      },
      "match": {
       "location": "Hooks.beforeScenario()"
      }
     }
    ],
    "line": 26,
    "name": "Solana dry run with Priority fee strategy. CurrentlyFeesTooLarge",
    "description": "",
    "id": "solana-transactions-dry-run;solana-dry-run-with-priority-fee-strategy.-currentlyfeestoolarge",
    "after": [
     {
      "result": {
       "duration": 175000,
       "status": "passed"
      },
      "match": {
       "location": "Hooks.afterScenario()"
      }
     }
    ],
    "type": "scenario",
    "keyword": "Scenario",
    "steps": [
     {
      "result": {
       "duration": 644378000,
       "status": "passed"
      },
      "line": 27,
      "name": "we have two recovered \"solana-devnet\" accounts",
      "match": {
       "arguments": [
        {
         "val": "\"solana-devnet\"",
         "offset": 22
        }
       ],
       "location": "AccountsSteps.weHaveTwoRecoveredAccounts(java.lang.String)"
      },
      "keyword": "Given "
     },
     {
      "result": {
       "duration": 1725000,
       "status": "passed"
      },
      "line": 29,
      "name": "the following \"solana-devnet\" fee strategy is used",
      "match": {
       "arguments": [
        {
         "val": "\"solana-devnet\"",
         "offset": 14
        }
       ],
       "location": "transactionsSteps.TransactionsSteps.theFollowingFeeStrategyIsUsed(java.lang.String,io.cucumber.datatable.DataTable)"
      },
      "rows": [
       {
        "cells": [
         "type",
         "Priority"
        ]
       },
       {
        "cells": [
         "priority",
         "Medium"
        ]
       }
      ],
      "keyword": "And "
     },
     {
      "result": {
       "duration": 436000,
       "status": "passed"
      },
      "line": 33,
      "name": "the maximumFee value is set \"5\" percent less then the default maximumFee",
      "match": {
       "arguments": [
        {
         "val": "\"5\"",
         "offset": 28
        }
       ],
       "location": "transactionsSteps.SolanaTransactionsSteps.theMaximumFeeValueIsSetPercentLessThenTheDefaultMaximumFee(java.lang.String)"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 224197000,
       "status": "passed"
      },
      "line": 34,
      "name": "dry run of solana transaction from \"account1\" to address of \"account2\" is executed with the fee strategy specified above",
      "match": {
       "arguments": [
        {
         "val": "\"account1\"",
         "offset": 35
        },
        {
         "val": "\"account2\"",
         "offset": 60
        }
       ],
       "location": "transactionsSteps.SolanaTransactionsSteps.dryRunOfSolanaTransactionFromToAddressOfIsExecutedWithTheFeeStrategySpecifiedAbove(java.lang.String,java.lang.String)"
      },
      "keyword": "When "
     },
     {
      "result": {
       "duration": 753000,
       "status": "passed"
      },
      "line": 36,
      "name": "dry run result has type \"Failure\" with hint \"CurrentlyFeesTooLarge\"",
      "match": {
       "arguments": [
        {
         "val": "\"Failure\"",
         "offset": 24
        },
        {
         "val": "\"CurrentlyFeesTooLarge\"",
         "offset": 44
        }
       ],
       "location": "transactionsSteps.TransactionsSteps.dryRunResultIs(java.lang.String,java.lang.String)"
      },
      "keyword": "Then "
     },
     {
      "result": {
       "duration": 442000,
       "status": "passed"
      },
      "line": 37,
      "name": "dry run result contains reason \"Currently provided fee exceeds maximum fee\"",
      "match": {
       "arguments": [
        {
         "val": "\"Currently provided fee exceeds maximum fee\"",
         "offset": 31
        }
       ],
       "location": "transactionsSteps.TransactionsSteps.dryRunResultIs(java.lang.String)"
      },
      "keyword": "And "
     }
    ],
    "tags": [
     {
      "name": "@transactions-and-accounts"
     },
     {
      "name": "@transactions-and-dry-runs"
     },
     {
      "name": "@candidate"
     },
     {
      "name": "@solana"
     },
     {
      "name": "@tr_section-solana-dry-runs"
     },
     {
      "name": "@id-solana-dry-run-priority-fees-too-large"
     }
    ]
   },
   {
    "line": 9,
    "name": "",
    "description": "",
    "type": "background",
    "keyword": "Background",
    "steps": [
     {
      "result": {
       "duration": 1909000,
       "status": "passed"
      },
      "line": 10,
      "name": "a root domain admin user is logged in",
      "match": {
       "location": "UserSteps.aRootDomainAdminUserIsLoggedIn()"
      },
      "keyword": "Given "
     },
     {
      "result": {
       "duration": 87000,
       "status": "passed"
      },
      "line": 11,
      "name": "the current domain is a root domain",
      "match": {
       "location": "DomainSteps.theCurrentDomainIsARootDomain()"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 577702000,
       "status": "passed"
      },
      "line": 12,
      "name": "the vault is configured",
      "match": {
       "location": "VaultsSteps.theVaultIsConfigured()"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 1017985000,
       "status": "passed"
      },
      "line": 14,
      "name": "pre-conditions for \"solana-devnet\" accounts balances recovery are met",
      "match": {
       "arguments": [
        {
         "val": "\"solana-devnet\"",
         "offset": 19
        }
       ],
       "location": "AccountsSteps.preConditionsForAccountsBalancesRecoveryAreMet(java.lang.String)"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 465879000,
       "status": "passed"
      },
      "line": 15,
      "name": "all recovery transfers are released to accounts",
      "match": {
       "location": "transactionsSteps.TransactionsSteps.allRecoveryQuarantinedTransfersAreReleased()"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 453167000,
       "status": "passed"
      },
      "line": 16,
      "name": "all ongoing quarantined transfers are released to accounts",
      "match": {
       "location": "transactionsSteps.TransactionsSteps.quarantinedTransfersAreReleasedToAccounts()"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 179129000,
       "status": "passed"
      },
      "line": 17,
      "name": "all policies except default are locked",
      "match": {
       "location": "PolicySteps.allPoliciesExceptDefaultAreLocked()"
      },
      "keyword": "And "
     }
    ]
   },
   {
    "start_timestamp": "2023-01-09T16:13:38.265Z",
    "before": [
     {
      "result": {
       "duration": 53000,
       "status": "passed"
      },
      "match": {
       "location": "PolicySteps.before(io.cucumber.java.Scenario)"
      }
     },
     {
      "result": {
       "duration": 1040212000,
       "status": "passed"
      },
      "match": {
       "location": "Hooks.beforeScenario()"
      }
     }
    ],
    "line": 40,
    "name": "Solana dry run for transaction with multiple outputs",
    "description": "",
    "id": "solana-transactions-dry-run;solana-dry-run-for-transaction-with-multiple-outputs",
    "after": [
     {
      "result": {
       "duration": 88000,
       "status": "passed"
      },
      "match": {
       "location": "Hooks.afterScenario()"
      }
     }
    ],
    "type": "scenario",
    "keyword": "Scenario",
    "steps": [
     {
      "result": {
       "duration": 634670000,
       "status": "passed"
      },
      "line": 41,
      "name": "we have two recovered \"solana-devnet\" accounts",
      "match": {
       "arguments": [
        {
         "val": "\"solana-devnet\"",
         "offset": 22
        }
       ],
       "location": "AccountsSteps.weHaveTwoRecoveredAccounts(java.lang.String)"
      },
      "keyword": "Given "
     },
     {
      "result": {
       "duration": 1082745000,
       "status": "passed"
      },
      "line": 42,
      "name": "\"account1\" and \"account2\" have enough of \"dSOL\" on the balance for native transfer with funds return",
      "match": {
       "arguments": [
        {
         "val": "\"account1\"",
         "offset": 0
        },
        {
         "val": "\"account2\"",
         "offset": 15
        },
        {
         "val": "\"dSOL\"",
         "offset": 41
        }
       ],
       "location": "AccountsSteps.andHaveEnoughOfForTransactionWithFundsReturn(java.lang.String,java.lang.String,java.lang.String)"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 1173518000,
       "status": "passed"
      },
      "line": 43,
      "name": "endpoint using \"account2\" address is created",
      "match": {
       "arguments": [
        {
         "val": "\"account2\"",
         "offset": 15
        }
       ],
       "location": "EndpointsSteps.endpointUsingAddressIsCreated(java.lang.String)"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 1049941000,
       "status": "passed"
      },
      "line": 44,
      "name": "endpoint using external \"solana-devnet\" address is created",
      "match": {
       "arguments": [
        {
         "val": "\"solana-devnet\"",
         "offset": 24
        }
       ],
       "location": "EndpointsSteps.endpointUsingExternalAddressIsCreated(java.lang.String)"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 442283000,
       "status": "passed"
      },
      "line": 46,
      "name": "\"account1\" has enough of funds for solana transaction with the following parameters",
      "match": {
       "arguments": [
        {
         "val": "\"account1\"",
         "offset": 0
        }
       ],
       "location": "transactionsSteps.SolanaTransactionsSteps.hasEnoughOfFundsForSolanaTransactionWithTheFollowingParameters(java.lang.String,java.util.List\u003cdataTables.NonUtxoOutputDataTable\u003e)"
      },
      "rows": [
       {
        "cells": [
         "destination",
         "amount"
        ]
       },
       {
        "cells": [
         "account",
         "11000"
        ]
       },
       {
        "cells": [
         "internal_address",
         "12000"
        ]
       },
       {
        "cells": [
         "endpoint_ext_address",
         "10000"
        ]
       },
       {
        "cells": [
         "endpoint_int_address",
         "12000"
        ]
       }
      ],
      "keyword": "And "
     },
     {
      "result": {
       "duration": 161537000,
       "status": "passed"
      },
      "line": 54,
      "name": "dry run of solana transaction from \"account1\" to the following destinations with the default maximumFee is executed",
      "match": {
       "arguments": [
        {
         "val": "\"account1\"",
         "offset": 35
        }
       ],
       "location": "transactionsSteps.SolanaTransactionsSteps.dryRunOfSolanaTransactionFromToTheFollowingDestinationsWithTheDefaultMaximumFeeIsExecuted(java.lang.String,java.util.List\u003cdataTables.NonUtxoOutputDataTable\u003e)"
      },
      "rows": [
       {
        "cells": [
         "destination",
         "amount"
        ]
       },
       {
        "cells": [
         "account",
         "11000"
        ]
       },
       {
        "cells": [
         "internal_address",
         "12000"
        ]
       },
       {
        "cells": [
         "endpoint_ext_address",
         "10000"
        ]
       },
       {
        "cells": [
         "endpoint_int_address",
         "12000"
        ]
       }
      ],
      "keyword": "When "
     },
     {
      "result": {
       "duration": 156000,
       "status": "passed"
      },
      "line": 62,
      "name": "dry run result is success",
      "match": {
       "location": "transactionsSteps.TransactionsSteps.dryRunResultIsSuccess()"
      },
      "keyword": "And "
     }
    ],
    "tags": [
     {
      "name": "@transactions-and-accounts"
     },
     {
      "name": "@transactions-and-dry-runs"
     },
     {
      "name": "@candidate"
     },
     {
      "name": "@solana"
     },
     {
      "name": "@tr_section-solana-dry-runs"
     },
     {
      "name": "@id-solana-dry-run-multiple-outputs"
     }
    ]
   },
   {
    "line": 9,
    "name": "",
    "description": "",
    "type": "background",
    "keyword": "Background",
    "steps": [
     {
      "result": {
       "duration": 1984000,
       "status": "passed"
      },
      "line": 10,
      "name": "a root domain admin user is logged in",
      "match": {
       "location": "UserSteps.aRootDomainAdminUserIsLoggedIn()"
      },
      "keyword": "Given "
     },
     {
      "result": {
       "duration": 117000,
       "status": "passed"
      },
      "line": 11,
      "name": "the current domain is a root domain",
      "match": {
       "location": "DomainSteps.theCurrentDomainIsARootDomain()"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 393300000,
       "status": "passed"
      },
      "line": 12,
      "name": "the vault is configured",
      "match": {
       "location": "VaultsSteps.theVaultIsConfigured()"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 978257000,
       "status": "passed"
      },
      "line": 14,
      "name": "pre-conditions for \"solana-devnet\" accounts balances recovery are met",
      "match": {
       "arguments": [
        {
         "val": "\"solana-devnet\"",
         "offset": 19
        }
       ],
       "location": "AccountsSteps.preConditionsForAccountsBalancesRecoveryAreMet(java.lang.String)"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 446540000,
       "status": "passed"
      },
      "line": 15,
      "name": "all recovery transfers are released to accounts",
      "match": {
       "location": "transactionsSteps.TransactionsSteps.allRecoveryQuarantinedTransfersAreReleased()"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 1827418000,
       "status": "passed"
      },
      "line": 16,
      "name": "all ongoing quarantined transfers are released to accounts",
      "match": {
       "location": "transactionsSteps.TransactionsSteps.quarantinedTransfersAreReleasedToAccounts()"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 155362000,
       "status": "passed"
      },
      "line": 17,
      "name": "all policies except default are locked",
      "match": {
       "location": "PolicySteps.allPoliciesExceptDefaultAreLocked()"
      },
      "keyword": "And "
     }
    ]
   },
   {
    "start_timestamp": "2023-01-09T16:13:46.596Z",
    "before": [
     {
      "result": {
       "duration": 56000,
       "status": "passed"
      },
      "match": {
       "location": "PolicySteps.before(io.cucumber.java.Scenario)"
      }
     },
     {
      "result": {
       "duration": 1076593000,
       "status": "passed"
      },
      "match": {
       "location": "Hooks.beforeScenario()"
      }
     }
    ],
    "line": 79,
    "name": "Solana dry run for transaction with multiple outputs",
    "description": "",
    "id": "solana-transactions-dry-run;solana-dry-run-for-transaction-with-multiple-outputs",
    "after": [
     {
      "result": {
       "duration": 182000,
       "status": "passed"
      },
      "match": {
       "location": "Hooks.afterScenario()"
      }
     }
    ],
    "type": "scenario",
    "keyword": "Scenario",
    "steps": [
     {
      "result": {
       "duration": 701604000,
       "status": "passed"
      },
      "line": 80,
      "name": "we have two recovered \"solana-devnet\" accounts",
      "match": {
       "arguments": [
        {
         "val": "\"solana-devnet\"",
         "offset": 22
        }
       ],
       "location": "AccountsSteps.weHaveTwoRecoveredAccounts(java.lang.String)"
      },
      "keyword": "Given "
     },
     {
      "result": {
       "duration": 471282000,
       "status": "passed"
      },
      "line": 81,
      "name": "all quarantined transfers are released to \"account2\"",
      "match": {
       "arguments": [
        {
         "val": "\"account2\"",
         "offset": 42
        }
       ],
       "location": "transactionsSteps.TransactionsSteps.allTransfersReleasedTo(java.lang.String)"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 88063000,
       "status": "passed"
      },
      "line": 82,
      "name": "current solana rent exempt amount is known",
      "match": {
       "location": "transactionsSteps.SolanaTransactionsSteps.currentSolanaRentExemptAmountIsKnown()"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 63960000,
       "status": "passed"
      },
      "line": 84,
      "name": "amount is set to transfer all funds from \"account2\" except rend exempt amount",
      "match": {
       "arguments": [
        {
         "val": "\"account2\"",
         "offset": 41
        }
       ],
       "location": "transactionsSteps.SolanaTransactionsSteps.amountIsSetToTransferAllFundsFromExceptRendExemptAmount(java.lang.String)"
      },
      "keyword": "Given "
     },
     {
      "result": {
       "duration": 134674000,
       "status": "passed"
      },
      "line": 85,
      "name": "dry run of solana transaction from \"account2\" to address of \"account1\" is executed with the default maximumFee",
      "match": {
       "arguments": [
        {
         "val": "\"account2\"",
         "offset": 35
        },
        {
         "val": "\"account1\"",
         "offset": 60
        }
       ],
       "location": "transactionsSteps.SolanaTransactionsSteps.theMaximumFeeValueIsSetSufficientToSatisfyTheChosenFeeStrategyForSolanaTransactionFromToAddressOf(java.lang.String,java.lang.String)"
      },
      "keyword": "When "
     },
     {
      "result": {
       "duration": 312000,
       "status": "passed"
      },
      "line": 86,
      "name": "dry run result is success",
      "match": {
       "location": "transactionsSteps.TransactionsSteps.dryRunResultIsSuccess()"
      },
      "keyword": "And "
     }
    ],
    "tags": [
     {
      "name": "@transactions-and-accounts"
     },
     {
      "name": "@transactions-and-dry-runs"
     },
     {
      "name": "@candidate"
     },
     {
      "name": "@solana"
     },
     {
      "name": "@tr_section-solana-dry-runs"
     },
     {
      "name": "@id-solana-transfer-all-funds-except-rent-exempt-amount"
     }
    ]
   },
   {
    "line": 9,
    "name": "",
    "description": "",
    "type": "background",
    "keyword": "Background",
    "steps": [
     {
      "result": {
       "duration": 800000,
       "status": "passed"
      },
      "line": 10,
      "name": "a root domain admin user is logged in",
      "match": {
       "location": "UserSteps.aRootDomainAdminUserIsLoggedIn()"
      },
      "keyword": "Given "
     },
     {
      "result": {
       "duration": 33000,
       "status": "passed"
      },
      "line": 11,
      "name": "the current domain is a root domain",
      "match": {
       "location": "DomainSteps.theCurrentDomainIsARootDomain()"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 382554000,
       "status": "passed"
      },
      "line": 12,
      "name": "the vault is configured",
      "match": {
       "location": "VaultsSteps.theVaultIsConfigured()"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 994438000,
       "status": "passed"
      },
      "line": 14,
      "name": "pre-conditions for \"solana-devnet\" accounts balances recovery are met",
      "match": {
       "arguments": [
        {
         "val": "\"solana-devnet\"",
         "offset": 19
        }
       ],
       "location": "AccountsSteps.preConditionsForAccountsBalancesRecoveryAreMet(java.lang.String)"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 461128000,
       "status": "passed"
      },
      "line": 15,
      "name": "all recovery transfers are released to accounts",
      "match": {
       "location": "transactionsSteps.TransactionsSteps.allRecoveryQuarantinedTransfersAreReleased()"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 385800000,
       "status": "passed"
      },
      "line": 16,
      "name": "all ongoing quarantined transfers are released to accounts",
      "match": {
       "location": "transactionsSteps.TransactionsSteps.quarantinedTransfersAreReleasedToAccounts()"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 165784000,
       "status": "passed"
      },
      "line": 17,
      "name": "all policies except default are locked",
      "match": {
       "location": "PolicySteps.allPoliciesExceptDefaultAreLocked()"
      },
      "keyword": "And "
     }
    ]
   },
   {
    "start_timestamp": "2023-01-09T16:13:52.988Z",
    "before": [
     {
      "result": {
       "duration": 55000,
       "status": "passed"
      },
      "match": {
       "location": "PolicySteps.before(io.cucumber.java.Scenario)"
      }
     },
     {
      "result": {
       "duration": 1034017000,
       "status": "passed"
      },
      "match": {
       "location": "Hooks.beforeScenario()"
      }
     }
    ],
    "line": 89,
    "name": "Solana dry run with Priority fee strategy. Send zero",
    "description": "",
    "id": "solana-transactions-dry-run;solana-dry-run-with-priority-fee-strategy.-send-zero",
    "after": [
     {
      "result": {
       "duration": 201000,
       "status": "passed"
      },
      "match": {
       "location": "Hooks.afterScenario()"
      }
     }
    ],
    "type": "scenario",
    "keyword": "Scenario",
    "steps": [
     {
      "result": {
       "duration": 645021000,
       "status": "passed"
      },
      "line": 90,
      "name": "we have two recovered \"solana-devnet\" accounts",
      "match": {
       "arguments": [
        {
         "val": "\"solana-devnet\"",
         "offset": 22
        }
       ],
       "location": "AccountsSteps.weHaveTwoRecoveredAccounts(java.lang.String)"
      },
      "keyword": "Given "
     },
     {
      "result": {
       "duration": 727000,
       "status": "passed"
      },
      "line": 92,
      "name": "the amount for transaction is set to \"0\"",
      "match": {
       "arguments": [
        {
         "val": "\"0\"",
         "offset": 37
        }
       ],
       "location": "transactionsSteps.EthereumTransactionsSteps.theAmountForTransactionIsSetTo(java.lang.String)"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 168720000,
       "status": "passed"
      },
      "line": 93,
      "name": "dry run of solana transaction from \"account1\" to address of \"account2\" is executed with the default maximumFee",
      "match": {
       "arguments": [
        {
         "val": "\"account1\"",
         "offset": 35
        },
        {
         "val": "\"account2\"",
         "offset": 60
        }
       ],
       "location": "transactionsSteps.SolanaTransactionsSteps.theMaximumFeeValueIsSetSufficientToSatisfyTheChosenFeeStrategyForSolanaTransactionFromToAddressOf(java.lang.String,java.lang.String)"
      },
      "keyword": "When "
     },
     {
      "result": {
       "duration": 336000,
       "status": "passed"
      },
      "line": 94,
      "name": "dry run result is success",
      "match": {
       "location": "transactionsSteps.TransactionsSteps.dryRunResultIsSuccess()"
      },
      "keyword": "Then "
     }
    ],
    "tags": [
     {
      "name": "@transactions-and-accounts"
     },
     {
      "name": "@transactions-and-dry-runs"
     },
     {
      "name": "@candidate"
     },
     {
      "name": "@solana"
     },
     {
      "name": "@tr_section-solana-dry-runs"
     },
     {
      "name": "@id-solana-dry-run-send-zero"
     }
    ]
   },
   {
    "line": 9,
    "name": "",
    "description": "",
    "type": "background",
    "keyword": "Background",
    "steps": [
     {
      "result": {
       "duration": 922000,
       "status": "passed"
      },
      "line": 10,
      "name": "a root domain admin user is logged in",
      "match": {
       "location": "UserSteps.aRootDomainAdminUserIsLoggedIn()"
      },
      "keyword": "Given "
     },
     {
      "result": {
       "duration": 45000,
       "status": "passed"
      },
      "line": 11,
      "name": "the current domain is a root domain",
      "match": {
       "location": "DomainSteps.theCurrentDomainIsARootDomain()"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 360043000,
       "status": "passed"
      },
      "line": 12,
      "name": "the vault is configured",
      "match": {
       "location": "VaultsSteps.theVaultIsConfigured()"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 996178000,
       "status": "passed"
      },
      "line": 14,
      "name": "pre-conditions for \"solana-devnet\" accounts balances recovery are met",
      "match": {
       "arguments": [
        {
         "val": "\"solana-devnet\"",
         "offset": 19
        }
       ],
       "location": "AccountsSteps.preConditionsForAccountsBalancesRecoveryAreMet(java.lang.String)"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 548829000,
       "status": "passed"
      },
      "line": 15,
      "name": "all recovery transfers are released to accounts",
      "match": {
       "location": "transactionsSteps.TransactionsSteps.allRecoveryQuarantinedTransfersAreReleased()"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 482310000,
       "status": "passed"
      },
      "line": 16,
      "name": "all ongoing quarantined transfers are released to accounts",
      "match": {
       "location": "transactionsSteps.TransactionsSteps.quarantinedTransfersAreReleasedToAccounts()"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 182315000,
       "status": "passed"
      },
      "line": 17,
      "name": "all policies except default are locked",
      "match": {
       "location": "PolicySteps.allPoliciesExceptDefaultAreLocked()"
      },
      "keyword": "And "
     }
    ]
   },
   {
    "start_timestamp": "2023-01-09T16:13:57.278Z",
    "before": [
     {
      "result": {
       "duration": 68000,
       "status": "passed"
      },
      "match": {
       "location": "PolicySteps.before(io.cucumber.java.Scenario)"
      }
     },
     {
      "result": {
       "duration": 989922000,
       "status": "passed"
      },
      "match": {
       "location": "Hooks.beforeScenario()"
      }
     }
    ],
    "line": 97,
    "name": "Solana dry run with Priority fee strategy. Send to oneself",
    "description": "",
    "id": "solana-transactions-dry-run;solana-dry-run-with-priority-fee-strategy.-send-to-oneself",
    "after": [
     {
      "result": {
       "duration": 125000,
       "status": "passed"
      },
      "match": {
       "location": "Hooks.afterScenario()"
      }
     }
    ],
    "type": "scenario",
    "keyword": "Scenario",
    "steps": [
     {
      "result": {
       "duration": 633297000,
       "status": "passed"
      },
      "line": 98,
      "name": "we have two recovered \"solana-devnet\" accounts",
      "match": {
       "arguments": [
        {
         "val": "\"solana-devnet\"",
         "offset": 22
        }
       ],
       "location": "AccountsSteps.weHaveTwoRecoveredAccounts(java.lang.String)"
      },
      "keyword": "Given "
     },
     {
      "result": {
       "duration": 166424000,
       "status": "passed"
      },
      "line": 99,
      "name": "dry run of solana transaction from \"account1\" to address of \"account1\" is executed with the default maximumFee",
      "match": {
       "arguments": [
        {
         "val": "\"account1\"",
         "offset": 35
        },
        {
         "val": "\"account1\"",
         "offset": 60
        }
       ],
       "location": "transactionsSteps.SolanaTransactionsSteps.theMaximumFeeValueIsSetSufficientToSatisfyTheChosenFeeStrategyForSolanaTransactionFromToAddressOf(java.lang.String,java.lang.String)"
      },
      "keyword": "When "
     },
     {
      "result": {
       "duration": 334000,
       "status": "passed"
      },
      "line": 100,
      "name": "dry run result is success",
      "match": {
       "location": "transactionsSteps.TransactionsSteps.dryRunResultIsSuccess()"
      },
      "keyword": "Then "
     }
    ],
    "tags": [
     {
      "name": "@transactions-and-accounts"
     },
     {
      "name": "@transactions-and-dry-runs"
     },
     {
      "name": "@candidate"
     },
     {
      "name": "@solana"
     },
     {
      "name": "@tr_section-solana-dry-runs"
     },
     {
      "name": "@id-solana-dry-run-send-to-itself"
     }
    ]
   },
   {
    "line": 9,
    "name": "",
    "description": "",
    "type": "background",
    "keyword": "Background",
    "steps": [
     {
      "result": {
       "duration": 1332000,
       "status": "passed"
      },
      "line": 10,
      "name": "a root domain admin user is logged in",
      "match": {
       "location": "UserSteps.aRootDomainAdminUserIsLoggedIn()"
      },
      "keyword": "Given "
     },
     {
      "result": {
       "duration": 54000,
       "status": "passed"
      },
      "line": 11,
      "name": "the current domain is a root domain",
      "match": {
       "location": "DomainSteps.theCurrentDomainIsARootDomain()"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 472711000,
       "status": "passed"
      },
      "line": 12,
      "name": "the vault is configured",
      "match": {
       "location": "VaultsSteps.theVaultIsConfigured()"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 1005379000,
       "status": "passed"
      },
      "line": 14,
      "name": "pre-conditions for \"solana-devnet\" accounts balances recovery are met",
      "match": {
       "arguments": [
        {
         "val": "\"solana-devnet\"",
         "offset": 19
        }
       ],
       "location": "AccountsSteps.preConditionsForAccountsBalancesRecoveryAreMet(java.lang.String)"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 457875000,
       "status": "passed"
      },
      "line": 15,
      "name": "all recovery transfers are released to accounts",
      "match": {
       "location": "transactionsSteps.TransactionsSteps.allRecoveryQuarantinedTransfersAreReleased()"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 411990000,
       "status": "passed"
      },
      "line": 16,
      "name": "all ongoing quarantined transfers are released to accounts",
      "match": {
       "location": "transactionsSteps.TransactionsSteps.quarantinedTransfersAreReleasedToAccounts()"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 183752000,
       "status": "passed"
      },
      "line": 17,
      "name": "all policies except default are locked",
      "match": {
       "location": "PolicySteps.allPoliciesExceptDefaultAreLocked()"
      },
      "keyword": "And "
     }
    ]
   },
   {
    "start_timestamp": "2023-01-09T16:14:01.689Z",
    "before": [
     {
      "result": {
       "duration": 55000,
       "status": "passed"
      },
      "match": {
       "location": "PolicySteps.before(io.cucumber.java.Scenario)"
      }
     },
     {
      "result": {
       "duration": 1032107000,
       "status": "passed"
      },
      "match": {
       "location": "Hooks.beforeScenario()"
      }
     }
    ],
    "line": 105,
    "name": "Solana dry run with Priority fee strategy. Send more then on the account balance",
    "description": "",
    "id": "solana-transactions-dry-run;solana-dry-run-with-priority-fee-strategy.-send-more-then-on-the-account-balance",
    "after": [
     {
      "result": {
       "duration": 116000,
       "status": "passed"
      },
      "match": {
       "location": "Hooks.afterScenario()"
      }
     }
    ],
    "type": "scenario",
    "keyword": "Scenario",
    "steps": [
     {
      "result": {
       "duration": 621124000,
       "status": "passed"
      },
      "line": 106,
      "name": "we have two recovered \"solana-devnet\" accounts",
      "match": {
       "arguments": [
        {
         "val": "\"solana-devnet\"",
         "offset": 22
        }
       ],
       "location": "AccountsSteps.weHaveTwoRecoveredAccounts(java.lang.String)"
      },
      "keyword": "Given "
     },
     {
      "result": {
       "duration": 100878000,
       "status": "passed"
      },
      "line": 108,
      "name": "the amount for \"dSOL\" transaction is set to greater then on \"account1\" balance",
      "match": {
       "arguments": [
        {
         "val": "\"dSOL\"",
         "offset": 15
        },
        {
         "val": "\"account1\"",
         "offset": 60
        }
       ],
       "location": "transactionsSteps.EthereumTransactionsSteps.theAmountForTransactionIsSetToGreaterThenOnBalance(java.lang.String,java.lang.String)"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 213567000,
       "status": "passed"
      },
      "line": 109,
      "name": "dry run of solana transaction from \"account1\" to address of \"account2\" is executed with the default maximumFee",
      "match": {
       "arguments": [
        {
         "val": "\"account1\"",
         "offset": 35
        },
        {
         "val": "\"account2\"",
         "offset": 60
        }
       ],
       "location": "transactionsSteps.SolanaTransactionsSteps.theMaximumFeeValueIsSetSufficientToSatisfyTheChosenFeeStrategyForSolanaTransactionFromToAddressOf(java.lang.String,java.lang.String)"
      },
      "keyword": "When "
     },
     {
      "result": {
       "duration": 570000,
       "status": "passed"
      },
      "line": 111,
      "name": "dry run result has type \"Failure\" with hint \"CurrentlyNotEnoughFunds\"",
      "match": {
       "arguments": [
        {
         "val": "\"Failure\"",
         "offset": 24
        },
        {
         "val": "\"CurrentlyNotEnoughFunds\"",
         "offset": 44
        }
       ],
       "location": "transactionsSteps.TransactionsSteps.dryRunResultIs(java.lang.String,java.lang.String)"
      },
      "keyword": "Then "
     },
     {
      "result": {
       "duration": 80000,
       "status": "passed"
      },
      "line": 112,
      "name": "dry run result contains reason \"Not enough funds\"",
      "match": {
       "arguments": [
        {
         "val": "\"Not enough funds\"",
         "offset": 31
        }
       ],
       "location": "transactionsSteps.TransactionsSteps.dryRunResultIs(java.lang.String)"
      },
      "keyword": "And "
     }
    ],
    "tags": [
     {
      "name": "@transactions-and-accounts"
     },
     {
      "name": "@transactions-and-dry-runs"
     },
     {
      "name": "@candidate"
     },
     {
      "name": "@solana"
     },
     {
      "name": "@tr_section-solana-dry-runs"
     },
     {
      "name": "@id-solana-dry-run-send-more-then-on-balance"
     }
    ]
   },
   {
    "line": 9,
    "name": "",
    "description": "",
    "type": "background",
    "keyword": "Background",
    "steps": [
     {
      "result": {
       "duration": 1157000,
       "status": "passed"
      },
      "line": 10,
      "name": "a root domain admin user is logged in",
      "match": {
       "location": "UserSteps.aRootDomainAdminUserIsLoggedIn()"
      },
      "keyword": "Given "
     },
     {
      "result": {
       "duration": 57000,
       "status": "passed"
      },
      "line": 11,
      "name": "the current domain is a root domain",
      "match": {
       "location": "DomainSteps.theCurrentDomainIsARootDomain()"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 390807000,
       "status": "passed"
      },
      "line": 12,
      "name": "the vault is configured",
      "match": {
       "location": "VaultsSteps.theVaultIsConfigured()"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 996944000,
       "status": "passed"
      },
      "line": 14,
      "name": "pre-conditions for \"solana-devnet\" accounts balances recovery are met",
      "match": {
       "arguments": [
        {
         "val": "\"solana-devnet\"",
         "offset": 19
        }
       ],
       "location": "AccountsSteps.preConditionsForAccountsBalancesRecoveryAreMet(java.lang.String)"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 433887000,
       "status": "passed"
      },
      "line": 15,
      "name": "all recovery transfers are released to accounts",
      "match": {
       "location": "transactionsSteps.TransactionsSteps.allRecoveryQuarantinedTransfersAreReleased()"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 389988000,
       "status": "passed"
      },
      "line": 16,
      "name": "all ongoing quarantined transfers are released to accounts",
      "match": {
       "location": "transactionsSteps.TransactionsSteps.quarantinedTransfersAreReleasedToAccounts()"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 169294000,
       "status": "passed"
      },
      "line": 17,
      "name": "all policies except default are locked",
      "match": {
       "location": "PolicySteps.allPoliciesExceptDefaultAreLocked()"
      },
      "keyword": "And "
     }
    ]
   },
   {
    "start_timestamp": "2023-01-09T16:14:06.241Z",
    "before": [
     {
      "result": {
       "duration": 57000,
       "status": "passed"
      },
      "match": {
       "location": "PolicySteps.before(io.cucumber.java.Scenario)"
      }
     },
     {
      "result": {
       "duration": 981146000,
       "status": "passed"
      },
      "match": {
       "location": "Hooks.beforeScenario()"
      }
     }
    ],
    "line": 115,
    "name": "Solana dry run with SpecifiedRate fee strategy. Invalid maxFee value",
    "description": "",
    "id": "solana-transactions-dry-run;solana-dry-run-with-specifiedrate-fee-strategy.-invalid-maxfee-value",
    "after": [
     {
      "result": {
       "duration": 116000,
       "status": "passed"
      },
      "match": {
       "location": "Hooks.afterScenario()"
      }
     }
    ],
    "type": "scenario",
    "keyword": "Scenario",
    "steps": [
     {
      "result": {
       "duration": 676465000,
       "status": "passed"
      },
      "line": 116,
      "name": "we have two recovered \"solana-devnet\" accounts",
      "match": {
       "arguments": [
        {
         "val": "\"solana-devnet\"",
         "offset": 22
        }
       ],
       "location": "AccountsSteps.weHaveTwoRecoveredAccounts(java.lang.String)"
      },
      "keyword": "Given "
     },
     {
      "result": {
       "duration": 594000,
       "status": "passed"
      },
      "line": 118,
      "name": "the maximumFee value is set to \"0\"",
      "match": {
       "arguments": [
        {
         "val": "\"0\"",
         "offset": 31
        }
       ],
       "location": "transactionsSteps.EthereumTransactionsSteps.theMaximumFeeValueIsSetToForTransactionFromTo(java.lang.String)"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 491046000,
       "status": "passed"
      },
      "line": 119,
      "name": "dry run of solana transaction from \"account1\" to address of \"account2\" is executed with the fee strategy specified above",
      "match": {
       "arguments": [
        {
         "val": "\"account1\"",
         "offset": 35
        },
        {
         "val": "\"account2\"",
         "offset": 60
        }
       ],
       "location": "transactionsSteps.SolanaTransactionsSteps.dryRunOfSolanaTransactionFromToAddressOfIsExecutedWithTheFeeStrategySpecifiedAbove(java.lang.String,java.lang.String)"
      },
      "keyword": "When "
     },
     {
      "result": {
       "duration": 309000,
       "status": "passed"
      },
      "line": 120,
      "name": "dry run result has type \"Failure\" with hint \"CurrentlyFeesTooLarge\"",
      "match": {
       "arguments": [
        {
         "val": "\"Failure\"",
         "offset": 24
        },
        {
         "val": "\"CurrentlyFeesTooLarge\"",
         "offset": 44
        }
       ],
       "location": "transactionsSteps.TransactionsSteps.dryRunResultIs(java.lang.String,java.lang.String)"
      },
      "keyword": "Then "
     },
     {
      "result": {
       "duration": 233000,
       "status": "passed"
      },
      "line": 121,
      "name": "dry run result contains reason \"Currently provided fee exceeds maximum fee\"",
      "match": {
       "arguments": [
        {
         "val": "\"Currently provided fee exceeds maximum fee\"",
         "offset": 31
        }
       ],
       "location": "transactionsSteps.TransactionsSteps.dryRunResultIs(java.lang.String)"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 78000,
       "status": "passed"
      },
      "line": 123,
      "name": "the maximumFee value is set to \"-1\"",
      "match": {
       "arguments": [
        {
         "val": "\"-1\"",
         "offset": 31
        }
       ],
       "location": "transactionsSteps.EthereumTransactionsSteps.theMaximumFeeValueIsSetToForTransactionFromTo(java.lang.String)"
      },
      "keyword": "Given "
     },
     {
      "result": {
       "duration": 50015000,
       "status": "passed"
      },
      "line": 124,
      "name": "dry run of solana transaction from \"account1\" to address of \"account2\" is executed with the fee strategy specified above",
      "match": {
       "arguments": [
        {
         "val": "\"account1\"",
         "offset": 35
        },
        {
         "val": "\"account2\"",
         "offset": 60
        }
       ],
       "location": "transactionsSteps.SolanaTransactionsSteps.dryRunOfSolanaTransactionFromToAddressOfIsExecutedWithTheFeeStrategySpecifiedAbove(java.lang.String,java.lang.String)"
      },
      "keyword": "When "
     },
     {
      "result": {
       "duration": 636000,
       "status": "passed"
      },
      "line": 125,
      "name": "400 error with \"Amount must be greater than or equal to zero at \u0027parameters.maximumFee\" is returned on dry run request submission",
      "match": {
       "arguments": [
        {
         "val": "400",
         "offset": 0
        },
        {
         "val": "\"Amount must be greater than or equal to zero at \u0027parameters.maximumFee\"",
         "offset": 15
        }
       ],
       "location": "IntentSteps.anErrorWithIsReturnedOnDryRun(int,java.lang.String)"
      },
      "keyword": "Then "
     }
    ],
    "tags": [
     {
      "name": "@transactions-and-accounts"
     },
     {
      "name": "@transactions-and-dry-runs"
     },
     {
      "name": "@candidate"
     },
     {
      "name": "@solana"
     },
     {
      "name": "@tr_section-solana-dry-runs"
     },
     {
      "name": "@id-solana-dry-run-specified-rate-invalid-max-fee"
     }
    ]
   },
   {
    "line": 9,
    "name": "",
    "description": "",
    "type": "background",
    "keyword": "Background",
    "steps": [
     {
      "result": {
       "duration": 2091000,
       "status": "passed"
      },
      "line": 10,
      "name": "a root domain admin user is logged in",
      "match": {
       "location": "UserSteps.aRootDomainAdminUserIsLoggedIn()"
      },
      "keyword": "Given "
     },
     {
      "result": {
       "duration": 74000,
       "status": "passed"
      },
      "line": 11,
      "name": "the current domain is a root domain",
      "match": {
       "location": "DomainSteps.theCurrentDomainIsARootDomain()"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 376005000,
       "status": "passed"
      },
      "line": 12,
      "name": "the vault is configured",
      "match": {
       "location": "VaultsSteps.theVaultIsConfigured()"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 1085733000,
       "status": "passed"
      },
      "line": 14,
      "name": "pre-conditions for \"solana-devnet\" accounts balances recovery are met",
      "match": {
       "arguments": [
        {
         "val": "\"solana-devnet\"",
         "offset": 19
        }
       ],
       "location": "AccountsSteps.preConditionsForAccountsBalancesRecoveryAreMet(java.lang.String)"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 443350000,
       "status": "passed"
      },
      "line": 15,
      "name": "all recovery transfers are released to accounts",
      "match": {
       "location": "transactionsSteps.TransactionsSteps.allRecoveryQuarantinedTransfersAreReleased()"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 432436000,
       "status": "passed"
      },
      "line": 16,
      "name": "all ongoing quarantined transfers are released to accounts",
      "match": {
       "location": "transactionsSteps.TransactionsSteps.quarantinedTransfersAreReleasedToAccounts()"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 189274000,
       "status": "passed"
      },
      "line": 17,
      "name": "all policies except default are locked",
      "match": {
       "location": "PolicySteps.allPoliciesExceptDefaultAreLocked()"
      },
      "keyword": "And "
     }
    ]
   },
   {
    "start_timestamp": "2023-01-09T16:14:10.874Z",
    "before": [
     {
      "result": {
       "duration": 54000,
       "status": "passed"
      },
      "match": {
       "location": "PolicySteps.before(io.cucumber.java.Scenario)"
      }
     },
     {
      "result": {
       "duration": 1115822000,
       "status": "passed"
      },
      "match": {
       "location": "Hooks.beforeScenario()"
      }
     }
    ],
    "line": 128,
    "name": "Solana dry run with Priority fee strategy. Invalid destination",
    "description": "",
    "id": "solana-transactions-dry-run;solana-dry-run-with-priority-fee-strategy.-invalid-destination",
    "after": [
     {
      "result": {
       "duration": 128000,
       "status": "passed"
      },
      "match": {
       "location": "Hooks.afterScenario()"
      }
     }
    ],
    "type": "scenario",
    "keyword": "Scenario",
    "steps": [
     {
      "result": {
       "duration": 686074000,
       "status": "passed"
      },
      "line": 129,
      "name": "we have two recovered \"solana-devnet\" accounts",
      "match": {
       "arguments": [
        {
         "val": "\"solana-devnet\"",
         "offset": 22
        }
       ],
       "location": "AccountsSteps.weHaveTwoRecoveredAccounts(java.lang.String)"
      },
      "keyword": "Given "
     },
     {
      "result": {
       "duration": 60875000,
       "status": "passed"
      },
      "line": 131,
      "name": "dry run of solana transaction from \"account1\" to invalid account id is executed with the default maximumFee",
      "match": {
       "arguments": [
        {
         "val": "\"account1\"",
         "offset": 35
        }
       ],
       "location": "transactionsSteps.SolanaTransactionsSteps.dryRunOfSolanaTransactionFromToInvalidAccountIdIsExecutedWithTheDefaultMaximumFee(java.lang.String)"
      },
      "keyword": "When "
     },
     {
      "result": {
       "duration": 328000,
       "status": "passed"
      },
      "line": 132,
      "name": "dry run result has type \"Failure\" with hint \"InvalidDestination\"",
      "match": {
       "arguments": [
        {
         "val": "\"Failure\"",
         "offset": 24
        },
        {
         "val": "\"InvalidDestination\"",
         "offset": 44
        }
       ],
       "location": "transactionsSteps.TransactionsSteps.dryRunResultIs(java.lang.String,java.lang.String)"
      },
      "keyword": "Then "
     },
     {
      "result": {
       "duration": 87000,
       "status": "passed"
      },
      "line": 133,
      "name": "dry run result contains reason \"Cannot find recipient account\"",
      "match": {
       "arguments": [
        {
         "val": "\"Cannot find recipient account\"",
         "offset": 31
        }
       ],
       "location": "transactionsSteps.TransactionsSteps.dryRunResultIs(java.lang.String)"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 88652000,
       "status": "passed"
      },
      "line": 135,
      "name": "dry run of solana transaction from \"account1\" to invalid address is executed with the fee strategy specified above",
      "match": {
       "arguments": [
        {
         "val": "\"account1\"",
         "offset": 35
        }
       ],
       "location": "transactionsSteps.SolanaTransactionsSteps.dryRunOfSolanaTransactionFromToInvalidAddressIsExecutedWithTheDefaultMaximumFee(java.lang.String)"
      },
      "keyword": "When "
     },
     {
      "result": {
       "duration": 305000,
       "status": "passed"
      },
      "line": 136,
      "name": "dry run result has type \"Failure\" with hint \"InvalidDestination\"",
      "match": {
       "arguments": [
        {
         "val": "\"Failure\"",
         "offset": 24
        },
        {
         "val": "\"InvalidDestination\"",
         "offset": 44
        }
       ],
       "location": "transactionsSteps.TransactionsSteps.dryRunResultIs(java.lang.String,java.lang.String)"
      },
      "keyword": "Then "
     },
     {
      "result": {
       "duration": 82000,
       "status": "passed"
      },
      "line": 137,
      "name": "dry run result contains reason \"Invalid address\"",
      "match": {
       "arguments": [
        {
         "val": "\"Invalid address\"",
         "offset": 31
        }
       ],
       "location": "transactionsSteps.TransactionsSteps.dryRunResultIs(java.lang.String)"
      },
      "keyword": "And "
     }
    ],
    "tags": [
     {
      "name": "@transactions-and-accounts"
     },
     {
      "name": "@transactions-and-dry-runs"
     },
     {
      "name": "@candidate"
     },
     {
      "name": "@solana"
     },
     {
      "name": "@tr_section-solana-dry-runs"
     },
     {
      "name": "@id-solana-dry-run-priority-invalid-destination"
     }
    ]
   }
  ],
  "name": "Solana transactions dry run",
  "description": "",
  "id": "solana-transactions-dry-run",
  "keyword": "Feature",
  "uri": "file:src/test/resources/features/transactions_and_accounts/SolanaDryRuns.feature",
  "tags": [
   {
    "name": "@transactions-and-accounts",
    "type": "Tag",
    "location": {
     "line": 1,
     "column": 1
    }
   },
   {
    "name": "@transactions-and-dry-runs",
    "type": "Tag",
    "location": {
     "line": 2,
     "column": 1
    }
   },
   {
    "name": "@candidate",
    "type": "Tag",
    "location": {
     "line": 3,
     "column": 1
    }
   },
   {
    "name": "@solana",
    "type": "Tag",
    "location": {
     "line": 4,
     "column": 1
    }
   },
   {
    "name": "@tr_section-solana-dry-runs",
    "type": "Tag",
    "location": {
     "line": 5,
     "column": 1
    }
   }
  ]
 },
 {
  "line": 7,
  "elements": [
   {
    "line": 9,
    "name": "",
    "description": "",
    "type": "background",
    "keyword": "Background",
    "steps": [
     {
      "result": {
       "duration": 1792000,
       "status": "passed"
      },
      "line": 10,
      "name": "a root domain admin user is logged in",
      "match": {
       "location": "UserSteps.aRootDomainAdminUserIsLoggedIn()"
      },
      "keyword": "Given "
     },
     {
      "result": {
       "duration": 64000,
       "status": "passed"
      },
      "line": 11,
      "name": "the current domain is a root domain",
      "match": {
       "location": "DomainSteps.theCurrentDomainIsARootDomain()"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 435491000,
       "status": "passed"
      },
      "line": 12,
      "name": "the vault is configured",
      "match": {
       "location": "VaultsSteps.theVaultIsConfigured()"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 995526000,
       "status": "passed"
      },
      "line": 14,
      "name": "pre-conditions for \"solana-devnet\" accounts balances recovery are met",
      "match": {
       "arguments": [
        {
         "val": "\"solana-devnet\"",
         "offset": 19
        }
       ],
       "location": "AccountsSteps.preConditionsForAccountsBalancesRecoveryAreMet(java.lang.String)"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 160110000,
       "status": "passed"
      },
      "line": 15,
      "name": "all policies except default are locked",
      "match": {
       "location": "PolicySteps.allPoliciesExceptDefaultAreLocked()"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 439984000,
       "status": "passed"
      },
      "line": 16,
      "name": "all recovery transfers are released to accounts",
      "match": {
       "location": "transactionsSteps.TransactionsSteps.allRecoveryQuarantinedTransfersAreReleased()"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 399859000,
       "status": "passed"
      },
      "line": 17,
      "name": "all ongoing quarantined transfers are released to accounts",
      "match": {
       "location": "transactionsSteps.TransactionsSteps.quarantinedTransfersAreReleasedToAccounts()"
      },
      "keyword": "And "
     }
    ]
   },
   {
    "start_timestamp": "2023-01-09T16:14:15.405Z",
    "before": [
     {
      "result": {
       "duration": 59000,
       "status": "passed"
      },
      "match": {
       "location": "PolicySteps.before(io.cucumber.java.Scenario)"
      }
     },
     {
      "result": {
       "duration": 1007863000,
       "status": "passed"
      },
      "match": {
       "location": "Hooks.beforeScenario()"
      }
     }
    ],
    "line": 24,
    "name": "Solana transaction to address destination",
    "description": "",
    "id": "solana-transactions;solana-transaction-to-address-destination",
    "after": [
     {
      "result": {
       "duration": 329000,
       "status": "passed"
      },
      "match": {
       "location": "Hooks.afterScenario()"
      }
     }
    ],
    "type": "scenario",
    "keyword": "Scenario",
    "steps": [
     {
      "result": {
       "duration": 697586000,
       "status": "passed"
      },
      "line": 25,
      "name": "we have two recovered \"solana-devnet\" accounts",
      "match": {
       "arguments": [
        {
         "val": "\"solana-devnet\"",
         "offset": 22
        }
       ],
       "location": "AccountsSteps.weHaveTwoRecoveredAccounts(java.lang.String)"
      },
      "keyword": "Given "
     },
     {
      "result": {
       "duration": 1837680000,
       "status": "passed"
      },
      "line": 26,
      "name": "\"account1\" and \"account2\" have enough of \"dSOL\" on the balance for native transfer with funds return",
      "match": {
       "arguments": [
        {
         "val": "\"account1\"",
         "offset": 0
        },
        {
         "val": "\"account2\"",
         "offset": 15
        },
        {
         "val": "\"dSOL\"",
         "offset": 41
        }
       ],
       "location": "AccountsSteps.andHaveEnoughOfForTransactionWithFundsReturn(java.lang.String,java.lang.String,java.lang.String)"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 230071000,
       "status": "passed"
      },
      "line": 27,
      "name": "dry run of solana transaction from \"account1\" to address of \"account2\" is executed with the default maximumFee",
      "match": {
       "arguments": [
        {
         "val": "\"account1\"",
         "offset": 35
        },
        {
         "val": "\"account2\"",
         "offset": 60
        }
       ],
       "location": "transactionsSteps.SolanaTransactionsSteps.theMaximumFeeValueIsSetSufficientToSatisfyTheChosenFeeStrategyForSolanaTransactionFromToAddressOf(java.lang.String,java.lang.String)"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 363000,
       "status": "passed"
      },
      "line": 28,
      "name": "dry run result is success",
      "match": {
       "location": "transactionsSteps.TransactionsSteps.dryRunResultIsSuccess()"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 1486519000,
       "status": "passed"
      },
      "line": 30,
      "name": "solana transaction intent to send \"dSOL\" from \"account1\" to address of \"account2\" is executed",
      "match": {
       "arguments": [
        {
         "val": "\"dSOL\"",
         "offset": 34
        },
        {
         "val": "\"account1\"",
         "offset": 46
        },
        {
         "val": "\"account2\"",
         "offset": 71
        }
       ],
       "location": "transactionsSteps.SolanaTransactionsSteps.solanaTransactionIntentToSendFromToAddressOfIsExecuted(java.lang.String,java.lang.String,java.lang.String)"
      },
      "keyword": "When "
     },
     {
      "result": {
       "duration": 6697092000,
       "status": "passed"
      },
      "line": 31,
      "name": "transaction ledger status is \"Detected or Confirmed\"",
      "match": {
       "arguments": [
        {
         "val": "\"Detected or Confirmed\"",
         "offset": 29
        }
       ],
       "location": "transactionsSteps.TransactionsSteps.transactionLedgerStatusIs(java.lang.String)"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 479025000,
       "status": "passed"
      },
      "line": 33,
      "name": "corresponding transfer and fee are present",
      "match": {
       "location": "transactionsSteps.TransactionsSteps.correspondingTransferAndFeeArePresent()"
      },
      "keyword": "Then "
     },
     {
      "result": {
       "duration": 196299000,
       "status": "passed"
      },
      "line": 34,
      "name": "the transfer to \"account2\" is quarantined",
      "match": {
       "arguments": [
        {
         "val": "\"account2\"",
         "offset": 16
        }
       ],
       "location": "transactionsSteps.TransactionsSteps.theTransferToIsQuarantined(java.lang.String)"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 1607514000,
       "status": "passed"
      },
      "line": 35,
      "name": "\"account1\" has correct balances of \"dSOL\" after \"outgoing\" transaction",
      "match": {
       "arguments": [
        {
         "val": "\"account1\"",
         "offset": 0
        },
        {
         "val": "\"dSOL\"",
         "offset": 35
        },
        {
         "val": "\"outgoing\"",
         "offset": 48
        }
       ],
       "location": "transactionsSteps.TransactionsSteps.hasCorrectBalancesAfterTransaction(java.lang.String,java.lang.String,java.lang.String)"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 1307915000,
       "status": "passed"
      },
      "line": 36,
      "name": "\"account2\" has correct balances of \"dSOL\" after \"incoming\" transaction",
      "match": {
       "arguments": [
        {
         "val": "\"account2\"",
         "offset": 0
        },
        {
         "val": "\"dSOL\"",
         "offset": 35
        },
        {
         "val": "\"incoming\"",
         "offset": 48
        }
       ],
       "location": "transactionsSteps.TransactionsSteps.hasCorrectBalancesAfterTransaction(java.lang.String,java.lang.String,java.lang.String)"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 1331957000,
       "status": "passed"
      },
      "line": 38,
      "name": "release quarantined transfers to \"account2\" intent is executed",
      "match": {
       "arguments": [
        {
         "val": "\"account2\"",
         "offset": 33
        }
       ],
       "location": "transactionsSteps.TransactionsSteps.releaseQuarantinedTransfersToIntentIsExecuted(java.lang.String)"
      },
      "keyword": "When "
     },
     {
      "result": {
       "duration": 1513803000,
       "status": "passed"
      },
      "line": 39,
      "name": "\"account1\" has correct balances of \"dSOL\" after \"outgoing\" transaction",
      "match": {
       "arguments": [
        {
         "val": "\"account1\"",
         "offset": 0
        },
        {
         "val": "\"dSOL\"",
         "offset": 35
        },
        {
         "val": "\"outgoing\"",
         "offset": 48
        }
       ],
       "location": "transactionsSteps.TransactionsSteps.hasCorrectBalancesAfterTransaction(java.lang.String,java.lang.String,java.lang.String)"
      },
      "keyword": "Then "
     },
     {
      "result": {
       "duration": 1240244000,
       "status": "passed"
      },
      "line": 40,
      "name": "\"account2\" has correct balances of \"dSOL\" after \"incoming\" transaction",
      "match": {
       "arguments": [
        {
         "val": "\"account2\"",
         "offset": 0
        },
        {
         "val": "\"dSOL\"",
         "offset": 35
        },
        {
         "val": "\"incoming\"",
         "offset": 48
        }
       ],
       "location": "transactionsSteps.TransactionsSteps.hasCorrectBalancesAfterTransaction(java.lang.String,java.lang.String,java.lang.String)"
      },
      "keyword": "Then "
     },
     {
      "result": {
       "duration": 5531072000,
       "status": "passed"
      },
      "line": 42,
      "name": "\"dSOL\" funds are sent from \"account2\" to \"account1\"",
      "match": {
       "arguments": [
        {
         "val": "\"dSOL\"",
         "offset": 0
        },
        {
         "val": "\"account2\"",
         "offset": 27
        },
        {
         "val": "\"account1\"",
         "offset": 41
        }
       ],
       "location": "transactionsSteps.TransactionsSteps.fundsAreSentFromTo(java.lang.String,java.lang.String,java.lang.String)"
      },
      "keyword": "And "
     }
    ],
    "tags": [
     {
      "name": "@transactions-and-accounts"
     },
     {
      "name": "@transactions-and-dry-runs"
     },
     {
      "name": "@solana"
     },
     {
      "name": "@solana-transactions"
     },
     {
      "name": "@tr_section-solana-transactions"
     },
     {
      "name": "@milestone-hmz-1.6"
     },
     {
      "name": "@smoke"
     },
     {
      "name": "@candidate"
     },
     {
      "name": "@id-solana-transaction-to-address-destination"
     }
    ]
   },
   {
    "line": 9,
    "name": "",
    "description": "",
    "type": "background",
    "keyword": "Background",
    "steps": [
     {
      "result": {
       "duration": 1005000,
       "status": "passed"
      },
      "line": 10,
      "name": "a root domain admin user is logged in",
      "match": {
       "location": "UserSteps.aRootDomainAdminUserIsLoggedIn()"
      },
      "keyword": "Given "
     },
     {
      "result": {
       "duration": 40000,
       "status": "passed"
      },
      "line": 11,
      "name": "the current domain is a root domain",
      "match": {
       "location": "DomainSteps.theCurrentDomainIsARootDomain()"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 400851000,
       "status": "passed"
      },
      "line": 12,
      "name": "the vault is configured",
      "match": {
       "location": "VaultsSteps.theVaultIsConfigured()"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 1035405000,
       "status": "passed"
      },
      "line": 14,
      "name": "pre-conditions for \"solana-devnet\" accounts balances recovery are met",
      "match": {
       "arguments": [
        {
         "val": "\"solana-devnet\"",
         "offset": 19
        }
       ],
       "location": "AccountsSteps.preConditionsForAccountsBalancesRecoveryAreMet(java.lang.String)"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 183711000,
       "status": "passed"
      },
      "line": 15,
      "name": "all policies except default are locked",
      "match": {
       "location": "PolicySteps.allPoliciesExceptDefaultAreLocked()"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 467954000,
       "status": "passed"
      },
      "line": 16,
      "name": "all recovery transfers are released to accounts",
      "match": {
       "location": "transactionsSteps.TransactionsSteps.allRecoveryQuarantinedTransfersAreReleased()"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 385226000,
       "status": "passed"
      },
      "line": 17,
      "name": "all ongoing quarantined transfers are released to accounts",
      "match": {
       "location": "transactionsSteps.TransactionsSteps.quarantinedTransfersAreReleasedToAccounts()"
      },
      "keyword": "And "
     }
    ]
   },
   {
    "start_timestamp": "2023-01-09T16:14:43.062Z",
    "before": [
     {
      "result": {
       "duration": 78000,
       "status": "passed"
      },
      "match": {
       "location": "PolicySteps.before(io.cucumber.java.Scenario)"
      }
     },
     {
      "result": {
       "duration": 1083415000,
       "status": "passed"
      },
      "match": {
       "location": "Hooks.beforeScenario()"
      }
     }
    ],
    "line": 69,
    "name": "Solana transaction to endpoint destination",
    "description": "",
    "id": "solana-transactions;solana-transaction-to-endpoint-destination",
    "after": [
     {
      "result": {
       "duration": 234000,
       "status": "passed"
      },
      "match": {
       "location": "Hooks.afterScenario()"
      }
     }
    ],
    "type": "scenario",
    "keyword": "Scenario",
    "steps": [
     {
      "result": {
       "duration": 658558000,
       "status": "passed"
      },
      "line": 70,
      "name": "we have two recovered \"solana-devnet\" accounts",
      "match": {
       "arguments": [
        {
         "val": "\"solana-devnet\"",
         "offset": 22
        }
       ],
       "location": "AccountsSteps.weHaveTwoRecoveredAccounts(java.lang.String)"
      },
      "keyword": "Given "
     },
     {
      "result": {
       "duration": 1045209000,
       "status": "passed"
      },
      "line": 71,
      "name": "\"account1\" and \"account2\" have enough of \"dSOL\" on the balance for native transfer with funds return",
      "match": {
       "arguments": [
        {
         "val": "\"account1\"",
         "offset": 0
        },
        {
         "val": "\"account2\"",
         "offset": 15
        },
        {
         "val": "\"dSOL\"",
         "offset": 41
        }
       ],
       "location": "AccountsSteps.andHaveEnoughOfForTransactionWithFundsReturn(java.lang.String,java.lang.String,java.lang.String)"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 159518000,
       "status": "passed"
      },
      "line": 72,
      "name": "dry run of solana transaction from \"account1\" to address of \"account2\" is executed with the default maximumFee",
      "match": {
       "arguments": [
        {
         "val": "\"account1\"",
         "offset": 35
        },
        {
         "val": "\"account2\"",
         "offset": 60
        }
       ],
       "location": "transactionsSteps.SolanaTransactionsSteps.theMaximumFeeValueIsSetSufficientToSatisfyTheChosenFeeStrategyForSolanaTransactionFromToAddressOf(java.lang.String,java.lang.String)"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 453000,
       "status": "passed"
      },
      "line": 73,
      "name": "dry run result is success",
      "match": {
       "location": "transactionsSteps.TransactionsSteps.dryRunResultIsSuccess()"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 1255102000,
       "status": "passed"
      },
      "line": 75,
      "name": "endpoint using \"account2\" address is created",
      "match": {
       "arguments": [
        {
         "val": "\"account2\"",
         "offset": 15
        }
       ],
       "location": "EndpointsSteps.endpointUsingAddressIsCreated(java.lang.String)"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 2723804000,
       "status": "passed"
      },
      "line": 77,
      "name": "solana transaction intent to send \"dSOL\" from \"account1\" to endpoint with \"account2\" address is executed",
      "match": {
       "arguments": [
        {
         "val": "\"dSOL\"",
         "offset": 34
        },
        {
         "val": "\"account1\"",
         "offset": 46
        },
        {
         "val": "\"account2\"",
         "offset": 74
        }
       ],
       "location": "transactionsSteps.SolanaTransactionsSteps.solanaTransactionIntentToSendFromToEndpointWithAddressIsExecuted(java.lang.String,java.lang.String,java.lang.String)"
      },
      "keyword": "When "
     },
     {
      "result": {
       "duration": 1577396000,
       "status": "passed"
      },
      "line": 78,
      "name": "transaction ledger status is \"Detected or Confirmed\"",
      "match": {
       "arguments": [
        {
         "val": "\"Detected or Confirmed\"",
         "offset": 29
        }
       ],
       "location": "transactionsSteps.TransactionsSteps.transactionLedgerStatusIs(java.lang.String)"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 469107000,
       "status": "passed"
      },
      "line": 80,
      "name": "corresponding transfer and fee are present",
      "match": {
       "location": "transactionsSteps.TransactionsSteps.correspondingTransferAndFeeArePresent()"
      },
      "keyword": "Then "
     },
     {
      "result": {
       "duration": 177794000,
       "status": "passed"
      },
      "line": 81,
      "name": "the transfer to \"account2\" is quarantined",
      "match": {
       "arguments": [
        {
         "val": "\"account2\"",
         "offset": 16
        }
       ],
       "location": "transactionsSteps.TransactionsSteps.theTransferToIsQuarantined(java.lang.String)"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 1742079000,
       "status": "passed"
      },
      "line": 82,
      "name": "\"account1\" has correct balances of \"dSOL\" after \"outgoing\" transaction",
      "match": {
       "arguments": [
        {
         "val": "\"account1\"",
         "offset": 0
        },
        {
         "val": "\"dSOL\"",
         "offset": 35
        },
        {
         "val": "\"outgoing\"",
         "offset": 48
        }
       ],
       "location": "transactionsSteps.TransactionsSteps.hasCorrectBalancesAfterTransaction(java.lang.String,java.lang.String,java.lang.String)"
      },
      "keyword": "Then "
     },
     {
      "result": {
       "duration": 1432293000,
       "status": "passed"
      },
      "line": 83,
      "name": "\"account2\" has correct balances of \"dSOL\" after \"incoming\" transaction",
      "match": {
       "arguments": [
        {
         "val": "\"account2\"",
         "offset": 0
        },
        {
         "val": "\"dSOL\"",
         "offset": 35
        },
        {
         "val": "\"incoming\"",
         "offset": 48
        }
       ],
       "location": "transactionsSteps.TransactionsSteps.hasCorrectBalancesAfterTransaction(java.lang.String,java.lang.String,java.lang.String)"
      },
      "keyword": "Then "
     },
     {
      "result": {
       "duration": 727866000,
       "status": "passed"
      },
      "line": 85,
      "name": "release quarantined transfers to \"account2\" intent is executed",
      "match": {
       "arguments": [
        {
         "val": "\"account2\"",
         "offset": 33
        }
       ],
       "location": "transactionsSteps.TransactionsSteps.releaseQuarantinedTransfersToIntentIsExecuted(java.lang.String)"
      },
      "keyword": "When "
     },
     {
      "result": {
       "duration": 1781981000,
       "status": "passed"
      },
      "line": 86,
      "name": "\"account1\" has correct balances of \"dSOL\" after \"outgoing\" transaction",
      "match": {
       "arguments": [
        {
         "val": "\"account1\"",
         "offset": 0
        },
        {
         "val": "\"dSOL\"",
         "offset": 35
        },
        {
         "val": "\"outgoing\"",
         "offset": 48
        }
       ],
       "location": "transactionsSteps.TransactionsSteps.hasCorrectBalancesAfterTransaction(java.lang.String,java.lang.String,java.lang.String)"
      },
      "keyword": "Then "
     },
     {
      "result": {
       "duration": 1547859000,
       "status": "passed"
      },
      "line": 87,
      "name": "\"account2\" has correct balances of \"dSOL\" after \"incoming\" transaction",
      "match": {
       "arguments": [
        {
         "val": "\"account2\"",
         "offset": 0
        },
        {
         "val": "\"dSOL\"",
         "offset": 35
        },
        {
         "val": "\"incoming\"",
         "offset": 48
        }
       ],
       "location": "transactionsSteps.TransactionsSteps.hasCorrectBalancesAfterTransaction(java.lang.String,java.lang.String,java.lang.String)"
      },
      "keyword": "Then "
     },
     {
      "result": {
       "duration": 5478533000,
       "status": "passed"
      },
      "line": 88,
      "name": "\"dSOL\" funds are sent from \"account2\" to \"account1\"",
      "match": {
       "arguments": [
        {
         "val": "\"dSOL\"",
         "offset": 0
        },
        {
         "val": "\"account2\"",
         "offset": 27
        },
        {
         "val": "\"account1\"",
         "offset": 41
        }
       ],
       "location": "transactionsSteps.TransactionsSteps.fundsAreSentFromTo(java.lang.String,java.lang.String,java.lang.String)"
      },
      "keyword": "And "
     }
    ],
    "tags": [
     {
      "name": "@transactions-and-accounts"
     },
     {
      "name": "@transactions-and-dry-runs"
     },
     {
      "name": "@solana"
     },
     {
      "name": "@solana-transactions"
     },
     {
      "name": "@tr_section-solana-transactions"
     },
     {
      "name": "@milestone-hmz-1.6"
     },
     {
      "name": "@candidate"
     },
     {
      "name": "@id-solana-transaction-to-endpoint-destination"
     }
    ]
   }
  ],
  "name": "Solana transactions",
  "description": "",
  "id": "solana-transactions",
  "keyword": "Feature",
  "uri": "file:src/test/resources/features/transactions_and_accounts/SolanaTransactions.feature",
  "tags": [
   {
    "name": "@transactions-and-accounts",
    "type": "Tag",
    "location": {
     "line": 1,
     "column": 1
    }
   },
   {
    "name": "@transactions-and-dry-runs",
    "type": "Tag",
    "location": {
     "line": 2,
     "column": 1
    }
   },
   {
    "name": "@solana",
    "type": "Tag",
    "location": {
     "line": 3,
     "column": 1
    }
   },
   {
    "name": "@solana-transactions",
    "type": "Tag",
    "location": {
     "line": 4,
     "column": 1
    }
   },
   {
    "name": "@tr_section-solana-transactions",
    "type": "Tag",
    "location": {
     "line": 5,
     "column": 1
    }
   }
  ]
 },
 {
  "line": 7,
  "elements": [
   {
    "line": 9,
    "name": "",
    "description": "",
    "type": "background",
    "keyword": "Background",
    "steps": [
     {
      "result": {
       "duration": 1189000,
       "status": "passed"
      },
      "line": 10,
      "name": "a root domain admin user is logged in",
      "match": {
       "location": "UserSteps.aRootDomainAdminUserIsLoggedIn()"
      },
      "keyword": "Given "
     },
     {
      "result": {
       "duration": 56000,
       "status": "passed"
      },
      "line": 11,
      "name": "the current domain is a root domain",
      "match": {
       "location": "DomainSteps.theCurrentDomainIsARootDomain()"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 422860000,
       "status": "passed"
      },
      "line": 12,
      "name": "the vault is configured",
      "match": {
       "location": "VaultsSteps.theVaultIsConfigured()"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 1038056000,
       "status": "passed"
      },
      "line": 14,
      "name": "pre-conditions for \"stellar-testnet-september-2022\" accounts balances recovery are met",
      "match": {
       "arguments": [
        {
         "val": "\"stellar-testnet-september-2022\"",
         "offset": 19
        }
       ],
       "location": "AccountsSteps.preConditionsForAccountsBalancesRecoveryAreMet(java.lang.String)"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 448712000,
       "status": "passed"
      },
      "line": 15,
      "name": "all recovery transfers are released to accounts",
      "match": {
       "location": "transactionsSteps.TransactionsSteps.allRecoveryQuarantinedTransfersAreReleased()"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 444453000,
       "status": "passed"
      },
      "line": 16,
      "name": "all ongoing quarantined transfers are released to accounts",
      "match": {
       "location": "transactionsSteps.TransactionsSteps.quarantinedTransfersAreReleasedToAccounts()"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 185195000,
       "status": "passed"
      },
      "line": 17,
      "name": "all policies except default are locked",
      "match": {
       "location": "PolicySteps.allPoliciesExceptDefaultAreLocked()"
      },
      "keyword": "And "
     }
    ]
   },
   {
    "start_timestamp": "2023-01-09T16:15:07.437Z",
    "before": [
     {
      "result": {
       "duration": 75000,
       "status": "passed"
      },
      "match": {
       "location": "PolicySteps.before(io.cucumber.java.Scenario)"
      }
     },
     {
      "result": {
       "duration": 963827000,
       "status": "passed"
      },
      "match": {
       "location": "Hooks.beforeScenario()"
      }
     }
    ],
    "line": 22,
    "name": "Stellar dry run with Priority fee strategy. CurrentlyFeesTooLarge",
    "description": "",
    "id": "stellar-transactions-dry-run;stellar-dry-run-with-priority-fee-strategy.-currentlyfeestoolarge",
    "after": [
     {
      "result": {
       "duration": 69000,
       "status": "passed"
      },
      "match": {
       "location": "Hooks.afterScenario()"
      }
     }
    ],
    "type": "scenario",
    "keyword": "Scenario",
    "steps": [
     {
      "result": {
       "duration": 686922000,
       "status": "passed"
      },
      "line": 23,
      "name": "we have two recovered \"stellar-testnet-september-2022\" accounts",
      "match": {
       "arguments": [
        {
         "val": "\"stellar-testnet-september-2022\"",
         "offset": 22
        }
       ],
       "location": "AccountsSteps.weHaveTwoRecoveredAccounts(java.lang.String)"
      },
      "keyword": "Given "
     },
     {
      "result": {
       "duration": 449022000,
       "status": "passed"
      },
      "line": 25,
      "name": "all quarantined transfers are released to \"account1\"",
      "match": {
       "arguments": [
        {
         "val": "\"account1\"",
         "offset": 42
        }
       ],
       "location": "transactionsSteps.TransactionsSteps.allTransfersReleasedTo(java.lang.String)"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 903000,
       "status": "passed"
      },
      "line": 26,
      "name": "the following \"stellar-testnet-september-2022\" fee strategy is used",
      "match": {
       "arguments": [
        {
         "val": "\"stellar-testnet-september-2022\"",
         "offset": 14
        }
       ],
       "location": "transactionsSteps.TransactionsSteps.theFollowingFeeStrategyIsUsed(java.lang.String,io.cucumber.datatable.DataTable)"
      },
      "rows": [
       {
        "cells": [
         "type",
         "Priority"
        ]
       },
       {
        "cells": [
         "priority",
         "Medium"
        ]
       }
      ],
      "keyword": "And "
     },
     {
      "result": {
       "duration": 94051000,
       "status": "passed"
      },
      "line": 30,
      "name": "the maximumFee value is set to \"5\" percent less then required to satisfy the chosen fee strategy for stellar transaction from \"account1\" to \"account2\"",
      "match": {
       "arguments": [
        {
         "val": "\"5\"",
         "offset": 31
        },
        {
         "val": "\"account1\"",
         "offset": 126
        },
        {
         "val": "\"account2\"",
         "offset": 140
        }
       ],
       "location": "transactionsSteps.StellarTransactionsSteps.maxFeeSetLessForStellarTransaction(java.lang.String,java.lang.String,java.lang.String)"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 135715000,
       "status": "passed"
      },
      "line": 31,
      "name": "dry run of stellar transaction from \"account1\" to \"account2\" is executed with the fee strategy specified above",
      "match": {
       "arguments": [
        {
         "val": "\"account1\"",
         "offset": 36
        },
        {
         "val": "\"account2\"",
         "offset": 50
        }
       ],
       "location": "transactionsSteps.StellarTransactionsSteps.dryRunOfStellarTransactionFromToIsExecutedWithTheFeeStrategySpecifiedAbove(java.lang.String,java.lang.String)"
      },
      "keyword": "When "
     },
     {
      "result": {
       "duration": 161000,
       "status": "passed"
      },
      "line": 33,
      "name": "dry run result has type \"Failure\" with hint \"CurrentlyFeesTooLarge\"",
      "match": {
       "arguments": [
        {
         "val": "\"Failure\"",
         "offset": 24
        },
        {
         "val": "\"CurrentlyFeesTooLarge\"",
         "offset": 44
        }
       ],
       "location": "transactionsSteps.TransactionsSteps.dryRunResultIs(java.lang.String,java.lang.String)"
      },
      "keyword": "Then "
     },
     {
      "result": {
       "duration": 58000,
       "status": "passed"
      },
      "line": 34,
      "name": "dry run result contains reason \"Currently proposed fee exceeds maximum fee\"",
      "match": {
       "arguments": [
        {
         "val": "\"Currently proposed fee exceeds maximum fee\"",
         "offset": 31
        }
       ],
       "location": "transactionsSteps.TransactionsSteps.dryRunResultIs(java.lang.String)"
      },
      "keyword": "And "
     }
    ],
    "tags": [
     {
      "name": "@transactions-and-accounts"
     },
     {
      "name": "@transactions-and-dry-runs"
     },
     {
      "name": "@candidate"
     },
     {
      "name": "@stellar"
     },
     {
      "name": "@tr_section-stellar-transactions-dry-runs"
     },
     {
      "name": "@milestone-hmz-1.6"
     },
     {
      "name": "@stellar-dry-run"
     },
     {
      "name": "@id-stellar-dry-run-priority-fees-too-large"
     }
    ]
   },
   {
    "line": 9,
    "name": "",
    "description": "",
    "type": "background",
    "keyword": "Background",
    "steps": [
     {
      "result": {
       "duration": 912000,
       "status": "passed"
      },
      "line": 10,
      "name": "a root domain admin user is logged in",
      "match": {
       "location": "UserSteps.aRootDomainAdminUserIsLoggedIn()"
      },
      "keyword": "Given "
     },
     {
      "result": {
       "duration": 43000,
       "status": "passed"
      },
      "line": 11,
      "name": "the current domain is a root domain",
      "match": {
       "location": "DomainSteps.theCurrentDomainIsARootDomain()"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 427382000,
       "status": "passed"
      },
      "line": 12,
      "name": "the vault is configured",
      "match": {
       "location": "VaultsSteps.theVaultIsConfigured()"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 1034216000,
       "status": "passed"
      },
      "line": 14,
      "name": "pre-conditions for \"stellar-testnet-september-2022\" accounts balances recovery are met",
      "match": {
       "arguments": [
        {
         "val": "\"stellar-testnet-september-2022\"",
         "offset": 19
        }
       ],
       "location": "AccountsSteps.preConditionsForAccountsBalancesRecoveryAreMet(java.lang.String)"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 461473000,
       "status": "passed"
      },
      "line": 15,
      "name": "all recovery transfers are released to accounts",
      "match": {
       "location": "transactionsSteps.TransactionsSteps.allRecoveryQuarantinedTransfersAreReleased()"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 429584000,
       "status": "passed"
      },
      "line": 16,
      "name": "all ongoing quarantined transfers are released to accounts",
      "match": {
       "location": "transactionsSteps.TransactionsSteps.quarantinedTransfersAreReleasedToAccounts()"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 169380000,
       "status": "passed"
      },
      "line": 17,
      "name": "all policies except default are locked",
      "match": {
       "location": "PolicySteps.allPoliciesExceptDefaultAreLocked()"
      },
      "keyword": "And "
     }
    ]
   },
   {
    "start_timestamp": "2023-01-09T16:15:12.361Z",
    "before": [
     {
      "result": {
       "duration": 52000,
       "status": "passed"
      },
      "match": {
       "location": "PolicySteps.before(io.cucumber.java.Scenario)"
      }
     },
     {
      "result": {
       "duration": 1111622000,
       "status": "passed"
      },
      "match": {
       "location": "Hooks.beforeScenario()"
      }
     }
    ],
    "line": 38,
    "name": "Stellar dry run with SpecifiedRate fee strategy. CurrentlyFeesTooLarge.",
    "description": "",
    "id": "stellar-transactions-dry-run;stellar-dry-run-with-specifiedrate-fee-strategy.-currentlyfeestoolarge.",
    "after": [
     {
      "result": {
       "duration": 48000,
       "status": "passed"
      },
      "match": {
       "location": "Hooks.afterScenario()"
      }
     }
    ],
    "type": "scenario",
    "keyword": "Scenario",
    "steps": [
     {
      "result": {
       "duration": 663634000,
       "status": "passed"
      },
      "line": 39,
      "name": "we have two recovered \"stellar-testnet-september-2022\" accounts",
      "match": {
       "arguments": [
        {
         "val": "\"stellar-testnet-september-2022\"",
         "offset": 22
        }
       ],
       "location": "AccountsSteps.weHaveTwoRecoveredAccounts(java.lang.String)"
      },
      "keyword": "Given "
     },
     {
      "result": {
       "duration": 78982000,
       "status": "passed"
      },
      "line": 41,
      "name": "the following \"stellar-testnet-september-2022\" fee strategy is used",
      "match": {
       "arguments": [
        {
         "val": "\"stellar-testnet-september-2022\"",
         "offset": 14
        }
       ],
       "location": "transactionsSteps.TransactionsSteps.theFollowingFeeStrategyIsUsed(java.lang.String,io.cucumber.datatable.DataTable)"
      },
      "rows": [
       {
        "cells": [
         "type",
         "SpecifiedRate"
        ]
       },
       {
        "cells": [
         "baseFee",
         "Medium"
        ]
       }
      ],
      "keyword": "And "
     },
     {
      "result": {
       "duration": 126520000,
       "status": "passed"
      },
      "line": 45,
      "name": "the maximumFee value is set to \"5\" percent less then required to satisfy the chosen fee strategy for stellar transaction from \"account1\" to \"account2\"",
      "match": {
       "arguments": [
        {
         "val": "\"5\"",
         "offset": 31
        },
        {
         "val": "\"account1\"",
         "offset": 126
        },
        {
         "val": "\"account2\"",
         "offset": 140
        }
       ],
       "location": "transactionsSteps.StellarTransactionsSteps.maxFeeSetLessForStellarTransaction(java.lang.String,java.lang.String,java.lang.String)"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 137509000,
       "status": "passed"
      },
      "line": 46,
      "name": "dry run of stellar transaction from \"account1\" to \"account2\" is executed with the fee strategy specified above",
      "match": {
       "arguments": [
        {
         "val": "\"account1\"",
         "offset": 36
        },
        {
         "val": "\"account2\"",
         "offset": 50
        }
       ],
       "location": "transactionsSteps.StellarTransactionsSteps.dryRunOfStellarTransactionFromToIsExecutedWithTheFeeStrategySpecifiedAbove(java.lang.String,java.lang.String)"
      },
      "keyword": "When "
     },
     {
      "result": {
       "duration": 124000,
       "status": "passed"
      },
      "line": 48,
      "name": "dry run result has type \"Failure\" with hint \"CurrentlyFeesTooLarge\"",
      "match": {
       "arguments": [
        {
         "val": "\"Failure\"",
         "offset": 24
        },
        {
         "val": "\"CurrentlyFeesTooLarge\"",
         "offset": 44
        }
       ],
       "location": "transactionsSteps.TransactionsSteps.dryRunResultIs(java.lang.String,java.lang.String)"
      },
      "keyword": "Then "
     },
     {
      "result": {
       "duration": 38000,
       "status": "passed"
      },
      "line": 49,
      "name": "dry run result contains reason \"Currently proposed fee exceeds maximum fee\"",
      "match": {
       "arguments": [
        {
         "val": "\"Currently proposed fee exceeds maximum fee\"",
         "offset": 31
        }
       ],
       "location": "transactionsSteps.TransactionsSteps.dryRunResultIs(java.lang.String)"
      },
      "keyword": "And "
     }
    ],
    "tags": [
     {
      "name": "@transactions-and-accounts"
     },
     {
      "name": "@transactions-and-dry-runs"
     },
     {
      "name": "@candidate"
     },
     {
      "name": "@stellar"
     },
     {
      "name": "@tr_section-stellar-transactions-dry-runs"
     },
     {
      "name": "@milestone-hmz-1.6"
     },
     {
      "name": "@id-stellar-dry-run-specified-rate-fees-too-large"
     }
    ]
   },
   {
    "line": 9,
    "name": "",
    "description": "",
    "type": "background",
    "keyword": "Background",
    "steps": [
     {
      "result": {
       "duration": 737000,
       "status": "passed"
      },
      "line": 10,
      "name": "a root domain admin user is logged in",
      "match": {
       "location": "UserSteps.aRootDomainAdminUserIsLoggedIn()"
      },
      "keyword": "Given "
     },
     {
      "result": {
       "duration": 30000,
       "status": "passed"
      },
      "line": 11,
      "name": "the current domain is a root domain",
      "match": {
       "location": "DomainSteps.theCurrentDomainIsARootDomain()"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 400953000,
       "status": "passed"
      },
      "line": 12,
      "name": "the vault is configured",
      "match": {
       "location": "VaultsSteps.theVaultIsConfigured()"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 1011753000,
       "status": "passed"
      },
      "line": 14,
      "name": "pre-conditions for \"stellar-testnet-september-2022\" accounts balances recovery are met",
      "match": {
       "arguments": [
        {
         "val": "\"stellar-testnet-september-2022\"",
         "offset": 19
        }
       ],
       "location": "AccountsSteps.preConditionsForAccountsBalancesRecoveryAreMet(java.lang.String)"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 638103000,
       "status": "passed"
      },
      "line": 15,
      "name": "all recovery transfers are released to accounts",
      "match": {
       "location": "transactionsSteps.TransactionsSteps.allRecoveryQuarantinedTransfersAreReleased()"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 896012000,
       "status": "passed"
      },
      "line": 16,
      "name": "all ongoing quarantined transfers are released to accounts",
      "match": {
       "location": "transactionsSteps.TransactionsSteps.quarantinedTransfersAreReleasedToAccounts()"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 419074000,
       "status": "passed"
      },
      "line": 17,
      "name": "all policies except default are locked",
      "match": {
       "location": "PolicySteps.allPoliciesExceptDefaultAreLocked()"
      },
      "keyword": "And "
     }
    ]
   },
   {
    "start_timestamp": "2023-01-09T16:15:17.031Z",
    "before": [
     {
      "result": {
       "duration": 51000,
       "status": "passed"
      },
      "match": {
       "location": "PolicySteps.before(io.cucumber.java.Scenario)"
      }
     },
     {
      "result": {
       "duration": 1030088000,
       "status": "passed"
      },
      "match": {
       "location": "Hooks.beforeScenario()"
      }
     }
    ],
    "line": 53,
    "name": "Stellar dry run with SpecifiedRate fee strategy. Success",
    "description": "",
    "id": "stellar-transactions-dry-run;stellar-dry-run-with-specifiedrate-fee-strategy.-success",
    "after": [
     {
      "result": {
       "duration": 117000,
       "status": "passed"
      },
      "match": {
       "location": "Hooks.afterScenario()"
      }
     }
    ],
    "type": "scenario",
    "keyword": "Scenario",
    "steps": [
     {
      "result": {
       "duration": 854463000,
       "status": "passed"
      },
      "line": 54,
      "name": "we have two recovered \"stellar-testnet-september-2022\" accounts",
      "match": {
       "arguments": [
        {
         "val": "\"stellar-testnet-september-2022\"",
         "offset": 22
        }
       ],
       "location": "AccountsSteps.weHaveTwoRecoveredAccounts(java.lang.String)"
      },
      "keyword": "Given "
     },
     {
      "result": {
       "duration": 75117000,
       "status": "passed"
      },
      "line": 56,
      "name": "the following \"stellar-testnet-september-2022\" fee strategy is used",
      "match": {
       "arguments": [
        {
         "val": "\"stellar-testnet-september-2022\"",
         "offset": 14
        }
       ],
       "location": "transactionsSteps.TransactionsSteps.theFollowingFeeStrategyIsUsed(java.lang.String,io.cucumber.datatable.DataTable)"
      },
      "rows": [
       {
        "cells": [
         "type",
         "SpecifiedRate"
        ]
       },
       {
        "cells": [
         "baseFee",
         "Medium"
        ]
       }
      ],
      "keyword": "And "
     },
     {
      "result": {
       "duration": 90179000,
       "status": "passed"
      },
      "line": 60,
      "name": "the maximumFee value is set sufficient to satisfy the chosen fee strategy for stellar transaction from \"account1\" to \"account2\"",
      "match": {
       "arguments": [
        {
         "val": "\"account1\"",
         "offset": 103
        },
        {
         "val": "\"account2\"",
         "offset": 117
        }
       ],
       "location": "transactionsSteps.StellarTransactionsSteps.theMaximumFeeValueIsSetSufficientToSatisfyTheChosenFeeStrategyForStellarTransactionFromTo(java.lang.String,java.lang.String)"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 113280000,
       "status": "passed"
      },
      "line": 61,
      "name": "dry run of stellar transaction from \"account1\" to \"account2\" is executed with the fee strategy specified above",
      "match": {
       "arguments": [
        {
         "val": "\"account1\"",
         "offset": 36
        },
        {
         "val": "\"account2\"",
         "offset": 50
        }
       ],
       "location": "transactionsSteps.StellarTransactionsSteps.dryRunOfStellarTransactionFromToIsExecutedWithTheFeeStrategySpecifiedAbove(java.lang.String,java.lang.String)"
      },
      "keyword": "When "
     },
     {
      "result": {
       "duration": 226000,
       "status": "passed"
      },
      "line": 62,
      "name": "dry run result is success",
      "match": {
       "location": "transactionsSteps.TransactionsSteps.dryRunResultIsSuccess()"
      },
      "keyword": "Then "
     }
    ],
    "tags": [
     {
      "name": "@transactions-and-accounts"
     },
     {
      "name": "@transactions-and-dry-runs"
     },
     {
      "name": "@candidate"
     },
     {
      "name": "@stellar"
     },
     {
      "name": "@tr_section-stellar-transactions-dry-runs"
     },
     {
      "name": "@milestone-hmz-1.6"
     },
     {
      "name": "@id-stellar-dry-run-specified-rate-success"
     }
    ]
   },
   {
    "line": 9,
    "name": "",
    "description": "",
    "type": "background",
    "keyword": "Background",
    "steps": [
     {
      "result": {
       "duration": 1755000,
       "status": "passed"
      },
      "line": 10,
      "name": "a root domain admin user is logged in",
      "match": {
       "location": "UserSteps.aRootDomainAdminUserIsLoggedIn()"
      },
      "keyword": "Given "
     },
     {
      "result": {
       "duration": 98000,
       "status": "passed"
      },
      "line": 11,
      "name": "the current domain is a root domain",
      "match": {
       "location": "DomainSteps.theCurrentDomainIsARootDomain()"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 388243000,
       "status": "passed"
      },
      "line": 12,
      "name": "the vault is configured",
      "match": {
       "location": "VaultsSteps.theVaultIsConfigured()"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 1045818000,
       "status": "passed"
      },
      "line": 14,
      "name": "pre-conditions for \"stellar-testnet-september-2022\" accounts balances recovery are met",
      "match": {
       "arguments": [
        {
         "val": "\"stellar-testnet-september-2022\"",
         "offset": 19
        }
       ],
       "location": "AccountsSteps.preConditionsForAccountsBalancesRecoveryAreMet(java.lang.String)"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 433674000,
       "status": "passed"
      },
      "line": 15,
      "name": "all recovery transfers are released to accounts",
      "match": {
       "location": "transactionsSteps.TransactionsSteps.allRecoveryQuarantinedTransfersAreReleased()"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 427671000,
       "status": "passed"
      },
      "line": 16,
      "name": "all ongoing quarantined transfers are released to accounts",
      "match": {
       "location": "transactionsSteps.TransactionsSteps.quarantinedTransfersAreReleasedToAccounts()"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 170315000,
       "status": "passed"
      },
      "line": 17,
      "name": "all policies except default are locked",
      "match": {
       "location": "PolicySteps.allPoliciesExceptDefaultAreLocked()"
      },
      "keyword": "And "
     }
    ]
   },
   {
    "start_timestamp": "2023-01-09T16:15:22.605Z",
    "before": [
     {
      "result": {
       "duration": 62000,
       "status": "passed"
      },
      "match": {
       "location": "PolicySteps.before(io.cucumber.java.Scenario)"
      }
     },
     {
      "result": {
       "duration": 1039875000,
       "status": "passed"
      },
      "match": {
       "location": "Hooks.beforeScenario()"
      }
     }
    ],
    "line": 66,
    "name": "Stellar dry run with Priority fee strategy. Success",
    "description": "",
    "id": "stellar-transactions-dry-run;stellar-dry-run-with-priority-fee-strategy.-success",
    "after": [
     {
      "result": {
       "duration": 155000,
       "status": "passed"
      },
      "match": {
       "location": "Hooks.afterScenario()"
      }
     }
    ],
    "type": "scenario",
    "keyword": "Scenario",
    "steps": [
     {
      "result": {
       "duration": 649392000,
       "status": "passed"
      },
      "line": 67,
      "name": "we have two recovered \"stellar-testnet-september-2022\" accounts",
      "match": {
       "arguments": [
        {
         "val": "\"stellar-testnet-september-2022\"",
         "offset": 22
        }
       ],
       "location": "AccountsSteps.weHaveTwoRecoveredAccounts(java.lang.String)"
      },
      "keyword": "Given "
     },
     {
      "result": {
       "duration": 795000,
       "status": "passed"
      },
      "line": 69,
      "name": "the following \"stellar-testnet-september-2022\" fee strategy is used",
      "match": {
       "arguments": [
        {
         "val": "\"stellar-testnet-september-2022\"",
         "offset": 14
        }
       ],
       "location": "transactionsSteps.TransactionsSteps.theFollowingFeeStrategyIsUsed(java.lang.String,io.cucumber.datatable.DataTable)"
      },
      "rows": [
       {
        "cells": [
         "type",
         "Priority"
        ]
       },
       {
        "cells": [
         "priority",
         "High"
        ]
       }
      ],
      "keyword": "And "
     },
     {
      "result": {
       "duration": 92334000,
       "status": "passed"
      },
      "line": 73,
      "name": "the maximumFee value is set sufficient to satisfy the chosen fee strategy for stellar transaction from \"account1\" to \"account2\"",
      "match": {
       "arguments": [
        {
         "val": "\"account1\"",
         "offset": 103
        },
        {
         "val": "\"account2\"",
         "offset": 117
        }
       ],
       "location": "transactionsSteps.StellarTransactionsSteps.theMaximumFeeValueIsSetSufficientToSatisfyTheChosenFeeStrategyForStellarTransactionFromTo(java.lang.String,java.lang.String)"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 111967000,
       "status": "passed"
      },
      "line": 74,
      "name": "dry run of stellar transaction from \"account1\" to \"account2\" is executed with the fee strategy specified above",
      "match": {
       "arguments": [
        {
         "val": "\"account1\"",
         "offset": 36
        },
        {
         "val": "\"account2\"",
         "offset": 50
        }
       ],
       "location": "transactionsSteps.StellarTransactionsSteps.dryRunOfStellarTransactionFromToIsExecutedWithTheFeeStrategySpecifiedAbove(java.lang.String,java.lang.String)"
      },
      "keyword": "When "
     },
     {
      "result": {
       "duration": 296000,
       "status": "passed"
      },
      "line": 76,
      "name": "dry run result is success",
      "match": {
       "location": "transactionsSteps.TransactionsSteps.dryRunResultIsSuccess()"
      },
      "keyword": "Then "
     }
    ],
    "tags": [
     {
      "name": "@transactions-and-accounts"
     },
     {
      "name": "@transactions-and-dry-runs"
     },
     {
      "name": "@candidate"
     },
     {
      "name": "@stellar"
     },
     {
      "name": "@tr_section-stellar-transactions-dry-runs"
     },
     {
      "name": "@milestone-hmz-1.6"
     },
     {
      "name": "@id-stellar-dry-run-priority-success"
     }
    ]
   },
   {
    "line": 9,
    "name": "",
    "description": "",
    "type": "background",
    "keyword": "Background",
    "steps": [
     {
      "result": {
       "duration": 1773000,
       "status": "passed"
      },
      "line": 10,
      "name": "a root domain admin user is logged in",
      "match": {
       "location": "UserSteps.aRootDomainAdminUserIsLoggedIn()"
      },
      "keyword": "Given "
     },
     {
      "result": {
       "duration": 106000,
       "status": "passed"
      },
      "line": 11,
      "name": "the current domain is a root domain",
      "match": {
       "location": "DomainSteps.theCurrentDomainIsARootDomain()"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 428848000,
       "status": "passed"
      },
      "line": 12,
      "name": "the vault is configured",
      "match": {
       "location": "VaultsSteps.theVaultIsConfigured()"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 1046030000,
       "status": "passed"
      },
      "line": 14,
      "name": "pre-conditions for \"stellar-testnet-september-2022\" accounts balances recovery are met",
      "match": {
       "arguments": [
        {
         "val": "\"stellar-testnet-september-2022\"",
         "offset": 19
        }
       ],
       "location": "AccountsSteps.preConditionsForAccountsBalancesRecoveryAreMet(java.lang.String)"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 491433000,
       "status": "passed"
      },
      "line": 15,
      "name": "all recovery transfers are released to accounts",
      "match": {
       "location": "transactionsSteps.TransactionsSteps.allRecoveryQuarantinedTransfersAreReleased()"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 458023000,
       "status": "passed"
      },
      "line": 16,
      "name": "all ongoing quarantined transfers are released to accounts",
      "match": {
       "location": "transactionsSteps.TransactionsSteps.quarantinedTransfersAreReleasedToAccounts()"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 200098000,
       "status": "passed"
      },
      "line": 17,
      "name": "all policies except default are locked",
      "match": {
       "location": "PolicySteps.allPoliciesExceptDefaultAreLocked()"
      },
      "keyword": "And "
     }
    ]
   },
   {
    "start_timestamp": "2023-01-09T16:15:27.017Z",
    "before": [
     {
      "result": {
       "duration": 53000,
       "status": "passed"
      },
      "match": {
       "location": "PolicySteps.before(io.cucumber.java.Scenario)"
      }
     },
     {
      "result": {
       "duration": 1010559000,
       "status": "passed"
      },
      "match": {
       "location": "Hooks.beforeScenario()"
      }
     }
    ],
    "line": 80,
    "name": "Stellar dry run with Priority fee strategy. Send to oneself",
    "description": "",
    "id": "stellar-transactions-dry-run;stellar-dry-run-with-priority-fee-strategy.-send-to-oneself",
    "after": [
     {
      "result": {
       "duration": 131000,
       "status": "passed"
      },
      "match": {
       "location": "Hooks.afterScenario()"
      }
     }
    ],
    "type": "scenario",
    "keyword": "Scenario",
    "steps": [
     {
      "result": {
       "duration": 673509000,
       "status": "passed"
      },
      "line": 81,
      "name": "we have two recovered \"stellar-testnet-september-2022\" accounts",
      "match": {
       "arguments": [
        {
         "val": "\"stellar-testnet-september-2022\"",
         "offset": 22
        }
       ],
       "location": "AccountsSteps.weHaveTwoRecoveredAccounts(java.lang.String)"
      },
      "keyword": "Given "
     },
     {
      "result": {
       "duration": 297000,
       "status": "passed"
      },
      "line": 83,
      "name": "the following \"stellar-testnet-september-2022\" fee strategy is used",
      "match": {
       "arguments": [
        {
         "val": "\"stellar-testnet-september-2022\"",
         "offset": 14
        }
       ],
       "location": "transactionsSteps.TransactionsSteps.theFollowingFeeStrategyIsUsed(java.lang.String,io.cucumber.datatable.DataTable)"
      },
      "rows": [
       {
        "cells": [
         "type",
         "Priority"
        ]
       },
       {
        "cells": [
         "priority",
         "Medium"
        ]
       }
      ],
      "keyword": "And "
     },
     {
      "result": {
       "duration": 139452000,
       "status": "passed"
      },
      "line": 87,
      "name": "the maximumFee value is set sufficient to satisfy the chosen fee strategy for stellar transaction from \"account1\" to \"account1\"",
      "match": {
       "arguments": [
        {
         "val": "\"account1\"",
         "offset": 103
        },
        {
         "val": "\"account1\"",
         "offset": 117
        }
       ],
       "location": "transactionsSteps.StellarTransactionsSteps.theMaximumFeeValueIsSetSufficientToSatisfyTheChosenFeeStrategyForStellarTransactionFromTo(java.lang.String,java.lang.String)"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 110068000,
       "status": "passed"
      },
      "line": 88,
      "name": "dry run of stellar transaction from \"account1\" to \"account1\" is executed with the fee strategy specified above",
      "match": {
       "arguments": [
        {
         "val": "\"account1\"",
         "offset": 36
        },
        {
         "val": "\"account1\"",
         "offset": 50
        }
       ],
       "location": "transactionsSteps.StellarTransactionsSteps.dryRunOfStellarTransactionFromToIsExecutedWithTheFeeStrategySpecifiedAbove(java.lang.String,java.lang.String)"
      },
      "keyword": "When "
     },
     {
      "result": {
       "duration": 145000,
       "status": "passed"
      },
      "line": 90,
      "name": "dry run result is success",
      "match": {
       "location": "transactionsSteps.TransactionsSteps.dryRunResultIsSuccess()"
      },
      "keyword": "Then "
     }
    ],
    "tags": [
     {
      "name": "@transactions-and-accounts"
     },
     {
      "name": "@transactions-and-dry-runs"
     },
     {
      "name": "@candidate"
     },
     {
      "name": "@stellar"
     },
     {
      "name": "@tr_section-stellar-transactions-dry-runs"
     },
     {
      "name": "@milestone-hmz-1.6"
     },
     {
      "name": "@id-stellar-dry-run-send-to-itself"
     }
    ]
   },
   {
    "line": 9,
    "name": "",
    "description": "",
    "type": "background",
    "keyword": "Background",
    "steps": [
     {
      "result": {
       "duration": 710000,
       "status": "passed"
      },
      "line": 10,
      "name": "a root domain admin user is logged in",
      "match": {
       "location": "UserSteps.aRootDomainAdminUserIsLoggedIn()"
      },
      "keyword": "Given "
     },
     {
      "result": {
       "duration": 27000,
       "status": "passed"
      },
      "line": 11,
      "name": "the current domain is a root domain",
      "match": {
       "location": "DomainSteps.theCurrentDomainIsARootDomain()"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 391642000,
       "status": "passed"
      },
      "line": 12,
      "name": "the vault is configured",
      "match": {
       "location": "VaultsSteps.theVaultIsConfigured()"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 1030964000,
       "status": "passed"
      },
      "line": 14,
      "name": "pre-conditions for \"stellar-testnet-september-2022\" accounts balances recovery are met",
      "match": {
       "arguments": [
        {
         "val": "\"stellar-testnet-september-2022\"",
         "offset": 19
        }
       ],
       "location": "AccountsSteps.preConditionsForAccountsBalancesRecoveryAreMet(java.lang.String)"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 1326192000,
       "status": "passed"
      },
      "line": 15,
      "name": "all recovery transfers are released to accounts",
      "match": {
       "location": "transactionsSteps.TransactionsSteps.allRecoveryQuarantinedTransfersAreReleased()"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 397696000,
       "status": "passed"
      },
      "line": 16,
      "name": "all ongoing quarantined transfers are released to accounts",
      "match": {
       "location": "transactionsSteps.TransactionsSteps.quarantinedTransfersAreReleasedToAccounts()"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 167173000,
       "status": "passed"
      },
      "line": 17,
      "name": "all policies except default are locked",
      "match": {
       "location": "PolicySteps.allPoliciesExceptDefaultAreLocked()"
      },
      "keyword": "And "
     }
    ]
   },
   {
    "start_timestamp": "2023-01-09T16:15:31.622Z",
    "before": [
     {
      "result": {
       "duration": 50000,
       "status": "passed"
      },
      "match": {
       "location": "PolicySteps.before(io.cucumber.java.Scenario)"
      }
     },
     {
      "result": {
       "duration": 1106021000,
       "status": "passed"
      },
      "match": {
       "location": "Hooks.beforeScenario()"
      }
     }
    ],
    "line": 96,
    "name": "Stellar dry run with Priority fee strategy. Send zero",
    "description": "",
    "id": "stellar-transactions-dry-run;stellar-dry-run-with-priority-fee-strategy.-send-zero",
    "after": [
     {
      "result": {
       "duration": 188000,
       "status": "passed"
      },
      "match": {
       "location": "Hooks.afterScenario()"
      }
     }
    ],
    "type": "scenario",
    "keyword": "Scenario",
    "steps": [
     {
      "result": {
       "duration": 662310000,
       "status": "passed"
      },
      "line": 97,
      "name": "we have two recovered \"stellar-testnet-september-2022\" accounts",
      "match": {
       "arguments": [
        {
         "val": "\"stellar-testnet-september-2022\"",
         "offset": 22
        }
       ],
       "location": "AccountsSteps.weHaveTwoRecoveredAccounts(java.lang.String)"
      },
      "keyword": "Given "
     },
     {
      "result": {
       "duration": 634000,
       "status": "passed"
      },
      "line": 99,
      "name": "the following \"stellar-testnet-september-2022\" fee strategy is used",
      "match": {
       "arguments": [
        {
         "val": "\"stellar-testnet-september-2022\"",
         "offset": 14
        }
       ],
       "location": "transactionsSteps.TransactionsSteps.theFollowingFeeStrategyIsUsed(java.lang.String,io.cucumber.datatable.DataTable)"
      },
      "rows": [
       {
        "cells": [
         "type",
         "Priority"
        ]
       },
       {
        "cells": [
         "priority",
         "Medium"
        ]
       }
      ],
      "keyword": "And "
     },
     {
      "result": {
       "duration": 96572000,
       "status": "passed"
      },
      "line": 103,
      "name": "the maximumFee value is set sufficient to satisfy the chosen fee strategy for stellar transaction from \"account1\" to \"account2\"",
      "match": {
       "arguments": [
        {
         "val": "\"account1\"",
         "offset": 103
        },
        {
         "val": "\"account2\"",
         "offset": 117
        }
       ],
       "location": "transactionsSteps.StellarTransactionsSteps.theMaximumFeeValueIsSetSufficientToSatisfyTheChosenFeeStrategyForStellarTransactionFromTo(java.lang.String,java.lang.String)"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 267000,
       "status": "passed"
      },
      "line": 104,
      "name": "the amount for transaction is set to \"0\"",
      "match": {
       "arguments": [
        {
         "val": "\"0\"",
         "offset": 37
        }
       ],
       "location": "transactionsSteps.EthereumTransactionsSteps.theAmountForTransactionIsSetTo(java.lang.String)"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 87519000,
       "status": "passed"
      },
      "line": 105,
      "name": "dry run of stellar transaction from \"account1\" to \"account2\" is executed with the fee strategy specified above",
      "match": {
       "arguments": [
        {
         "val": "\"account1\"",
         "offset": 36
        },
        {
         "val": "\"account2\"",
         "offset": 50
        }
       ],
       "location": "transactionsSteps.StellarTransactionsSteps.dryRunOfStellarTransactionFromToIsExecutedWithTheFeeStrategySpecifiedAbove(java.lang.String,java.lang.String)"
      },
      "keyword": "When "
     },
     {
      "result": {
       "duration": 388000,
       "status": "passed"
      },
      "line": 107,
      "name": "dry run result has type \"Failure\" with hint \"InvalidAmount\"",
      "match": {
       "arguments": [
        {
         "val": "\"Failure\"",
         "offset": 24
        },
        {
         "val": "\"InvalidAmount\"",
         "offset": 44
        }
       ],
       "location": "transactionsSteps.TransactionsSteps.dryRunResultIs(java.lang.String,java.lang.String)"
      },
      "keyword": "Then "
     },
     {
      "result": {
       "duration": 111000,
       "status": "passed"
      },
      "line": 108,
      "name": "dry run result contains reason \"Transaction amount should be greater then 0\"",
      "match": {
       "arguments": [
        {
         "val": "\"Transaction amount should be greater then 0\"",
         "offset": 31
        }
       ],
       "location": "transactionsSteps.TransactionsSteps.dryRunResultIs(java.lang.String)"
      },
      "keyword": "And "
     }
    ],
    "tags": [
     {
      "name": "@transactions-and-accounts"
     },
     {
      "name": "@transactions-and-dry-runs"
     },
     {
      "name": "@candidate"
     },
     {
      "name": "@stellar"
     },
     {
      "name": "@tr_section-stellar-transactions-dry-runs"
     },
     {
      "name": "@milestone-hmz-1.6"
     },
     {
      "name": "@id-stellar-dry-run-send-zero"
     }
    ]
   },
   {
    "line": 9,
    "name": "",
    "description": "",
    "type": "background",
    "keyword": "Background",
    "steps": [
     {
      "result": {
       "duration": 2244000,
       "status": "passed"
      },
      "line": 10,
      "name": "a root domain admin user is logged in",
      "match": {
       "location": "UserSteps.aRootDomainAdminUserIsLoggedIn()"
      },
      "keyword": "Given "
     },
     {
      "result": {
       "duration": 73000,
       "status": "passed"
      },
      "line": 11,
      "name": "the current domain is a root domain",
      "match": {
       "location": "DomainSteps.theCurrentDomainIsARootDomain()"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 407545000,
       "status": "passed"
      },
      "line": 12,
      "name": "the vault is configured",
      "match": {
       "location": "VaultsSteps.theVaultIsConfigured()"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 1047516000,
       "status": "passed"
      },
      "line": 14,
      "name": "pre-conditions for \"stellar-testnet-september-2022\" accounts balances recovery are met",
      "match": {
       "arguments": [
        {
         "val": "\"stellar-testnet-september-2022\"",
         "offset": 19
        }
       ],
       "location": "AccountsSteps.preConditionsForAccountsBalancesRecoveryAreMet(java.lang.String)"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 480374000,
       "status": "passed"
      },
      "line": 15,
      "name": "all recovery transfers are released to accounts",
      "match": {
       "location": "transactionsSteps.TransactionsSteps.allRecoveryQuarantinedTransfersAreReleased()"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 452203000,
       "status": "passed"
      },
      "line": 16,
      "name": "all ongoing quarantined transfers are released to accounts",
      "match": {
       "location": "transactionsSteps.TransactionsSteps.quarantinedTransfersAreReleasedToAccounts()"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 170361000,
       "status": "passed"
      },
      "line": 17,
      "name": "all policies except default are locked",
      "match": {
       "location": "PolicySteps.allPoliciesExceptDefaultAreLocked()"
      },
      "keyword": "And "
     }
    ]
   },
   {
    "start_timestamp": "2023-01-09T16:15:36.940Z",
    "before": [
     {
      "result": {
       "duration": 63000,
       "status": "passed"
      },
      "match": {
       "location": "PolicySteps.before(io.cucumber.java.Scenario)"
      }
     },
     {
      "result": {
       "duration": 1173342000,
       "status": "passed"
      },
      "match": {
       "location": "Hooks.beforeScenario()"
      }
     }
    ],
    "line": 171,
    "name": "Stellar dry run with SpecifiedRate fee strategy. Invalid maxFee value",
    "description": "",
    "id": "stellar-transactions-dry-run;stellar-dry-run-with-specifiedrate-fee-strategy.-invalid-maxfee-value",
    "after": [
     {
      "result": {
       "duration": 142000,
       "status": "passed"
      },
      "match": {
       "location": "Hooks.afterScenario()"
      }
     }
    ],
    "type": "scenario",
    "keyword": "Scenario",
    "steps": [
     {
      "result": {
       "duration": 633474000,
       "status": "passed"
      },
      "line": 172,
      "name": "we have two recovered \"stellar-testnet-september-2022\" accounts",
      "match": {
       "arguments": [
        {
         "val": "\"stellar-testnet-september-2022\"",
         "offset": 22
        }
       ],
       "location": "AccountsSteps.weHaveTwoRecoveredAccounts(java.lang.String)"
      },
      "keyword": "Given "
     },
     {
      "result": {
       "duration": 541061000,
       "status": "passed"
      },
      "line": 173,
      "name": "\"account1\" has enough of \"tXLM\" for native transfer",
      "match": {
       "arguments": [
        {
         "val": "\"account1\"",
         "offset": 0
        },
        {
         "val": "\"tXLM\"",
         "offset": 25
        }
       ],
       "location": "AccountsSteps.hasEnoughOfFundsForTransactionToExternalAccountAddress(java.lang.String,java.lang.String)"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 447000,
       "status": "passed"
      },
      "line": 175,
      "name": "the following \"stellar-testnet-september-2022\" fee strategy is used",
      "match": {
       "arguments": [
        {
         "val": "\"stellar-testnet-september-2022\"",
         "offset": 14
        }
       ],
       "location": "transactionsSteps.TransactionsSteps.theFollowingFeeStrategyIsUsed(java.lang.String,io.cucumber.datatable.DataTable)"
      },
      "rows": [
       {
        "cells": [
         "type",
         "Priority"
        ]
       },
       {
        "cells": [
         "priority",
         "Low"
        ]
       }
      ],
      "keyword": "And "
     },
     {
      "result": {
       "duration": 90000,
       "status": "passed"
      },
      "line": 179,
      "name": "the maximumFee value is set to \"0\"",
      "match": {
       "arguments": [
        {
         "val": "\"0\"",
         "offset": 31
        }
       ],
       "location": "transactionsSteps.EthereumTransactionsSteps.theMaximumFeeValueIsSetToForTransactionFromTo(java.lang.String)"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 134703000,
       "status": "passed"
      },
      "line": 180,
      "name": "dry run of stellar transaction from \"account1\" to \"account2\" is executed with the fee strategy specified above",
      "match": {
       "arguments": [
        {
         "val": "\"account1\"",
         "offset": 36
        },
        {
         "val": "\"account2\"",
         "offset": 50
        }
       ],
       "location": "transactionsSteps.StellarTransactionsSteps.dryRunOfStellarTransactionFromToIsExecutedWithTheFeeStrategySpecifiedAbove(java.lang.String,java.lang.String)"
      },
      "keyword": "When "
     },
     {
      "result": {
       "duration": 363000,
       "status": "passed"
      },
      "line": 181,
      "name": "dry run result has type \"Failure\" with hint \"CurrentlyFeesTooLarge\"",
      "match": {
       "arguments": [
        {
         "val": "\"Failure\"",
         "offset": 24
        },
        {
         "val": "\"CurrentlyFeesTooLarge\"",
         "offset": 44
        }
       ],
       "location": "transactionsSteps.TransactionsSteps.dryRunResultIs(java.lang.String,java.lang.String)"
      },
      "keyword": "Then "
     },
     {
      "result": {
       "duration": 161000,
       "status": "passed"
      },
      "line": 182,
      "name": "dry run result contains reason \"Currently proposed fee exceeds maximum fee\"",
      "match": {
       "arguments": [
        {
         "val": "\"Currently proposed fee exceeds maximum fee\"",
         "offset": 31
        }
       ],
       "location": "transactionsSteps.TransactionsSteps.dryRunResultIs(java.lang.String)"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 78000,
       "status": "passed"
      },
      "line": 184,
      "name": "the maximumFee value is set to \"-1\"",
      "match": {
       "arguments": [
        {
         "val": "\"-1\"",
         "offset": 31
        }
       ],
       "location": "transactionsSteps.EthereumTransactionsSteps.theMaximumFeeValueIsSetToForTransactionFromTo(java.lang.String)"
      },
      "keyword": "Given "
     },
     {
      "result": {
       "duration": 48529000,
       "status": "passed"
      },
      "line": 185,
      "name": "dry run of stellar transaction from \"account1\" to \"account2\" is executed with the fee strategy specified above",
      "match": {
       "arguments": [
        {
         "val": "\"account1\"",
         "offset": 36
        },
        {
         "val": "\"account2\"",
         "offset": 50
        }
       ],
       "location": "transactionsSteps.StellarTransactionsSteps.dryRunOfStellarTransactionFromToIsExecutedWithTheFeeStrategySpecifiedAbove(java.lang.String,java.lang.String)"
      },
      "keyword": "When "
     },
     {
      "result": {
       "duration": 342000,
       "status": "passed"
      },
      "line": 186,
      "name": "400 error with \"Amount must be greater than or equal to zero at \u0027parameters.maximumFee\" is returned on dry run request submission",
      "match": {
       "arguments": [
        {
         "val": "400",
         "offset": 0
        },
        {
         "val": "\"Amount must be greater than or equal to zero at \u0027parameters.maximumFee\"",
         "offset": 15
        }
       ],
       "location": "IntentSteps.anErrorWithIsReturnedOnDryRun(int,java.lang.String)"
      },
      "keyword": "Then "
     }
    ],
    "tags": [
     {
      "name": "@transactions-and-accounts"
     },
     {
      "name": "@transactions-and-dry-runs"
     },
     {
      "name": "@candidate"
     },
     {
      "name": "@stellar"
     },
     {
      "name": "@tr_section-stellar-transactions-dry-runs"
     },
     {
      "name": "@milestone-hmz-1.6"
     },
     {
      "name": "@id-stellar-dry-run-specified-rate-invalid-max-fee"
     }
    ]
   },
   {
    "line": 9,
    "name": "",
    "description": "",
    "type": "background",
    "keyword": "Background",
    "steps": [
     {
      "result": {
       "duration": 733000,
       "status": "passed"
      },
      "line": 10,
      "name": "a root domain admin user is logged in",
      "match": {
       "location": "UserSteps.aRootDomainAdminUserIsLoggedIn()"
      },
      "keyword": "Given "
     },
     {
      "result": {
       "duration": 52000,
       "status": "passed"
      },
      "line": 11,
      "name": "the current domain is a root domain",
      "match": {
       "location": "DomainSteps.theCurrentDomainIsARootDomain()"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 422109000,
       "status": "passed"
      },
      "line": 12,
      "name": "the vault is configured",
      "match": {
       "location": "VaultsSteps.theVaultIsConfigured()"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 1006234000,
       "status": "passed"
      },
      "line": 14,
      "name": "pre-conditions for \"stellar-testnet-september-2022\" accounts balances recovery are met",
      "match": {
       "arguments": [
        {
         "val": "\"stellar-testnet-september-2022\"",
         "offset": 19
        }
       ],
       "location": "AccountsSteps.preConditionsForAccountsBalancesRecoveryAreMet(java.lang.String)"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 459663000,
       "status": "passed"
      },
      "line": 15,
      "name": "all recovery transfers are released to accounts",
      "match": {
       "location": "transactionsSteps.TransactionsSteps.allRecoveryQuarantinedTransfersAreReleased()"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 423590000,
       "status": "passed"
      },
      "line": 16,
      "name": "all ongoing quarantined transfers are released to accounts",
      "match": {
       "location": "transactionsSteps.TransactionsSteps.quarantinedTransfersAreReleasedToAccounts()"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 162914000,
       "status": "passed"
      },
      "line": 17,
      "name": "all policies except default are locked",
      "match": {
       "location": "PolicySteps.allPoliciesExceptDefaultAreLocked()"
      },
      "keyword": "And "
     }
    ]
   },
   {
    "start_timestamp": "2023-01-09T16:15:42.084Z",
    "before": [
     {
      "result": {
       "duration": 67000,
       "status": "passed"
      },
      "match": {
       "location": "PolicySteps.before(io.cucumber.java.Scenario)"
      }
     },
     {
      "result": {
       "duration": 1021932000,
       "status": "passed"
      },
      "match": {
       "location": "Hooks.beforeScenario()"
      }
     }
    ],
    "line": 193,
    "name": "Stellar dry run with SpecifiedRate fee strategy. Text memo length greater then 28",
    "description": "",
    "id": "stellar-transactions-dry-run;stellar-dry-run-with-specifiedrate-fee-strategy.-text-memo-length-greater-then-28",
    "after": [
     {
      "result": {
       "duration": 36000,
       "status": "passed"
      },
      "match": {
       "location": "Hooks.afterScenario()"
      }
     }
    ],
    "type": "scenario",
    "keyword": "Scenario",
    "steps": [
     {
      "result": {
       "duration": 635387000,
       "status": "passed"
      },
      "line": 194,
      "name": "we have two recovered \"stellar-testnet-september-2022\" accounts",
      "match": {
       "arguments": [
        {
         "val": "\"stellar-testnet-september-2022\"",
         "offset": 22
        }
       ],
       "location": "AccountsSteps.weHaveTwoRecoveredAccounts(java.lang.String)"
      },
      "keyword": "Given "
     },
     {
      "result": {
       "duration": 153000,
       "status": "passed"
      },
      "line": 196,
      "name": "the following \"stellar-testnet-september-2022\" fee strategy is used",
      "match": {
       "arguments": [
        {
         "val": "\"stellar-testnet-september-2022\"",
         "offset": 14
        }
       ],
       "location": "transactionsSteps.TransactionsSteps.theFollowingFeeStrategyIsUsed(java.lang.String,io.cucumber.datatable.DataTable)"
      },
      "rows": [
       {
        "cells": [
         "type",
         "Priority"
        ]
       },
       {
        "cells": [
         "priority",
         "Low"
        ]
       }
      ],
      "keyword": "And "
     },
     {
      "result": {
       "duration": 84544000,
       "status": "passed"
      },
      "line": 200,
      "name": "the maximumFee value is set sufficient to satisfy the chosen fee strategy for stellar transaction from \"account1\" to \"account2\"",
      "match": {
       "arguments": [
        {
         "val": "\"account1\"",
         "offset": 103
        },
        {
         "val": "\"account2\"",
         "offset": 117
        }
       ],
       "location": "transactionsSteps.StellarTransactionsSteps.theMaximumFeeValueIsSetSufficientToSatisfyTheChosenFeeStrategyForStellarTransactionFromTo(java.lang.String,java.lang.String)"
      },
      "keyword": "When "
     },
     {
      "result": {
       "duration": 425000,
       "status": "passed"
      },
      "line": 201,
      "name": "stellar \"Text\" memo with value \"38262b54aeebbfdea2542babb4f93\" is used",
      "match": {
       "arguments": [
        {
         "val": "\"Text\"",
         "offset": 8
        },
        {
         "val": "\"38262b54aeebbfdea2542babb4f93\"",
         "offset": 31
        }
       ],
       "location": "transactionsSteps.StellarTransactionsSteps.stellarMemoWithValueIsUsed(java.lang.String,java.lang.String)"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 61346000,
       "status": "passed"
      },
      "line": 202,
      "name": "dry run of stellar transaction from \"account1\" to \"account2\" is executed with the fee strategy specified above",
      "match": {
       "arguments": [
        {
         "val": "\"account1\"",
         "offset": 36
        },
        {
         "val": "\"account2\"",
         "offset": 50
        }
       ],
       "location": "transactionsSteps.StellarTransactionsSteps.dryRunOfStellarTransactionFromToIsExecutedWithTheFeeStrategySpecifiedAbove(java.lang.String,java.lang.String)"
      },
      "keyword": "When "
     },
     {
      "result": {
       "duration": 78000,
       "status": "passed"
      },
      "line": 203,
      "name": "400 error with \"Stellar Text Memo is 29 length which is larger than the maximum of 28 at \u0027parameters.memo.value\u0027\" is returned on dry run request submission",
      "match": {
       "arguments": [
        {
         "val": "400",
         "offset": 0
        },
        {
         "val": "\"Stellar Text Memo is 29 length which is larger than the maximum of 28 at \u0027parameters.memo.value\u0027\"",
         "offset": 15
        }
       ],
       "location": "IntentSteps.anErrorWithIsReturnedOnDryRun(int,java.lang.String)"
      },
      "keyword": "Then "
     }
    ],
    "tags": [
     {
      "name": "@transactions-and-accounts"
     },
     {
      "name": "@transactions-and-dry-runs"
     },
     {
      "name": "@candidate"
     },
     {
      "name": "@stellar"
     },
     {
      "name": "@tr_section-stellar-transactions-dry-runs"
     },
     {
      "name": "@candidate"
     },
     {
      "name": "@milestone-hmz-1.6"
     },
     {
      "name": "@id-stellar-dry-run-priority-text-memo-length"
     }
    ]
   },
   {
    "line": 9,
    "name": "",
    "description": "",
    "type": "background",
    "keyword": "Background",
    "steps": [
     {
      "result": {
       "duration": 687000,
       "status": "passed"
      },
      "line": 10,
      "name": "a root domain admin user is logged in",
      "match": {
       "location": "UserSteps.aRootDomainAdminUserIsLoggedIn()"
      },
      "keyword": "Given "
     },
     {
      "result": {
       "duration": 29000,
       "status": "passed"
      },
      "line": 11,
      "name": "the current domain is a root domain",
      "match": {
       "location": "DomainSteps.theCurrentDomainIsARootDomain()"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 355699000,
       "status": "passed"
      },
      "line": 12,
      "name": "the vault is configured",
      "match": {
       "location": "VaultsSteps.theVaultIsConfigured()"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 1021500000,
       "status": "passed"
      },
      "line": 14,
      "name": "pre-conditions for \"stellar-testnet-september-2022\" accounts balances recovery are met",
      "match": {
       "arguments": [
        {
         "val": "\"stellar-testnet-september-2022\"",
         "offset": 19
        }
       ],
       "location": "AccountsSteps.preConditionsForAccountsBalancesRecoveryAreMet(java.lang.String)"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 429887000,
       "status": "passed"
      },
      "line": 15,
      "name": "all recovery transfers are released to accounts",
      "match": {
       "location": "transactionsSteps.TransactionsSteps.allRecoveryQuarantinedTransfersAreReleased()"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 524185000,
       "status": "passed"
      },
      "line": 16,
      "name": "all ongoing quarantined transfers are released to accounts",
      "match": {
       "location": "transactionsSteps.TransactionsSteps.quarantinedTransfersAreReleasedToAccounts()"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 1137455000,
       "status": "passed"
      },
      "line": 17,
      "name": "all policies except default are locked",
      "match": {
       "location": "PolicySteps.allPoliciesExceptDefaultAreLocked()"
      },
      "keyword": "And "
     }
    ]
   },
   {
    "start_timestamp": "2023-01-09T16:15:46.392Z",
    "before": [
     {
      "result": {
       "duration": 40000,
       "status": "passed"
      },
      "match": {
       "location": "PolicySteps.before(io.cucumber.java.Scenario)"
      }
     },
     {
      "result": {
       "duration": 959231000,
       "status": "passed"
      },
      "match": {
       "location": "Hooks.beforeScenario()"
      }
     }
    ],
    "line": 208,
    "name": "Stellar dry run with SpecifiedRate fee strategy. Return memo length greater then 64",
    "description": "",
    "id": "stellar-transactions-dry-run;stellar-dry-run-with-specifiedrate-fee-strategy.-return-memo-length-greater-then-64",
    "after": [
     {
      "result": {
       "duration": 44000,
       "status": "passed"
      },
      "match": {
       "location": "Hooks.afterScenario()"
      }
     }
    ],
    "type": "scenario",
    "keyword": "Scenario",
    "steps": [
     {
      "result": {
       "duration": 782206000,
       "status": "passed"
      },
      "line": 209,
      "name": "we have two recovered \"stellar-testnet-september-2022\" accounts",
      "match": {
       "arguments": [
        {
         "val": "\"stellar-testnet-september-2022\"",
         "offset": 22
        }
       ],
       "location": "AccountsSteps.weHaveTwoRecoveredAccounts(java.lang.String)"
      },
      "keyword": "Given "
     },
     {
      "result": {
       "duration": 172000,
       "status": "passed"
      },
      "line": 211,
      "name": "the following \"stellar-testnet-september-2022\" fee strategy is used",
      "match": {
       "arguments": [
        {
         "val": "\"stellar-testnet-september-2022\"",
         "offset": 14
        }
       ],
       "location": "transactionsSteps.TransactionsSteps.theFollowingFeeStrategyIsUsed(java.lang.String,io.cucumber.datatable.DataTable)"
      },
      "rows": [
       {
        "cells": [
         "type",
         "Priority"
        ]
       },
       {
        "cells": [
         "priority",
         "Low"
        ]
       }
      ],
      "keyword": "And "
     },
     {
      "result": {
       "duration": 664809000,
       "status": "passed"
      },
      "line": 215,
      "name": "the maximumFee value is set sufficient to satisfy the chosen fee strategy for stellar transaction from \"account1\" to \"account2\"",
      "match": {
       "arguments": [
        {
         "val": "\"account1\"",
         "offset": 103
        },
        {
         "val": "\"account2\"",
         "offset": 117
        }
       ],
       "location": "transactionsSteps.StellarTransactionsSteps.theMaximumFeeValueIsSetSufficientToSatisfyTheChosenFeeStrategyForStellarTransactionFromTo(java.lang.String,java.lang.String)"
      },
      "keyword": "When "
     },
     {
      "result": {
       "duration": 156000,
       "status": "passed"
      },
      "line": 216,
      "name": "stellar \"Return\" memo with value \"38262b54aeebbfdea2542babb4f9389617ce1388d18bb825f9d55496c7b973b3111\" is used",
      "match": {
       "arguments": [
        {
         "val": "\"Return\"",
         "offset": 8
        },
        {
         "val": "\"38262b54aeebbfdea2542babb4f9389617ce1388d18bb825f9d55496c7b973b3111\"",
         "offset": 33
        }
       ],
       "location": "transactionsSteps.StellarTransactionsSteps.stellarMemoWithValueIsUsed(java.lang.String,java.lang.String)"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 60270000,
       "status": "passed"
      },
      "line": 217,
      "name": "dry run of stellar transaction from \"account1\" to \"account2\" is executed with the fee strategy specified above",
      "match": {
       "arguments": [
        {
         "val": "\"account1\"",
         "offset": 36
        },
        {
         "val": "\"account2\"",
         "offset": 50
        }
       ],
       "location": "transactionsSteps.StellarTransactionsSteps.dryRunOfStellarTransactionFromToIsExecutedWithTheFeeStrategySpecifiedAbove(java.lang.String,java.lang.String)"
      },
      "keyword": "When "
     },
     {
      "result": {
       "duration": 99000,
       "status": "passed"
      },
      "line": 218,
      "name": "400 error with \"Hex encoded string should contains exactly 64 characters at \u0027parameters.memo.value\u0027\" is returned on dry run request submission",
      "match": {
       "arguments": [
        {
         "val": "400",
         "offset": 0
        },
        {
         "val": "\"Hex encoded string should contains exactly 64 characters at \u0027parameters.memo.value\u0027\"",
         "offset": 15
        }
       ],
       "location": "IntentSteps.anErrorWithIsReturnedOnDryRun(int,java.lang.String)"
      },
      "keyword": "Then "
     }
    ],
    "tags": [
     {
      "name": "@transactions-and-accounts"
     },
     {
      "name": "@transactions-and-dry-runs"
     },
     {
      "name": "@candidate"
     },
     {
      "name": "@stellar"
     },
     {
      "name": "@tr_section-stellar-transactions-dry-runs"
     },
     {
      "name": "@candidate"
     },
     {
      "name": "@milestone-hmz-1.6"
     },
     {
      "name": "@id-stellar-dry-run-priority-return-memo-length"
     }
    ]
   },
   {
    "line": 9,
    "name": "",
    "description": "",
    "type": "background",
    "keyword": "Background",
    "steps": [
     {
      "result": {
       "duration": 667000,
       "status": "passed"
      },
      "line": 10,
      "name": "a root domain admin user is logged in",
      "match": {
       "location": "UserSteps.aRootDomainAdminUserIsLoggedIn()"
      },
      "keyword": "Given "
     },
     {
      "result": {
       "duration": 24000,
       "status": "passed"
      },
      "line": 11,
      "name": "the current domain is a root domain",
      "match": {
       "location": "DomainSteps.theCurrentDomainIsARootDomain()"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 375716000,
       "status": "passed"
      },
      "line": 12,
      "name": "the vault is configured",
      "match": {
       "location": "VaultsSteps.theVaultIsConfigured()"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 1006564000,
       "status": "passed"
      },
      "line": 14,
      "name": "pre-conditions for \"stellar-testnet-september-2022\" accounts balances recovery are met",
      "match": {
       "arguments": [
        {
         "val": "\"stellar-testnet-september-2022\"",
         "offset": 19
        }
       ],
       "location": "AccountsSteps.preConditionsForAccountsBalancesRecoveryAreMet(java.lang.String)"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 458066000,
       "status": "passed"
      },
      "line": 15,
      "name": "all recovery transfers are released to accounts",
      "match": {
       "location": "transactionsSteps.TransactionsSteps.allRecoveryQuarantinedTransfersAreReleased()"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 445073000,
       "status": "passed"
      },
      "line": 16,
      "name": "all ongoing quarantined transfers are released to accounts",
      "match": {
       "location": "transactionsSteps.TransactionsSteps.quarantinedTransfersAreReleasedToAccounts()"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 160007000,
       "status": "passed"
      },
      "line": 17,
      "name": "all policies except default are locked",
      "match": {
       "location": "PolicySteps.allPoliciesExceptDefaultAreLocked()"
      },
      "keyword": "And "
     }
    ]
   },
   {
    "start_timestamp": "2023-01-09T16:15:52.354Z",
    "before": [
     {
      "result": {
       "duration": 35000,
       "status": "passed"
      },
      "match": {
       "location": "PolicySteps.before(io.cucumber.java.Scenario)"
      }
     },
     {
      "result": {
       "duration": 1024546000,
       "status": "passed"
      },
      "match": {
       "location": "Hooks.beforeScenario()"
      }
     }
    ],
    "line": 223,
    "name": "Stellar dry run with SpecifiedRate fee strategy. Hash memo length greater then 64",
    "description": "",
    "id": "stellar-transactions-dry-run;stellar-dry-run-with-specifiedrate-fee-strategy.-hash-memo-length-greater-then-64",
    "after": [
     {
      "result": {
       "duration": 86000,
       "status": "passed"
      },
      "match": {
       "location": "Hooks.afterScenario()"
      }
     }
    ],
    "type": "scenario",
    "keyword": "Scenario",
    "steps": [
     {
      "result": {
       "duration": 646136000,
       "status": "passed"
      },
      "line": 224,
      "name": "we have two recovered \"stellar-testnet-september-2022\" accounts",
      "match": {
       "arguments": [
        {
         "val": "\"stellar-testnet-september-2022\"",
         "offset": 22
        }
       ],
       "location": "AccountsSteps.weHaveTwoRecoveredAccounts(java.lang.String)"
      },
      "keyword": "Given "
     },
     {
      "result": {
       "duration": 555000,
       "status": "passed"
      },
      "line": 226,
      "name": "the following \"stellar-testnet-september-2022\" fee strategy is used",
      "match": {
       "arguments": [
        {
         "val": "\"stellar-testnet-september-2022\"",
         "offset": 14
        }
       ],
       "location": "transactionsSteps.TransactionsSteps.theFollowingFeeStrategyIsUsed(java.lang.String,io.cucumber.datatable.DataTable)"
      },
      "rows": [
       {
        "cells": [
         "type",
         "Priority"
        ]
       },
       {
        "cells": [
         "priority",
         "Low"
        ]
       }
      ],
      "keyword": "And "
     },
     {
      "result": {
       "duration": 102296000,
       "status": "passed"
      },
      "line": 230,
      "name": "the maximumFee value is set sufficient to satisfy the chosen fee strategy for stellar transaction from \"account1\" to \"account2\"",
      "match": {
       "arguments": [
        {
         "val": "\"account1\"",
         "offset": 103
        },
        {
         "val": "\"account2\"",
         "offset": 117
        }
       ],
       "location": "transactionsSteps.StellarTransactionsSteps.theMaximumFeeValueIsSetSufficientToSatisfyTheChosenFeeStrategyForStellarTransactionFromTo(java.lang.String,java.lang.String)"
      },
      "keyword": "When "
     },
     {
      "result": {
       "duration": 359000,
       "status": "passed"
      },
      "line": 231,
      "name": "stellar \"Hash\" memo with value \"38262b54aeebbfdea2542babb4f9389617ce1388d18bb825f9d55496c7b973b3111\" is used",
      "match": {
       "arguments": [
        {
         "val": "\"Hash\"",
         "offset": 8
        },
        {
         "val": "\"38262b54aeebbfdea2542babb4f9389617ce1388d18bb825f9d55496c7b973b3111\"",
         "offset": 31
        }
       ],
       "location": "transactionsSteps.StellarTransactionsSteps.stellarMemoWithValueIsUsed(java.lang.String,java.lang.String)"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 55219000,
       "status": "passed"
      },
      "line": 232,
      "name": "dry run of stellar transaction from \"account1\" to \"account2\" is executed with the fee strategy specified above",
      "match": {
       "arguments": [
        {
         "val": "\"account1\"",
         "offset": 36
        },
        {
         "val": "\"account2\"",
         "offset": 50
        }
       ],
       "location": "transactionsSteps.StellarTransactionsSteps.dryRunOfStellarTransactionFromToIsExecutedWithTheFeeStrategySpecifiedAbove(java.lang.String,java.lang.String)"
      },
      "keyword": "When "
     },
     {
      "result": {
       "duration": 200000,
       "status": "passed"
      },
      "line": 233,
      "name": "400 error with \"Hex encoded string should contains exactly 64 characters at \u0027parameters.memo.value\u0027\" is returned on dry run request submission",
      "match": {
       "arguments": [
        {
         "val": "400",
         "offset": 0
        },
        {
         "val": "\"Hex encoded string should contains exactly 64 characters at \u0027parameters.memo.value\u0027\"",
         "offset": 15
        }
       ],
       "location": "IntentSteps.anErrorWithIsReturnedOnDryRun(int,java.lang.String)"
      },
      "keyword": "Then "
     }
    ],
    "tags": [
     {
      "name": "@transactions-and-accounts"
     },
     {
      "name": "@transactions-and-dry-runs"
     },
     {
      "name": "@candidate"
     },
     {
      "name": "@stellar"
     },
     {
      "name": "@tr_section-stellar-transactions-dry-runs"
     },
     {
      "name": "@candidate"
     },
     {
      "name": "@milestone-hmz-1.6"
     },
     {
      "name": "@id-stellar-dry-run-priority-hash-memo-length"
     }
    ]
   },
   {
    "line": 9,
    "name": "",
    "description": "",
    "type": "background",
    "keyword": "Background",
    "steps": [
     {
      "result": {
       "duration": 2345000,
       "status": "passed"
      },
      "line": 10,
      "name": "a root domain admin user is logged in",
      "match": {
       "location": "UserSteps.aRootDomainAdminUserIsLoggedIn()"
      },
      "keyword": "Given "
     },
     {
      "result": {
       "duration": 89000,
       "status": "passed"
      },
      "line": 11,
      "name": "the current domain is a root domain",
      "match": {
       "location": "DomainSteps.theCurrentDomainIsARootDomain()"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 416546000,
       "status": "passed"
      },
      "line": 12,
      "name": "the vault is configured",
      "match": {
       "location": "VaultsSteps.theVaultIsConfigured()"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 1024644000,
       "status": "passed"
      },
      "line": 14,
      "name": "pre-conditions for \"stellar-testnet-september-2022\" accounts balances recovery are met",
      "match": {
       "arguments": [
        {
         "val": "\"stellar-testnet-september-2022\"",
         "offset": 19
        }
       ],
       "location": "AccountsSteps.preConditionsForAccountsBalancesRecoveryAreMet(java.lang.String)"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 464889000,
       "status": "passed"
      },
      "line": 15,
      "name": "all recovery transfers are released to accounts",
      "match": {
       "location": "transactionsSteps.TransactionsSteps.allRecoveryQuarantinedTransfersAreReleased()"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 482085000,
       "status": "passed"
      },
      "line": 16,
      "name": "all ongoing quarantined transfers are released to accounts",
      "match": {
       "location": "transactionsSteps.TransactionsSteps.quarantinedTransfersAreReleasedToAccounts()"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 206123000,
       "status": "passed"
      },
      "line": 17,
      "name": "all policies except default are locked",
      "match": {
       "location": "PolicySteps.allPoliciesExceptDefaultAreLocked()"
      },
      "keyword": "And "
     }
    ]
   },
   {
    "start_timestamp": "2023-01-09T16:15:56.676Z",
    "before": [
     {
      "result": {
       "duration": 46000,
       "status": "passed"
      },
      "match": {
       "location": "PolicySteps.before(io.cucumber.java.Scenario)"
      }
     },
     {
      "result": {
       "duration": 979521000,
       "status": "passed"
      },
      "match": {
       "location": "Hooks.beforeScenario()"
      }
     }
    ],
    "line": 238,
    "name": "Stellar dry run with SpecifiedRate fee strategy. Id memo greater then 64 bit unsigned integer",
    "description": "",
    "id": "stellar-transactions-dry-run;stellar-dry-run-with-specifiedrate-fee-strategy.-id-memo-greater-then-64-bit-unsigned-integer",
    "after": [
     {
      "result": {
       "duration": 99000,
       "status": "passed"
      },
      "match": {
       "location": "Hooks.afterScenario()"
      }
     }
    ],
    "type": "scenario",
    "keyword": "Scenario",
    "steps": [
     {
      "result": {
       "duration": 704074000,
       "status": "passed"
      },
      "line": 239,
      "name": "we have two recovered \"stellar-testnet-september-2022\" accounts",
      "match": {
       "arguments": [
        {
         "val": "\"stellar-testnet-september-2022\"",
         "offset": 22
        }
       ],
       "location": "AccountsSteps.weHaveTwoRecoveredAccounts(java.lang.String)"
      },
      "keyword": "Given "
     },
     {
      "result": {
       "duration": 161000,
       "status": "passed"
      },
      "line": 241,
      "name": "the following \"stellar-testnet-september-2022\" fee strategy is used",
      "match": {
       "arguments": [
        {
         "val": "\"stellar-testnet-september-2022\"",
         "offset": 14
        }
       ],
       "location": "transactionsSteps.TransactionsSteps.theFollowingFeeStrategyIsUsed(java.lang.String,io.cucumber.datatable.DataTable)"
      },
      "rows": [
       {
        "cells": [
         "type",
         "Priority"
        ]
       },
       {
        "cells": [
         "priority",
         "Low"
        ]
       }
      ],
      "keyword": "And "
     },
     {
      "result": {
       "duration": 88896000,
       "status": "passed"
      },
      "line": 245,
      "name": "the maximumFee value is set sufficient to satisfy the chosen fee strategy for stellar transaction from \"account1\" to \"account2\"",
      "match": {
       "arguments": [
        {
         "val": "\"account1\"",
         "offset": 103
        },
        {
         "val": "\"account2\"",
         "offset": 117
        }
       ],
       "location": "transactionsSteps.StellarTransactionsSteps.theMaximumFeeValueIsSetSufficientToSatisfyTheChosenFeeStrategyForStellarTransactionFromTo(java.lang.String,java.lang.String)"
      },
      "keyword": "When "
     },
     {
      "result": {
       "duration": 174000,
       "status": "passed"
      },
      "line": 246,
      "name": "stellar \"Id\" memo with value \"18446744073709551616\" is used",
      "match": {
       "arguments": [
        {
         "val": "\"Id\"",
         "offset": 8
        },
        {
         "val": "\"18446744073709551616\"",
         "offset": 29
        }
       ],
       "location": "transactionsSteps.StellarTransactionsSteps.stellarMemoWithValueIsUsed(java.lang.String,java.lang.String)"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 48981000,
       "status": "passed"
      },
      "line": 247,
      "name": "dry run of stellar transaction from \"account1\" to \"account2\" is executed with the fee strategy specified above",
      "match": {
       "arguments": [
        {
         "val": "\"account1\"",
         "offset": 36
        },
        {
         "val": "\"account2\"",
         "offset": 50
        }
       ],
       "location": "transactionsSteps.StellarTransactionsSteps.dryRunOfStellarTransactionFromToIsExecutedWithTheFeeStrategySpecifiedAbove(java.lang.String,java.lang.String)"
      },
      "keyword": "When "
     },
     {
      "result": {
       "duration": 160000,
       "status": "passed"
      },
      "line": 248,
      "name": "400 error with \"Value out of bounds for UInt64\" is returned on dry run request submission",
      "match": {
       "arguments": [
        {
         "val": "400",
         "offset": 0
        },
        {
         "val": "\"Value out of bounds for UInt64\"",
         "offset": 15
        }
       ],
       "location": "IntentSteps.anErrorWithIsReturnedOnDryRun(int,java.lang.String)"
      },
      "keyword": "Then "
     }
    ],
    "tags": [
     {
      "name": "@transactions-and-accounts"
     },
     {
      "name": "@transactions-and-dry-runs"
     },
     {
      "name": "@candidate"
     },
     {
      "name": "@stellar"
     },
     {
      "name": "@tr_section-stellar-transactions-dry-runs"
     },
     {
      "name": "@candidate"
     },
     {
      "name": "@milestone-hmz-1.6"
     },
     {
      "name": "@id-stellar-dry-run-priority-id-memo-out-of-boundary"
     }
    ]
   }
  ],
  "name": "Stellar transactions dry run",
  "description": "",
  "id": "stellar-transactions-dry-run",
  "keyword": "Feature",
  "uri": "file:src/test/resources/features/transactions_and_accounts/StellarDryRuns.feature",
  "tags": [
   {
    "name": "@transactions-and-accounts",
    "type": "Tag",
    "location": {
     "line": 1,
     "column": 1
    }
   },
   {
    "name": "@transactions-and-dry-runs",
    "type": "Tag",
    "location": {
     "line": 2,
     "column": 1
    }
   },
   {
    "name": "@candidate",
    "type": "Tag",
    "location": {
     "line": 3,
     "column": 1
    }
   },
   {
    "name": "@stellar",
    "type": "Tag",
    "location": {
     "line": 4,
     "column": 1
    }
   },
   {
    "name": "@tr_section-stellar-transactions-dry-runs",
    "type": "Tag",
    "location": {
     "line": 5,
     "column": 1
    }
   }
  ]
 },
 {
  "line": 6,
  "elements": [
   {
    "line": 8,
    "name": "",
    "description": "",
    "type": "background",
    "keyword": "Background",
    "steps": [
     {
      "result": {
       "duration": 1251000,
       "status": "passed"
      },
      "line": 9,
      "name": "a root domain admin user is logged in",
      "match": {
       "location": "UserSteps.aRootDomainAdminUserIsLoggedIn()"
      },
      "keyword": "Given "
     },
     {
      "result": {
       "duration": 65000,
       "status": "passed"
      },
      "line": 10,
      "name": "the current domain is a root domain",
      "match": {
       "location": "DomainSteps.theCurrentDomainIsARootDomain()"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 366458000,
       "status": "passed"
      },
      "line": 11,
      "name": "the vault is configured",
      "match": {
       "location": "VaultsSteps.theVaultIsConfigured()"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 1021240000,
       "status": "passed"
      },
      "line": 13,
      "name": "pre-conditions for \"stellar-testnet-september-2022\" accounts balances recovery are met",
      "match": {
       "arguments": [
        {
         "val": "\"stellar-testnet-september-2022\"",
         "offset": 19
        }
       ],
       "location": "AccountsSteps.preConditionsForAccountsBalancesRecoveryAreMet(java.lang.String)"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 420271000,
       "status": "passed"
      },
      "line": 14,
      "name": "all recovery transfers are released to accounts",
      "match": {
       "location": "transactionsSteps.TransactionsSteps.allRecoveryQuarantinedTransfersAreReleased()"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 165577000,
       "status": "passed"
      },
      "line": 15,
      "name": "all policies except default are locked",
      "match": {
       "location": "PolicySteps.allPoliciesExceptDefaultAreLocked()"
      },
      "keyword": "And "
     }
    ]
   },
   {
    "start_timestamp": "2023-01-09T16:16:01.140Z",
    "before": [
     {
      "result": {
       "duration": 57000,
       "status": "passed"
      },
      "match": {
       "location": "PolicySteps.before(io.cucumber.java.Scenario)"
      }
     },
     {
      "result": {
       "duration": 1042617000,
       "status": "passed"
      },
      "match": {
       "location": "Hooks.beforeScenario()"
      }
     }
    ],
    "line": 20,
    "name": "Stellar report demo transaction test 1",
    "description": "",
    "id": "demo1-stellar-transactions;stellar-tx-to-account-with-specifiedrate-fee-strategy.-success",
    "after": [
     {
      "result": {
       "duration": 331000,
       "status": "passed"
      },
      "match": {
       "location": "Hooks.afterScenario()"
      }
     }
    ],
    "type": "scenario",
    "keyword": "Scenario",
    "steps": [
     {
      "result": {
       "duration": 640589000,
       "status": "passed"
      },
      "line": 21,
      "name": "we have two recovered \"stellar-testnet-september-2022\" accounts",
      "match": {
       "arguments": [
        {
         "val": "\"stellar-testnet-september-2022\"",
         "offset": 22
        }
       ],
       "location": "AccountsSteps.weHaveTwoRecoveredAccounts(java.lang.String)"
      },
      "keyword": "Given "
     },
     {
      "result": {
       "duration": 982295000,
       "status": "passed"
      },
      "line": 23,
      "name": "\"account1\" and \"account2\" have enough of \"tXLM\" on the balance for native transfer with funds return",
      "match": {
       "arguments": [
        {
         "val": "\"account1\"",
         "offset": 0
        },
        {
         "val": "\"account2\"",
         "offset": 15
        },
        {
         "val": "\"tXLM\"",
         "offset": 41
        }
       ],
       "location": "AccountsSteps.andHaveEnoughOfForTransactionWithFundsReturn(java.lang.String,java.lang.String,java.lang.String)"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 83532000,
       "status": "passed"
      },
      "line": 25,
      "name": "the following \"stellar-testnet-september-2022\" fee strategy is used",
      "match": {
       "arguments": [
        {
         "val": "\"stellar-testnet-september-2022\"",
         "offset": 14
        }
       ],
       "location": "transactionsSteps.TransactionsSteps.theFollowingFeeStrategyIsUsed(java.lang.String,io.cucumber.datatable.DataTable)"
      },
      "rows": [
       {
        "cells": [
         "type",
         "SpecifiedRate"
        ]
       },
       {
        "cells": [
         "baseFee",
         "Medium"
        ]
       }
      ],
      "keyword": "And "
     },
     {
      "result": {
       "duration": 95124000,
       "status": "passed"
      },
      "line": 29,
      "name": "the maximumFee value is set sufficient to satisfy the chosen fee strategy for stellar transaction from \"account1\" to \"account2\"",
      "match": {
       "arguments": [
        {
         "val": "\"account1\"",
         "offset": 103
        },
        {
         "val": "\"account2\"",
         "offset": 117
        }
       ],
       "location": "transactionsSteps.StellarTransactionsSteps.theMaximumFeeValueIsSetSufficientToSatisfyTheChosenFeeStrategyForStellarTransactionFromTo(java.lang.String,java.lang.String)"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 100857000,
       "status": "passed"
      },
      "line": 30,
      "name": "dry run of stellar transaction from \"account1\" to \"account2\" is executed with the fee strategy specified above",
      "match": {
       "arguments": [
        {
         "val": "\"account1\"",
         "offset": 36
        },
        {
         "val": "\"account2\"",
         "offset": 50
        }
       ],
       "location": "transactionsSteps.StellarTransactionsSteps.dryRunOfStellarTransactionFromToIsExecutedWithTheFeeStrategySpecifiedAbove(java.lang.String,java.lang.String)"
      },
      "keyword": "When "
     },
     {
      "result": {
       "duration": 259000,
       "status": "passed"
      },
      "line": 31,
      "name": "dry run result is success",
      "match": {
       "location": "transactionsSteps.TransactionsSteps.dryRunResultIsSuccess()"
      },
      "keyword": "Then "
     },
     {
      "result": {
       "duration": 1523412000,
       "status": "passed"
      },
      "line": 33,
      "name": "stellar transaction to send \"tXLM\" from \"account1\" to \"account2\" is executed",
      "match": {
       "arguments": [
        {
         "val": "\"tXLM\"",
         "offset": 28
        },
        {
         "val": "\"account1\"",
         "offset": 40
        },
        {
         "val": "\"account2\"",
         "offset": 54
        }
       ],
       "location": "transactionsSteps.StellarTransactionsSteps.stellarTransactionToSendFromToIsExecuted(java.lang.String,java.lang.String,java.lang.String)"
      },
      "keyword": "When "
     },
     {
      "result": {
       "duration": 7767983000,
       "status": "passed"
      },
      "line": 34,
      "name": "transaction ledger status is \"Detected or Confirmed\"",
      "match": {
       "arguments": [
        {
         "val": "\"Detected or Confirmed\"",
         "offset": 29
        }
       ],
       "location": "transactionsSteps.TransactionsSteps.transactionLedgerStatusIs(java.lang.String)"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 413295000,
       "status": "passed"
      },
      "line": 36,
      "name": "corresponding transfer and fee are present",
      "match": {
       "location": "transactionsSteps.TransactionsSteps.correspondingTransferAndFeeArePresent()"
      },
      "keyword": "Then "
     },
     {
      "result": {
       "duration": 1705542000,
       "status": "passed"
      },
      "line": 37,
      "name": "\"account1\" has correct balances of \"tXLM\" after \"outgoing\" transaction",
      "match": {
       "arguments": [
        {
         "val": "\"account1\"",
         "offset": 0
        },
        {
         "val": "\"tXLM\"",
         "offset": 35
        },
        {
         "val": "\"outgoing\"",
         "offset": 48
        }
       ],
       "location": "transactionsSteps.TransactionsSteps.hasCorrectBalancesAfterTransaction(java.lang.String,java.lang.String,java.lang.String)"
      },
      "keyword": "Then "
     },
     {
      "result": {
       "duration": 1292519000,
       "status": "passed"
      },
      "line": 38,
      "name": "\"account2\" has correct balances of \"tXLM\" after \"incoming\" transaction",
      "match": {
       "arguments": [
        {
         "val": "\"account2\"",
         "offset": 0
        },
        {
         "val": "\"tXLM\"",
         "offset": 35
        },
        {
         "val": "\"incoming\"",
         "offset": 48
        }
       ],
       "location": "transactionsSteps.TransactionsSteps.hasCorrectBalancesAfterTransaction(java.lang.String,java.lang.String,java.lang.String)"
      },
      "keyword": "Then "
     },
     {
      "result": {
       "duration": 2517097000,
       "status": "passed"
      },
      "line": 40,
      "name": "release quarantined transfers to \"account2\" intent is executed",
      "match": {
       "arguments": [
        {
         "val": "\"account2\"",
         "offset": 33
        }
       ],
       "location": "transactionsSteps.TransactionsSteps.releaseQuarantinedTransfersToIntentIsExecuted(java.lang.String)"
      },
      "keyword": "When "
     },
     {
      "result": {
       "duration": 1664328000,
       "status": "passed"
      },
      "line": 41,
      "name": "\"account1\" has correct balances of \"tXLM\" after \"outgoing\" transaction",
      "match": {
       "arguments": [
        {
         "val": "\"account1\"",
         "offset": 0
        },
        {
         "val": "\"tXLM\"",
         "offset": 35
        },
        {
         "val": "\"outgoing\"",
         "offset": 48
        }
       ],
       "location": "transactionsSteps.TransactionsSteps.hasCorrectBalancesAfterTransaction(java.lang.String,java.lang.String,java.lang.String)"
      },
      "keyword": "Then "
     },
     {
      "result": {
       "duration": 1225013000,
       "status": "passed"
      },
      "line": 42,
      "name": "\"account2\" has correct balances of \"tXLM\" after \"incoming\" transaction",
      "match": {
       "arguments": [
        {
         "val": "\"account2\"",
         "offset": 0
        },
        {
         "val": "\"tXLM\"",
         "offset": 35
        },
        {
         "val": "\"incoming\"",
         "offset": 48
        }
       ],
       "location": "transactionsSteps.TransactionsSteps.hasCorrectBalancesAfterTransaction(java.lang.String,java.lang.String,java.lang.String)"
      },
      "keyword": "Then "
     },
     {
      "result": {
       "duration": 12837510000,
       "status": "passed"
      },
      "line": 44,
      "name": "\"tXLM\" funds are sent from \"account2\" to \"account1\"",
      "match": {
       "arguments": [
        {
         "val": "\"tXLM\"",
         "offset": 0
        },
        {
         "val": "\"account2\"",
         "offset": 27
        },
        {
         "val": "\"account1\"",
         "offset": 41
        }
       ],
       "location": "transactionsSteps.TransactionsSteps.fundsAreSentFromTo(java.lang.String,java.lang.String,java.lang.String)"
      },
      "keyword": "And "
     }
    ],
    "tags": [
     {
      "name": "@transactions-and-accounts"
     },
     {
      "name": "@transactions-and-dry-runs"
     },
     {
      "name": "@stellar"
     },
     {
      "name": "@tr_section-stellar-transactions"
     },
     {
      "name": "@milestone-hmz-1.6"
     },
     {
      "name": "@candidate"
     },
     {
      "name": "@id-stellar-tx-to-account-specified-rate-success"
     }
    ]
   },
   {
    "start_timestamp": "2023-01-09T16:16:37.079Z",
    "before": [
     {
      "result": {
       "duration": 73000,
       "status": "passed"
      },
      "match": {
       "location": "PolicySteps.before(io.cucumber.java.Scenario)"
      }
     },
     {
      "result": {
       "duration": 1094768000,
       "status": "passed"
      },
      "match": {
       "location": "Hooks.beforeScenario()"
      }
     }
    ],
    "line": 108,
    "name": "Stellar report demo transaction test 2",
    "description": "",
    "id": "demo-2-stellar-transactions;stellar-tx-to-account-with-priority-fee-strategy-and-id-memo.-success",
    "after": [
     {
      "result": {
       "duration": 308000,
       "status": "passed"
      },
      "match": {
       "location": "Hooks.afterScenario()"
      }
     }
    ],
    "type": "scenario",
    "keyword": "Scenario",
    "steps": [
     {
      "result": {
       "duration": 668845000,
       "status": "passed"
      },
      "line": 109,
      "name": "we have two recovered \"stellar-testnet-september-2022\" accounts",
      "match": {
       "arguments": [
        {
         "val": "\"stellar-testnet-september-2022\"",
         "offset": 22
        }
       ],
       "location": "AccountsSteps.weHaveTwoRecoveredAccounts(java.lang.String)"
      },
      "keyword": "Given "
     },
     {
      "result": {
       "duration": 1459365000,
       "status": "passed"
      },
      "line": 110,
      "name": "\"account1\" and \"account2\" have enough of \"tXLM\" on the balance for native transfer with funds return",
      "match": {
       "arguments": [
        {
         "val": "\"account1\"",
         "offset": 0
        },
        {
         "val": "\"account2\"",
         "offset": 15
        },
        {
         "val": "\"tXLM\"",
         "offset": 41
        }
       ],
       "location": "AccountsSteps.andHaveEnoughOfForTransactionWithFundsReturn(java.lang.String,java.lang.String,java.lang.String)"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 1147448000,
       "status": "passed"
      },
      "line": 111,
      "name": "endpoint using \"account2\" address is created",
      "match": {
       "arguments": [
        {
         "val": "\"account2\"",
         "offset": 15
        }
       ],
       "location": "EndpointsSteps.endpointUsingAddressIsCreated(java.lang.String)"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 540000,
       "status": "passed"
      },
      "line": 113,
      "name": "the following \"stellar-testnet-september-2022\" fee strategy is used",
      "match": {
       "arguments": [
        {
         "val": "\"stellar-testnet-september-2022\"",
         "offset": 14
        }
       ],
       "location": "transactionsSteps.TransactionsSteps.theFollowingFeeStrategyIsUsed(java.lang.String,io.cucumber.datatable.DataTable)"
      },
      "rows": [
       {
        "cells": [
         "type",
         "Priority"
        ]
       },
       {
        "cells": [
         "priority",
         "High"
        ]
       }
      ],
      "keyword": "And "
     },
     {
      "result": {
       "duration": 208000,
       "status": "passed"
      },
      "line": 117,
      "name": "stellar \"Id\" memo with value \"18446744073709550000\" is used",
      "match": {
       "arguments": [
        {
         "val": "\"Id\"",
         "offset": 8
        },
        {
         "val": "\"18446744073709550000\"",
         "offset": 29
        }
       ],
       "location": "transactionsSteps.StellarTransactionsSteps.stellarMemoWithValueIsUsed(java.lang.String,java.lang.String)"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 99662000,
       "status": "passed"
      },
      "line": 118,
      "name": "the maximumFee value is set sufficient to satisfy the chosen fee strategy for stellar transaction from \"account1\" to \"account2\"",
      "match": {
       "arguments": [
        {
         "val": "\"account1\"",
         "offset": 103
        },
        {
         "val": "\"account2\"",
         "offset": 117
        }
       ],
       "location": "transactionsSteps.StellarTransactionsSteps.theMaximumFeeValueIsSetSufficientToSatisfyTheChosenFeeStrategyForStellarTransactionFromTo(java.lang.String,java.lang.String)"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 118296000,
       "status": "passed"
      },
      "line": 119,
      "name": "dry run of stellar transaction from \"account1\" to \"account2\" is executed with the fee strategy specified above",
      "match": {
       "arguments": [
        {
         "val": "\"account1\"",
         "offset": 36
        },
        {
         "val": "\"account2\"",
         "offset": 50
        }
       ],
       "location": "transactionsSteps.StellarTransactionsSteps.dryRunOfStellarTransactionFromToIsExecutedWithTheFeeStrategySpecifiedAbove(java.lang.String,java.lang.String)"
      },
      "keyword": "When "
     },
     {
      "result": {
       "duration": 235000,
       "status": "passed"
      },
      "line": 121,
      "name": "dry run result is success",
      "match": {
       "location": "transactionsSteps.TransactionsSteps.dryRunResultIsSuccess()"
      },
      "keyword": "Then "
     },
     {
      "result": {
       "duration": 1452253000,
       "status": "passed"
      },
      "line": 123,
      "name": "the stellar transaction to send \"tXLM\" from \"account1\" to endpoint with \"account2\" address is executed",
      "match": {
       "arguments": [
        {
         "val": "\"tXLM\"",
         "offset": 32
        },
        {
         "val": "\"account1\"",
         "offset": 44
        },
        {
         "val": "\"account2\"",
         "offset": 72
        }
       ],
       "location": "transactionsSteps.StellarTransactionsSteps.theStellarTransactionToSendFromToEndpointWithAddressIsExecuted(java.lang.String,java.lang.String,java.lang.String)"
      },
      "keyword": "When "
     },
     {
      "result": {
       "duration": 6837378000,
       "status": "passed"
      },
      "line": 124,
      "name": "transaction ledger status is \"Detected or Confirmed\"",
      "match": {
       "arguments": [
        {
         "val": "\"Detected or Confirmed\"",
         "offset": 29
        }
       ],
       "location": "transactionsSteps.TransactionsSteps.transactionLedgerStatusIs(java.lang.String)"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 447499000,
       "status": "passed"
      },
      "line": 126,
      "name": "corresponding transfer and fee are present",
      "match": {
       "location": "transactionsSteps.TransactionsSteps.correspondingTransferAndFeeArePresent()"
      },
      "keyword": "Then "
     },
     {
      "result": {
       "duration": 1820483000,
       "status": "passed"
      },
      "line": 127,
      "name": "\"account1\" has correct balances of \"tXLM\" after \"outgoing\" transaction",
      "match": {
       "arguments": [
        {
         "val": "\"account1\"",
         "offset": 0
        },
        {
         "val": "\"tXLM\"",
         "offset": 35
        },
        {
         "val": "\"outgoing\"",
         "offset": 48
        }
       ],
       "location": "transactionsSteps.TransactionsSteps.hasCorrectBalancesAfterTransaction(java.lang.String,java.lang.String,java.lang.String)"
      },
      "keyword": "Then "
     },
     {
      "result": {
       "duration": 1383491000,
       "status": "passed"
      },
      "line": 128,
      "name": "\"account2\" has correct balances of \"tXLM\" after \"incoming\" transaction",
      "match": {
       "arguments": [
        {
         "val": "\"account2\"",
         "offset": 0
        },
        {
         "val": "\"tXLM\"",
         "offset": 35
        },
        {
         "val": "\"incoming\"",
         "offset": 48
        }
       ],
       "location": "transactionsSteps.TransactionsSteps.hasCorrectBalancesAfterTransaction(java.lang.String,java.lang.String,java.lang.String)"
      },
      "keyword": "Then "
     },
     {
      "result": {
       "duration": 747764000,
       "status": "passed"
      },
      "line": 130,
      "name": "release quarantined transfers to \"account2\" intent is executed",
      "match": {
       "arguments": [
        {
         "val": "\"account2\"",
         "offset": 33
        }
       ],
       "location": "transactionsSteps.TransactionsSteps.releaseQuarantinedTransfersToIntentIsExecuted(java.lang.String)"
      },
      "keyword": "When "
     },
     {
      "result": {
       "duration": 1632409000,
       "status": "passed"
      },
      "line": 131,
      "name": "\"account1\" has correct balances of \"tXLM\" after \"outgoing\" transaction",
      "match": {
       "arguments": [
        {
         "val": "\"account1\"",
         "offset": 0
        },
        {
         "val": "\"tXLM\"",
         "offset": 35
        },
        {
         "val": "\"outgoing\"",
         "offset": 48
        }
       ],
       "location": "transactionsSteps.TransactionsSteps.hasCorrectBalancesAfterTransaction(java.lang.String,java.lang.String,java.lang.String)"
      },
      "keyword": "Then "
     },
     {
      "result": {
       "duration": 1397207000,
       "status": "passed"
      },
      "line": 132,
      "name": "\"account2\" has correct balances of \"tXLM\" after \"incoming\" transaction",
      "match": {
       "arguments": [
        {
         "val": "\"account2\"",
         "offset": 0
        },
        {
         "val": "\"tXLM\"",
         "offset": 35
        },
        {
         "val": "\"incoming\"",
         "offset": 48
        }
       ],
       "location": "transactionsSteps.TransactionsSteps.hasCorrectBalancesAfterTransaction(java.lang.String,java.lang.String,java.lang.String)"
      },
      "keyword": "Then "
     },
     {
      "result": {
       "duration": 7640658000,
       "status": "passed"
      },
      "line": 134,
      "name": "\"tXLM\" funds are sent from \"account2\" to \"account1\"",
      "match": {
       "arguments": [
        {
         "val": "\"tXLM\"",
         "offset": 0
        },
        {
         "val": "\"account2\"",
         "offset": 27
        },
        {
         "val": "\"account1\"",
         "offset": 41
        }
       ],
       "location": "transactionsSteps.TransactionsSteps.fundsAreSentFromTo(java.lang.String,java.lang.String,java.lang.String)"
      },
      "keyword": "And "
     }
    ],
    "tags": [
     {
      "name": "@transactions-and-accounts"
     },
     {
      "name": "@transactions-and-dry-runs"
     },
     {
      "name": "@stellar"
     },
     {
      "name": "@tr_section-stellar-transactions"
     },
     {
      "name": "@candidate"
     },
     {
      "name": "@milestone-hmz-1.6"
     },
     {
      "name": "@id-stellar-tx-to-endpoint-priority-id-memo-success"
     }
    ]
   },
   {
    "start_timestamp": "2023-01-09T16:16:37.079Z",
    "before": [
     {
      "result": {
       "duration": 73000,
       "status": "passed"
      },
      "match": {
       "location": "PolicySteps.before(io.cucumber.java.Scenario)"
      }
     },
     {
      "result": {
       "duration": 1094768000,
       "status": "passed"
      },
      "match": {
       "location": "Hooks.beforeScenario()"
      }
     }
    ],
    "line": 108,
    "name": "Stellar report demo transaction test 3",
    "description": "",
    "id": "demo-3-stellar-transactions;stellar-tx-to-account-with-priority-fee-strategy-and-id-memo.-success",
    "after": [
     {
      "result": {
       "duration": 308000,
       "status": "passed"
      },
      "match": {
       "location": "Hooks.afterScenario()"
      }
     }
    ],
    "type": "scenario",
    "keyword": "Scenario",
    "steps": [
     {
      "result": {
       "duration": 668845000,
       "status": "passed"
      },
      "line": 109,
      "name": "we have two recovered \"stellar-testnet-september-2022\" accounts",
      "match": {
       "arguments": [
        {
         "val": "\"stellar-testnet-september-2022\"",
         "offset": 22
        }
       ],
       "location": "AccountsSteps.weHaveTwoRecoveredAccounts(java.lang.String)"
      },
      "keyword": "Given "
     },
     {
      "result": {
       "duration": 1459365000,
       "status": "passed"
      },
      "line": 110,
      "name": "\"account1\" and \"account2\" have enough of \"tXLM\" on the balance for native transfer with funds return",
      "match": {
       "arguments": [
        {
         "val": "\"account1\"",
         "offset": 0
        },
        {
         "val": "\"account2\"",
         "offset": 15
        },
        {
         "val": "\"tXLM\"",
         "offset": 41
        }
       ],
       "location": "AccountsSteps.andHaveEnoughOfForTransactionWithFundsReturn(java.lang.String,java.lang.String,java.lang.String)"
      },
      "keyword": "And "
     },
     {
      "result": {
       "error_message": "org.junit.AssumptionViolatedException: assumption error details\n",
       "duration": 1147448000,
       "status": "skipped"
      },
      "line": 111,
      "name": "endpoint using \"account2\" address is created",
      "match": {
       "arguments": [
        {
         "val": "\"account2\"",
         "offset": 15
        }
       ],
       "location": "EndpointsSteps.endpointUsingAddressIsCreated(java.lang.String)"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 540000,
       "status": "skipped"
      },
      "line": 113,
      "name": "the following \"stellar-testnet-september-2022\" fee strategy is used",
      "match": {
       "arguments": [
        {
         "val": "\"stellar-testnet-september-2022\"",
         "offset": 14
        }
       ],
       "location": "transactionsSteps.TransactionsSteps.theFollowingFeeStrategyIsUsed(java.lang.String,io.cucumber.datatable.DataTable)"
      },
      "rows": [
       {
        "cells": [
         "type",
         "Priority"
        ]
       },
       {
        "cells": [
         "priority",
         "High"
        ]
       }
      ],
      "keyword": "And "
     },
     {
      "result": {
       "duration": 208000,
       "status": "skipped"
      },
      "line": 117,
      "name": "stellar \"Id\" memo with value \"18446744073709550000\" is used",
      "match": {
       "arguments": [
        {
         "val": "\"Id\"",
         "offset": 8
        },
        {
         "val": "\"18446744073709550000\"",
         "offset": 29
        }
       ],
       "location": "transactionsSteps.StellarTransactionsSteps.stellarMemoWithValueIsUsed(java.lang.String,java.lang.String)"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 99662000,
       "status": "skipped"
      },
      "line": 118,
      "name": "the maximumFee value is set sufficient to satisfy the chosen fee strategy for stellar transaction from \"account1\" to \"account2\"",
      "match": {
       "arguments": [
        {
         "val": "\"account1\"",
         "offset": 103
        },
        {
         "val": "\"account2\"",
         "offset": 117
        }
       ],
       "location": "transactionsSteps.StellarTransactionsSteps.theMaximumFeeValueIsSetSufficientToSatisfyTheChosenFeeStrategyForStellarTransactionFromTo(java.lang.String,java.lang.String)"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 118296000,
       "status": "skipped"
      },
      "line": 119,
      "name": "dry run of stellar transaction from \"account1\" to \"account2\" is executed with the fee strategy specified above",
      "match": {
       "arguments": [
        {
         "val": "\"account1\"",
         "offset": 36
        },
        {
         "val": "\"account2\"",
         "offset": 50
        }
       ],
       "location": "transactionsSteps.StellarTransactionsSteps.dryRunOfStellarTransactionFromToIsExecutedWithTheFeeStrategySpecifiedAbove(java.lang.String,java.lang.String)"
      },
      "keyword": "When "
     },
     {
      "result": {
       "duration": 235000,
       "status": "skipped"
      },
      "line": 121,
      "name": "dry run result is success",
      "match": {
       "location": "transactionsSteps.TransactionsSteps.dryRunResultIsSuccess()"
      },
      "keyword": "Then "
     },
     {
      "result": {
       "duration": 1452253000,
       "status": "skipped"
      },
      "line": 123,
      "name": "the stellar transaction to send \"tXLM\" from \"account1\" to endpoint with \"account2\" address is executed",
      "match": {
       "arguments": [
        {
         "val": "\"tXLM\"",
         "offset": 32
        },
        {
         "val": "\"account1\"",
         "offset": 44
        },
        {
         "val": "\"account2\"",
         "offset": 72
        }
       ],
       "location": "transactionsSteps.StellarTransactionsSteps.theStellarTransactionToSendFromToEndpointWithAddressIsExecuted(java.lang.String,java.lang.String,java.lang.String)"
      },
      "keyword": "When "
     },
     {
      "result": {
       "duration": 6837378000,
       "status": "skipped"
      },
      "line": 124,
      "name": "transaction ledger status is \"Detected or Confirmed\"",
      "match": {
       "arguments": [
        {
         "val": "\"Detected or Confirmed\"",
         "offset": 29
        }
       ],
       "location": "transactionsSteps.TransactionsSteps.transactionLedgerStatusIs(java.lang.String)"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 447499000,
       "status": "skipped"
      },
      "line": 126,
      "name": "corresponding transfer and fee are present",
      "match": {
       "location": "transactionsSteps.TransactionsSteps.correspondingTransferAndFeeArePresent()"
      },
      "keyword": "Then "
     },
     {
      "result": {
       "duration": 1820483000,
       "status": "skipped"
      },
      "line": 127,
      "name": "\"account1\" has correct balances of \"tXLM\" after \"outgoing\" transaction",
      "match": {
       "arguments": [
        {
         "val": "\"account1\"",
         "offset": 0
        },
        {
         "val": "\"tXLM\"",
         "offset": 35
        },
        {
         "val": "\"outgoing\"",
         "offset": 48
        }
       ],
       "location": "transactionsSteps.TransactionsSteps.hasCorrectBalancesAfterTransaction(java.lang.String,java.lang.String,java.lang.String)"
      },
      "keyword": "Then "
     },
     {
      "result": {
       "duration": 1383491000,
       "status": "skipped"
      },
      "line": 128,
      "name": "\"account2\" has correct balances of \"tXLM\" after \"incoming\" transaction",
      "match": {
       "arguments": [
        {
         "val": "\"account2\"",
         "offset": 0
        },
        {
         "val": "\"tXLM\"",
         "offset": 35
        },
        {
         "val": "\"incoming\"",
         "offset": 48
        }
       ],
       "location": "transactionsSteps.TransactionsSteps.hasCorrectBalancesAfterTransaction(java.lang.String,java.lang.String,java.lang.String)"
      },
      "keyword": "Then "
     },
     {
      "result": {
       "duration": 747764000,
       "status": "skipped"
      },
      "line": 130,
      "name": "release quarantined transfers to \"account2\" intent is executed",
      "match": {
       "arguments": [
        {
         "val": "\"account2\"",
         "offset": 33
        }
       ],
       "location": "transactionsSteps.TransactionsSteps.releaseQuarantinedTransfersToIntentIsExecuted(java.lang.String)"
      },
      "keyword": "When "
     },
     {
      "result": {
       "duration": 1632409000,
       "status": "skipped"
      },
      "line": 131,
      "name": "\"account1\" has correct balances of \"tXLM\" after \"outgoing\" transaction",
      "match": {
       "arguments": [
        {
         "val": "\"account1\"",
         "offset": 0
        },
        {
         "val": "\"tXLM\"",
         "offset": 35
        },
        {
         "val": "\"outgoing\"",
         "offset": 48
        }
       ],
       "location": "transactionsSteps.TransactionsSteps.hasCorrectBalancesAfterTransaction(java.lang.String,java.lang.String,java.lang.String)"
      },
      "keyword": "Then "
     },
     {
      "result": {
       "duration": 1397207000,
       "status": "skipped"
      },
      "line": 132,
      "name": "\"account2\" has correct balances of \"tXLM\" after \"incoming\" transaction",
      "match": {
       "arguments": [
        {
         "val": "\"account2\"",
         "offset": 0
        },
        {
         "val": "\"tXLM\"",
         "offset": 35
        },
        {
         "val": "\"incoming\"",
         "offset": 48
        }
       ],
       "location": "transactionsSteps.TransactionsSteps.hasCorrectBalancesAfterTransaction(java.lang.String,java.lang.String,java.lang.String)"
      },
      "keyword": "Then "
     },
     {
      "result": {
       "duration": 7640658000,
       "status": "skipped"
      },
      "line": 134,
      "name": "\"tXLM\" funds are sent from \"account2\" to \"account1\"",
      "match": {
       "arguments": [
        {
         "val": "\"tXLM\"",
         "offset": 0
        },
        {
         "val": "\"account2\"",
         "offset": 27
        },
        {
         "val": "\"account1\"",
         "offset": 41
        }
       ],
       "location": "transactionsSteps.TransactionsSteps.fundsAreSentFromTo(java.lang.String,java.lang.String,java.lang.String)"
      },
      "keyword": "And "
     }
    ],
    "tags": [
     {
      "name": "@transactions-and-accounts"
     },
     {
      "name": "@transactions-and-dry-runs"
     },
     {
      "name": "@stellar"
     },
     {
      "name": "@tr_section-stellar-transactions"
     },
     {
      "name": "@candidate"
     },
     {
      "name": "@milestone-hmz-1.6"
     },
     {
      "name": "@id-stellar-tx-to-endpoint-priority-id-memo-success"
     }
    ]
   },
   {
    "start_timestamp": "2023-01-09T16:16:37.079Z",
    "before": [
     {
      "result": {
       "duration": 73000,
       "status": "passed"
      },
      "match": {
       "location": "PolicySteps.before(io.cucumber.java.Scenario)"
      }
     },
     {
      "result": {
       "duration": 1094768000,
       "status": "passed"
      },
      "match": {
       "location": "Hooks.beforeScenario()"
      }
     }
    ],
    "line": 108,
    "name": "Stellar report demo transaction test 4",
    "description": "",
    "id": "demo-4-stellar-transactions;stellar-tx-to-account-with-priority-fee-strategy-and-id-memo.-success",
    "after": [
     {
      "result": {
       "duration": 308000,
       "status": "passed"
      },
      "match": {
       "location": "Hooks.afterScenario()"
      }
     }
    ],
    "type": "scenario",
    "keyword": "Scenario",
    "steps": [
     {
      "result": {
       "duration": 668845000,
       "status": "passed"
      },
      "line": 109,
      "name": "we have two recovered \"stellar-testnet-september-2022\" accounts",
      "match": {
       "arguments": [
        {
         "val": "\"stellar-testnet-september-2022\"",
         "offset": 22
        }
       ],
       "location": "AccountsSteps.weHaveTwoRecoveredAccounts(java.lang.String)"
      },
      "keyword": "Given "
     },
     {
      "result": {
       "duration": 1459365000,
       "status": "passed"
      },
      "line": 110,
      "name": "\"account1\" and \"account2\" have enough of \"tXLM\" on the balance for native transfer with funds return",
      "match": {
       "arguments": [
        {
         "val": "\"account1\"",
         "offset": 0
        },
        {
         "val": "\"account2\"",
         "offset": 15
        },
        {
         "val": "\"tXLM\"",
         "offset": 41
        }
       ],
       "location": "AccountsSteps.andHaveEnoughOfForTransactionWithFundsReturn(java.lang.String,java.lang.String,java.lang.String)"
      },
      "keyword": "And "
     },
     {
      "result": {
       "error_message": "org.junit.AssumptionViolatedException: assumption error details\n",
       "duration": 1147448000,
       "status": "skipped"
      },
      "line": 111,
      "name": "endpoint using \"account2\" address is created",
      "match": {
       "arguments": [
        {
         "val": "\"account2\"",
         "offset": 15
        }
       ],
       "location": "EndpointsSteps.endpointUsingAddressIsCreated(java.lang.String)"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 540000,
       "status": "skipped"
      },
      "line": 113,
      "name": "the following \"stellar-testnet-september-2022\" fee strategy is used",
      "match": {
       "arguments": [
        {
         "val": "\"stellar-testnet-september-2022\"",
         "offset": 14
        }
       ],
       "location": "transactionsSteps.TransactionsSteps.theFollowingFeeStrategyIsUsed(java.lang.String,io.cucumber.datatable.DataTable)"
      },
      "rows": [
       {
        "cells": [
         "type",
         "Priority"
        ]
       },
       {
        "cells": [
         "priority",
         "High"
        ]
       }
      ],
      "keyword": "And "
     },
     {
      "result": {
       "duration": 208000,
       "status": "skipped"
      },
      "line": 117,
      "name": "stellar \"Id\" memo with value \"18446744073709550000\" is used",
      "match": {
       "arguments": [
        {
         "val": "\"Id\"",
         "offset": 8
        },
        {
         "val": "\"18446744073709550000\"",
         "offset": 29
        }
       ],
       "location": "transactionsSteps.StellarTransactionsSteps.stellarMemoWithValueIsUsed(java.lang.String,java.lang.String)"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 99662000,
       "status": "skipped"
      },
      "line": 118,
      "name": "the maximumFee value is set sufficient to satisfy the chosen fee strategy for stellar transaction from \"account1\" to \"account2\"",
      "match": {
       "arguments": [
        {
         "val": "\"account1\"",
         "offset": 103
        },
        {
         "val": "\"account2\"",
         "offset": 117
        }
       ],
       "location": "transactionsSteps.StellarTransactionsSteps.theMaximumFeeValueIsSetSufficientToSatisfyTheChosenFeeStrategyForStellarTransactionFromTo(java.lang.String,java.lang.String)"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 118296000,
       "status": "skipped"
      },
      "line": 119,
      "name": "dry run of stellar transaction from \"account1\" to \"account2\" is executed with the fee strategy specified above",
      "match": {
       "arguments": [
        {
         "val": "\"account1\"",
         "offset": 36
        },
        {
         "val": "\"account2\"",
         "offset": 50
        }
       ],
       "location": "transactionsSteps.StellarTransactionsSteps.dryRunOfStellarTransactionFromToIsExecutedWithTheFeeStrategySpecifiedAbove(java.lang.String,java.lang.String)"
      },
      "keyword": "When "
     },
     {
      "result": {
       "duration": 235000,
       "status": "skipped"
      },
      "line": 121,
      "name": "dry run result is success",
      "match": {
       "location": "transactionsSteps.TransactionsSteps.dryRunResultIsSuccess()"
      },
      "keyword": "Then "
     },
     {
      "result": {
       "duration": 1452253000,
       "status": "skipped"
      },
      "line": 123,
      "name": "the stellar transaction to send \"tXLM\" from \"account1\" to endpoint with \"account2\" address is executed",
      "match": {
       "arguments": [
        {
         "val": "\"tXLM\"",
         "offset": 32
        },
        {
         "val": "\"account1\"",
         "offset": 44
        },
        {
         "val": "\"account2\"",
         "offset": 72
        }
       ],
       "location": "transactionsSteps.StellarTransactionsSteps.theStellarTransactionToSendFromToEndpointWithAddressIsExecuted(java.lang.String,java.lang.String,java.lang.String)"
      },
      "keyword": "When "
     },
     {
      "result": {
       "duration": 6837378000,
       "status": "skipped"
      },
      "line": 124,
      "name": "transaction ledger status is \"Detected or Confirmed\"",
      "match": {
       "arguments": [
        {
         "val": "\"Detected or Confirmed\"",
         "offset": 29
        }
       ],
       "location": "transactionsSteps.TransactionsSteps.transactionLedgerStatusIs(java.lang.String)"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 447499000,
       "status": "skipped"
      },
      "line": 126,
      "name": "corresponding transfer and fee are present",
      "match": {
       "location": "transactionsSteps.TransactionsSteps.correspondingTransferAndFeeArePresent()"
      },
      "keyword": "Then "
     },
     {
      "result": {
       "duration": 1820483000,
       "status": "skipped"
      },
      "line": 127,
      "name": "\"account1\" has correct balances of \"tXLM\" after \"outgoing\" transaction",
      "match": {
       "arguments": [
        {
         "val": "\"account1\"",
         "offset": 0
        },
        {
         "val": "\"tXLM\"",
         "offset": 35
        },
        {
         "val": "\"outgoing\"",
         "offset": 48
        }
       ],
       "location": "transactionsSteps.TransactionsSteps.hasCorrectBalancesAfterTransaction(java.lang.String,java.lang.String,java.lang.String)"
      },
      "keyword": "Then "
     },
     {
      "result": {
       "duration": 1383491000,
       "status": "skipped"
      },
      "line": 128,
      "name": "\"account2\" has correct balances of \"tXLM\" after \"incoming\" transaction",
      "match": {
       "arguments": [
        {
         "val": "\"account2\"",
         "offset": 0
        },
        {
         "val": "\"tXLM\"",
         "offset": 35
        },
        {
         "val": "\"incoming\"",
         "offset": 48
        }
       ],
       "location": "transactionsSteps.TransactionsSteps.hasCorrectBalancesAfterTransaction(java.lang.String,java.lang.String,java.lang.String)"
      },
      "keyword": "Then "
     },
     {
      "result": {
       "duration": 747764000,
       "status": "skipped"
      },
      "line": 130,
      "name": "release quarantined transfers to \"account2\" intent is executed",
      "match": {
       "arguments": [
        {
         "val": "\"account2\"",
         "offset": 33
        }
       ],
       "location": "transactionsSteps.TransactionsSteps.releaseQuarantinedTransfersToIntentIsExecuted(java.lang.String)"
      },
      "keyword": "When "
     },
     {
      "result": {
       "duration": 1632409000,
       "status": "skipped"
      },
      "line": 131,
      "name": "\"account1\" has correct balances of \"tXLM\" after \"outgoing\" transaction",
      "match": {
       "arguments": [
        {
         "val": "\"account1\"",
         "offset": 0
        },
        {
         "val": "\"tXLM\"",
         "offset": 35
        },
        {
         "val": "\"outgoing\"",
         "offset": 48
        }
       ],
       "location": "transactionsSteps.TransactionsSteps.hasCorrectBalancesAfterTransaction(java.lang.String,java.lang.String,java.lang.String)"
      },
      "keyword": "Then "
     },
     {
      "result": {
       "duration": 1397207000,
       "status": "skipped"
      },
      "line": 132,
      "name": "\"account2\" has correct balances of \"tXLM\" after \"incoming\" transaction",
      "match": {
       "arguments": [
        {
         "val": "\"account2\"",
         "offset": 0
        },
        {
         "val": "\"tXLM\"",
         "offset": 35
        },
        {
         "val": "\"incoming\"",
         "offset": 48
        }
       ],
       "location": "transactionsSteps.TransactionsSteps.hasCorrectBalancesAfterTransaction(java.lang.String,java.lang.String,java.lang.String)"
      },
      "keyword": "Then "
     },
     {
      "result": {
       "duration": 7640658000,
       "status": "skipped"
      },
      "line": 134,
      "name": "\"tXLM\" funds are sent from \"account2\" to \"account1\"",
      "match": {
       "arguments": [
        {
         "val": "\"tXLM\"",
         "offset": 0
        },
        {
         "val": "\"account2\"",
         "offset": 27
        },
        {
         "val": "\"account1\"",
         "offset": 41
        }
       ],
       "location": "transactionsSteps.TransactionsSteps.fundsAreSentFromTo(java.lang.String,java.lang.String,java.lang.String)"
      },
      "keyword": "And "
     }
    ],
    "tags": [
     {
      "name": "@transactions-and-accounts"
     },
     {
      "name": "@transactions-and-dry-runs"
     },
     {
      "name": "@stellar"
     },
     {
      "name": "@tr_section-stellar-transactions"
     },
     {
      "name": "@candidate"
     },
     {
      "name": "@milestone-hmz-1.6"
     },
     {
      "name": "@id-stellar-tx-to-endpoint-priority-id-memo-success"
     }
    ]
   },
   {
    "start_timestamp": "2023-01-09T16:16:37.079Z",
    "before": [
     {
      "result": {
       "duration": 73000,
       "status": "passed"
      },
      "match": {
       "location": "PolicySteps.before(io.cucumber.java.Scenario)"
      }
     },
     {
      "result": {
       "duration": 1094768000,
       "status": "passed"
      },
      "match": {
       "location": "Hooks.beforeScenario()"
      }
     }
    ],
    "line": 108,
    "name": "Stellar report demo transaction test 5",
    "description": "",
    "id": "demo-5-stellar-transactions;stellar-tx-to-account-with-priority-fee-strategy-and-id-memo.-success",
    "after": [
     {
      "result": {
       "duration": 308000,
       "status": "passed"
      },
      "match": {
       "location": "Hooks.afterScenario()"
      }
     }
    ],
    "type": "scenario",
    "keyword": "Scenario",
    "steps": [
     {
      "result": {
       "duration": 668845000,
       "status": "passed"
      },
      "line": 109,
      "name": "we have two recovered \"stellar-testnet-september-2022\" accounts",
      "match": {
       "arguments": [
        {
         "val": "\"stellar-testnet-september-2022\"",
         "offset": 22
        }
       ],
       "location": "AccountsSteps.weHaveTwoRecoveredAccounts(java.lang.String)"
      },
      "keyword": "Given "
     },
     {
      "result": {
       "duration": 1459365000,
       "status": "passed"
      },
      "line": 110,
      "name": "\"account1\" and \"account2\" have enough of \"tXLM\" on the balance for native transfer with funds return",
      "match": {
       "arguments": [
        {
         "val": "\"account1\"",
         "offset": 0
        },
        {
         "val": "\"account2\"",
         "offset": 15
        },
        {
         "val": "\"tXLM\"",
         "offset": 41
        }
       ],
       "location": "AccountsSteps.andHaveEnoughOfForTransactionWithFundsReturn(java.lang.String,java.lang.String,java.lang.String)"
      },
      "keyword": "And "
     },
     {
      "result": {
       "error_message": "org.junit.AssumptionViolatedException: assumption error details\n",
       "duration": 1147448000,
       "status": "skipped"
      },
      "line": 111,
      "name": "endpoint using \"account2\" address is created",
      "match": {
       "arguments": [
        {
         "val": "\"account2\"",
         "offset": 15
        }
       ],
       "location": "EndpointsSteps.endpointUsingAddressIsCreated(java.lang.String)"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 540000,
       "status": "skipped"
      },
      "line": 113,
      "name": "the following \"stellar-testnet-september-2022\" fee strategy is used",
      "match": {
       "arguments": [
        {
         "val": "\"stellar-testnet-september-2022\"",
         "offset": 14
        }
       ],
       "location": "transactionsSteps.TransactionsSteps.theFollowingFeeStrategyIsUsed(java.lang.String,io.cucumber.datatable.DataTable)"
      },
      "rows": [
       {
        "cells": [
         "type",
         "Priority"
        ]
       },
       {
        "cells": [
         "priority",
         "High"
        ]
       }
      ],
      "keyword": "And "
     },
     {
      "result": {
       "duration": 208000,
       "status": "skipped"
      },
      "line": 117,
      "name": "stellar \"Id\" memo with value \"18446744073709550000\" is used",
      "match": {
       "arguments": [
        {
         "val": "\"Id\"",
         "offset": 8
        },
        {
         "val": "\"18446744073709550000\"",
         "offset": 29
        }
       ],
       "location": "transactionsSteps.StellarTransactionsSteps.stellarMemoWithValueIsUsed(java.lang.String,java.lang.String)"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 99662000,
       "status": "skipped"
      },
      "line": 118,
      "name": "the maximumFee value is set sufficient to satisfy the chosen fee strategy for stellar transaction from \"account1\" to \"account2\"",
      "match": {
       "arguments": [
        {
         "val": "\"account1\"",
         "offset": 103
        },
        {
         "val": "\"account2\"",
         "offset": 117
        }
       ],
       "location": "transactionsSteps.StellarTransactionsSteps.theMaximumFeeValueIsSetSufficientToSatisfyTheChosenFeeStrategyForStellarTransactionFromTo(java.lang.String,java.lang.String)"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 118296000,
       "status": "skipped"
      },
      "line": 119,
      "name": "dry run of stellar transaction from \"account1\" to \"account2\" is executed with the fee strategy specified above",
      "match": {
       "arguments": [
        {
         "val": "\"account1\"",
         "offset": 36
        },
        {
         "val": "\"account2\"",
         "offset": 50
        }
       ],
       "location": "transactionsSteps.StellarTransactionsSteps.dryRunOfStellarTransactionFromToIsExecutedWithTheFeeStrategySpecifiedAbove(java.lang.String,java.lang.String)"
      },
      "keyword": "When "
     },
     {
      "result": {
       "duration": 235000,
       "status": "skipped"
      },
      "line": 121,
      "name": "dry run result is success",
      "match": {
       "location": "transactionsSteps.TransactionsSteps.dryRunResultIsSuccess()"
      },
      "keyword": "Then "
     },
     {
      "result": {
       "duration": 1452253000,
       "status": "skipped"
      },
      "line": 123,
      "name": "the stellar transaction to send \"tXLM\" from \"account1\" to endpoint with \"account2\" address is executed",
      "match": {
       "arguments": [
        {
         "val": "\"tXLM\"",
         "offset": 32
        },
        {
         "val": "\"account1\"",
         "offset": 44
        },
        {
         "val": "\"account2\"",
         "offset": 72
        }
       ],
       "location": "transactionsSteps.StellarTransactionsSteps.theStellarTransactionToSendFromToEndpointWithAddressIsExecuted(java.lang.String,java.lang.String,java.lang.String)"
      },
      "keyword": "When "
     },
     {
      "result": {
       "duration": 6837378000,
       "status": "skipped"
      },
      "line": 124,
      "name": "transaction ledger status is \"Detected or Confirmed\"",
      "match": {
       "arguments": [
        {
         "val": "\"Detected or Confirmed\"",
         "offset": 29
        }
       ],
       "location": "transactionsSteps.TransactionsSteps.transactionLedgerStatusIs(java.lang.String)"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 447499000,
       "status": "skipped"
      },
      "line": 126,
      "name": "corresponding transfer and fee are present",
      "match": {
       "location": "transactionsSteps.TransactionsSteps.correspondingTransferAndFeeArePresent()"
      },
      "keyword": "Then "
     },
     {
      "result": {
       "duration": 1820483000,
       "status": "skipped"
      },
      "line": 127,
      "name": "\"account1\" has correct balances of \"tXLM\" after \"outgoing\" transaction",
      "match": {
       "arguments": [
        {
         "val": "\"account1\"",
         "offset": 0
        },
        {
         "val": "\"tXLM\"",
         "offset": 35
        },
        {
         "val": "\"outgoing\"",
         "offset": 48
        }
       ],
       "location": "transactionsSteps.TransactionsSteps.hasCorrectBalancesAfterTransaction(java.lang.String,java.lang.String,java.lang.String)"
      },
      "keyword": "Then "
     },
     {
      "result": {
       "duration": 1383491000,
       "status": "skipped"
      },
      "line": 128,
      "name": "\"account2\" has correct balances of \"tXLM\" after \"incoming\" transaction",
      "match": {
       "arguments": [
        {
         "val": "\"account2\"",
         "offset": 0
        },
        {
         "val": "\"tXLM\"",
         "offset": 35
        },
        {
         "val": "\"incoming\"",
         "offset": 48
        }
       ],
       "location": "transactionsSteps.TransactionsSteps.hasCorrectBalancesAfterTransaction(java.lang.String,java.lang.String,java.lang.String)"
      },
      "keyword": "Then "
     },
     {
      "result": {
       "duration": 747764000,
       "status": "skipped"
      },
      "line": 130,
      "name": "release quarantined transfers to \"account2\" intent is executed",
      "match": {
       "arguments": [
        {
         "val": "\"account2\"",
         "offset": 33
        }
       ],
       "location": "transactionsSteps.TransactionsSteps.releaseQuarantinedTransfersToIntentIsExecuted(java.lang.String)"
      },
      "keyword": "When "
     },
     {
      "result": {
       "duration": 1632409000,
       "status": "skipped"
      },
      "line": 131,
      "name": "\"account1\" has correct balances of \"tXLM\" after \"outgoing\" transaction",
      "match": {
       "arguments": [
        {
         "val": "\"account1\"",
         "offset": 0
        },
        {
         "val": "\"tXLM\"",
         "offset": 35
        },
        {
         "val": "\"outgoing\"",
         "offset": 48
        }
       ],
       "location": "transactionsSteps.TransactionsSteps.hasCorrectBalancesAfterTransaction(java.lang.String,java.lang.String,java.lang.String)"
      },
      "keyword": "Then "
     },
     {
      "result": {
       "duration": 1397207000,
       "status": "skipped"
      },
      "line": 132,
      "name": "\"account2\" has correct balances of \"tXLM\" after \"incoming\" transaction",
      "match": {
       "arguments": [
        {
         "val": "\"account2\"",
         "offset": 0
        },
        {
         "val": "\"tXLM\"",
         "offset": 35
        },
        {
         "val": "\"incoming\"",
         "offset": 48
        }
       ],
       "location": "transactionsSteps.TransactionsSteps.hasCorrectBalancesAfterTransaction(java.lang.String,java.lang.String,java.lang.String)"
      },
      "keyword": "Then "
     },
     {
      "result": {
       "duration": 7640658000,
       "status": "skipped"
      },
      "line": 134,
      "name": "\"tXLM\" funds are sent from \"account2\" to \"account1\"",
      "match": {
       "arguments": [
        {
         "val": "\"tXLM\"",
         "offset": 0
        },
        {
         "val": "\"account2\"",
         "offset": 27
        },
        {
         "val": "\"account1\"",
         "offset": 41
        }
       ],
       "location": "transactionsSteps.TransactionsSteps.fundsAreSentFromTo(java.lang.String,java.lang.String,java.lang.String)"
      },
      "keyword": "And "
     }
    ],
    "tags": [
     {
      "name": "@transactions-and-accounts"
     },
     {
      "name": "@transactions-and-dry-runs"
     },
     {
      "name": "@stellar"
     },
     {
      "name": "@tr_section-stellar-transactions"
     },
     {
      "name": "@candidate"
     },
     {
      "name": "@milestone-hmz-1.6"
     },
     {
      "name": "@id-stellar-tx-to-endpoint-priority-id-memo-success"
     }
    ]
   }
  ],
  "name": "Stellar transactions",
  "description": "",
  "id": "stellar-transactions",
  "keyword": "Feature",
  "uri": "file:src/test/resources/features/transactions_and_accounts/StellarTransactions.feature",
  "tags": [
   {
    "name": "@transactions-and-accounts",
    "type": "Tag",
    "location": {
     "line": 1,
     "column": 1
    }
   },
   {
    "name": "@transactions-and-dry-runs",
    "type": "Tag",
    "location": {
     "line": 2,
     "column": 1
    }
   },
   {
    "name": "@stellar",
    "type": "Tag",
    "location": {
     "line": 3,
     "column": 1
    }
   },
   {
    "name": "@tr_section-stellar-transactions",
    "type": "Tag",
    "location": {
     "line": 4,
     "column": 1
    }
   }
  ]
 },
 {
  "line": 7,
  "elements": [
   {
    "line": 9,
    "name": "",
    "description": "",
    "type": "background",
    "keyword": "Background",
    "steps": [
     {
      "result": {
       "duration": 2483000,
       "status": "passed"
      },
      "line": 10,
      "name": "a root domain admin user is logged in",
      "match": {
       "location": "UserSteps.aRootDomainAdminUserIsLoggedIn()"
      },
      "keyword": "Given "
     },
     {
      "result": {
       "duration": 92000,
       "status": "passed"
      },
      "line": 11,
      "name": "the current domain is a root domain",
      "match": {
       "location": "DomainSteps.theCurrentDomainIsARootDomain()"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 451388000,
       "status": "passed"
      },
      "line": 12,
      "name": "the vault is configured",
      "match": {
       "location": "VaultsSteps.theVaultIsConfigured()"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 1065487000,
       "status": "passed"
      },
      "line": 14,
      "name": "pre-conditions for \"substrate-westend\" accounts balances recovery are met",
      "match": {
       "arguments": [
        {
         "val": "\"substrate-westend\"",
         "offset": 19
        }
       ],
       "location": "AccountsSteps.preConditionsForAccountsBalancesRecoveryAreMet(java.lang.String)"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 530832000,
       "status": "passed"
      },
      "line": 15,
      "name": "all recovery transfers are released to accounts",
      "match": {
       "location": "transactionsSteps.TransactionsSteps.allRecoveryQuarantinedTransfersAreReleased()"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 486075000,
       "status": "passed"
      },
      "line": 16,
      "name": "all ongoing quarantined transfers are released to accounts",
      "match": {
       "location": "transactionsSteps.TransactionsSteps.quarantinedTransfersAreReleasedToAccounts()"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 166247000,
       "status": "passed"
      },
      "line": 17,
      "name": "all policies except default are locked",
      "match": {
       "location": "PolicySteps.allPoliciesExceptDefaultAreLocked()"
      },
      "keyword": "And "
     }
    ]
   },
   {
    "start_timestamp": "2023-01-09T16:17:07.104Z",
    "before": [
     {
      "result": {
       "duration": 53000,
       "status": "passed"
      },
      "match": {
       "location": "PolicySteps.before(io.cucumber.java.Scenario)"
      }
     },
     {
      "result": {
       "duration": 1271012000,
       "status": "passed"
      },
      "match": {
       "location": "Hooks.beforeScenario()"
      }
     }
    ],
    "line": 69,
    "name": "Substrate report demo transaction test 1",
    "description": "",
    "id": "demo-1-substrate-transactions;substrate-transaction-to-endpoint-with--account-address",
    "after": [
     {
      "result": {
       "duration": 113000,
       "status": "passed"
      },
      "match": {
       "location": "Hooks.afterScenario()"
      }
     }
    ],
    "type": "scenario",
    "keyword": "Scenario",
    "steps": [
     {
      "result": {
       "duration": 748911000,
       "status": "passed"
      },
      "line": 70,
      "name": "we have two recovered \"substrate-westend\" accounts",
      "match": {
       "arguments": [
        {
         "val": "\"substrate-westend\"",
         "offset": 22
        }
       ],
       "location": "AccountsSteps.weHaveTwoRecoveredAccounts(java.lang.String)"
      },
      "keyword": "Given "
     },
     {
      "result": {
       "duration": 607119000,
       "status": "passed"
      },
      "line": 71,
      "name": "endpoint using \"account2\" address is created",
      "match": {
       "arguments": [
        {
         "val": "\"account2\"",
         "offset": 15
        }
       ],
       "location": "EndpointsSteps.endpointUsingAddressIsCreated(java.lang.String)"
      },
      "keyword": "And "
     },
     {
      "result": {
       "error_message": "org.junit.AssumptionViolatedException: Error details\n",
       "duration": 2261805000,
       "status": "skipped"
      },
      "line": 73,
      "name": "\"account1\" and \"account2\" have enough of \"WND\" on the balance for native transfer with funds return",
      "match": {
       "arguments": [
        {
         "val": "\"account1\"",
         "offset": 0
        },
        {
         "val": "\"account2\"",
         "offset": 15
        },
        {
         "val": "\"WND\"",
         "offset": 41
        }
       ],
       "location": "AccountsSteps.andHaveEnoughOfForTransactionWithFundsReturn(java.lang.String,java.lang.String,java.lang.String)"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 193000,
       "status": "skipped"
      },
      "line": 75,
      "name": "the substrate transaction intent from \"account1\" to endpoint with \"account2\" address is executed",
      "match": {
       "arguments": [
        {
         "val": "\"account1\"",
         "offset": 38
        },
        {
         "val": "\"account2\"",
         "offset": 66
        }
       ],
       "location": "transactionsSteps.SubstrateTransactionsSteps.theSubstrateTransactionIntentFromToEndpointWithAddressIsExecuted(java.lang.String,java.lang.String)"
      },
      "keyword": "When "
     },
     {
      "result": {
       "duration": 87000,
       "status": "passed"
      },
      "line": 76,
      "name": "transaction ledger status is \"Detected or Confirmed\"",
      "match": {
       "arguments": [
        {
         "val": "\"Detected or Confirmed\"",
         "offset": 29
        }
       ],
       "location": "transactionsSteps.TransactionsSteps.transactionLedgerStatusIs(java.lang.String)"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 81000,
       "status": "passed"
      },
      "line": 78,
      "name": "corresponding transfer and fee are present",
      "match": {
       "location": "transactionsSteps.TransactionsSteps.correspondingTransferAndFeeArePresent()"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 114000,
       "status": "skipped"
      },
      "line": 79,
      "name": "the transfer to \"account2\" is quarantined",
      "match": {
       "arguments": [
        {
         "val": "\"account2\"",
         "offset": 16
        }
       ],
       "location": "transactionsSteps.TransactionsSteps.theTransferToIsQuarantined(java.lang.String)"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 79000,
       "status": "skipped"
      },
      "line": 81,
      "name": "\"account1\" has correct balances of \"WND\" after \"outgoing\" transaction",
      "match": {
       "arguments": [
        {
         "val": "\"account1\"",
         "offset": 0
        },
        {
         "val": "\"WND\"",
         "offset": 35
        },
        {
         "val": "\"outgoing\"",
         "offset": 47
        }
       ],
       "location": "transactionsSteps.TransactionsSteps.hasCorrectBalancesAfterTransaction(java.lang.String,java.lang.String,java.lang.String)"
      },
      "keyword": "Then "
     },
     {
      "result": {
       "duration": 71000,
       "status": "skipped"
      },
      "line": 82,
      "name": "\"account2\" has correct balances of \"WND\" after \"incoming\" transaction",
      "match": {
       "arguments": [
        {
         "val": "\"account2\"",
         "offset": 0
        },
        {
         "val": "\"WND\"",
         "offset": 35
        },
        {
         "val": "\"incoming\"",
         "offset": 47
        }
       ],
       "location": "transactionsSteps.TransactionsSteps.hasCorrectBalancesAfterTransaction(java.lang.String,java.lang.String,java.lang.String)"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 62000,
       "status": "skipped"
      },
      "line": 84,
      "name": "release quarantined transfers to \"account2\" intent is executed",
      "match": {
       "arguments": [
        {
         "val": "\"account2\"",
         "offset": 33
        }
       ],
       "location": "transactionsSteps.TransactionsSteps.releaseQuarantinedTransfersToIntentIsExecuted(java.lang.String)"
      },
      "keyword": "When "
     },
     {
      "result": {
       "duration": 56000,
       "status": "skipped"
      },
      "line": 85,
      "name": "\"account1\" has correct balances of \"WND\" after \"outgoing\" transaction",
      "match": {
       "arguments": [
        {
         "val": "\"account1\"",
         "offset": 0
        },
        {
         "val": "\"WND\"",
         "offset": 35
        },
        {
         "val": "\"outgoing\"",
         "offset": 47
        }
       ],
       "location": "transactionsSteps.TransactionsSteps.hasCorrectBalancesAfterTransaction(java.lang.String,java.lang.String,java.lang.String)"
      },
      "keyword": "Then "
     },
     {
      "result": {
       "duration": 56000,
       "status": "skipped"
      },
      "line": 86,
      "name": "\"account2\" has correct balances of \"WND\" after \"incoming\" transaction",
      "match": {
       "arguments": [
        {
         "val": "\"account2\"",
         "offset": 0
        },
        {
         "val": "\"WND\"",
         "offset": 35
        },
        {
         "val": "\"incoming\"",
         "offset": 47
        }
       ],
       "location": "transactionsSteps.TransactionsSteps.hasCorrectBalancesAfterTransaction(java.lang.String,java.lang.String,java.lang.String)"
      },
      "keyword": "Then "
     },
     {
      "result": {
       "duration": 55000,
       "status": "skipped"
      },
      "line": 88,
      "name": "\"WND\" funds are sent from \"account2\" to \"account1\"",
      "match": {
       "arguments": [
        {
         "val": "\"WND\"",
         "offset": 0
        },
        {
         "val": "\"account2\"",
         "offset": 26
        },
        {
         "val": "\"account1\"",
         "offset": 40
        }
       ],
       "location": "transactionsSteps.TransactionsSteps.fundsAreSentFromTo(java.lang.String,java.lang.String,java.lang.String)"
      },
      "keyword": "And "
     }
    ],
    "tags": [
     {
      "name": "@transactions-and-accounts"
     },
     {
      "name": "@transactions-and-dry-runs"
     },
     {
      "name": "@substrate-transactions"
     },
     {
      "name": "@substrate"
     },
     {
      "name": "@tr_section-substrate-transactions"
     },
     {
      "name": "@milestone-hmz-1.3"
     },
     {
      "name": "@ref-groups/silo/platform/-/epics/13"
     },
     {
      "name": "@candidate"
     },
     {
      "name": "@id-substrate-transaction-to-endpoint-with--address-keep-alive"
     }
    ]
   },
   {
    "start_timestamp": "2023-01-09T16:17:07.104Z",
    "before": [
     {
      "result": {
       "duration": 53000,
       "status": "passed"
      },
      "match": {
       "location": "PolicySteps.before(io.cucumber.java.Scenario)"
      }
     },
     {
      "result": {
       "duration": 1271012000,
       "status": "passed"
      },
      "match": {
       "location": "Hooks.beforeScenario()"
      }
     }
    ],
    "line": 69,
    "name": "Substrate report demo transaction test 2",
    "description": "",
    "id": "demo-2-test-substrate-transactions;substrate-transaction-to-endpoint-with--account-address",
    "after": [
     {
      "result": {
       "duration": 113000,
       "status": "passed"
      },
      "match": {
       "location": "Hooks.afterScenario()"
      }
     }
    ],
    "type": "scenario",
    "keyword": "Scenario",
    "steps": [
     {
      "result": {
       "duration": 748911000,
       "status": "passed"
      },
      "line": 70,
      "name": "we have two recovered \"substrate-westend\" accounts",
      "match": {
       "arguments": [
        {
         "val": "\"substrate-westend\"",
         "offset": 22
        }
       ],
       "location": "AccountsSteps.weHaveTwoRecoveredAccounts(java.lang.String)"
      },
      "keyword": "Given "
     },
     {
      "result": {
       "duration": 607119000,
       "status": "passed"
      },
      "line": 71,
      "name": "endpoint using \"account2\" address is created",
      "match": {
       "arguments": [
        {
         "val": "\"account2\"",
         "offset": 15
        }
       ],
       "location": "EndpointsSteps.endpointUsingAddressIsCreated(java.lang.String)"
      },
      "keyword": "And "
     },
     {
      "result": {
       "error_message": "org.junit.AssumptionViolatedException: Dry run returned InternalError \u0027{\"estimate\":{\"hint\":\"InternalError\",\"reason\":\"Substrate ledger not configured for current runtime\",\"type\":\"Failure\"},\"result\":{\"hint\":\"InternalError\",\"reason\":\"Substrate ledger not configured for current runtime\",\"type\":\"Failure\"}}\u0027. \nPayload: \u0027\"accountId\": \"6e992b79-f01a-42d7-acef-6747a316e771\", \"parameters\": {\"feeStrategy\":{\"priority\":\"Medium\",\"type\":\"Priority\"},\"maximumFee\":\"100600001684\",\"pallet\":{\"method\":{\"amount\":\"50000000000\",\"destination\":{\"address\":\"5FkcybNiJ2z3sxUdQJMDPqfduaYiGSUc26dm4YhKY9zDoyEA\",\"type\":\"Address\"},\"type\":\"TransferKeepAlive\"},\"type\":\"Balances\"},\"type\":\"Substrate\"} \u0027\n\tat org.junit.Assume.assumeTrue(Assume.java:68)\n\tat org.junit.Assume.assumeFalse(Assume.java:75)\n\tat helpers.transactions.TransactionsHelper.makeAdHocDryRun(TransactionsHelper.java:41)\n\tat helpers.transactions.TransactionsHelper.dryRunWithDefaultAmounts(TransactionsHelper.java:222)\n\tat AccountsSteps.andHaveEnoughOfForTransactionWithFundsReturn(AccountsSteps.java:555)\n\tat ✽.\"account1\" and \"account2\" have enough of \"WND\" on the balance for native transfer with funds return(file:///Users/yevheniiakrykun/projects/qa-v4/src/test/resources/features/transactions_and_accounts/SubstrateTransactions.feature:73)\n",
       "duration": 2261805000,
       "status": "passed"
      },
      "line": 73,
      "name": "\"account1\" and \"account2\" have enough of \"WND\" on the balance for native transfer with funds return",
      "match": {
       "arguments": [
        {
         "val": "\"account1\"",
         "offset": 0
        },
        {
         "val": "\"account2\"",
         "offset": 15
        },
        {
         "val": "\"WND\"",
         "offset": 41
        }
       ],
       "location": "AccountsSteps.andHaveEnoughOfForTransactionWithFundsReturn(java.lang.String,java.lang.String,java.lang.String)"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 193000,
       "status": "passed"
      },
      "line": 75,
      "name": "the substrate transaction intent from \"account1\" to endpoint with \"account2\" address is executed",
      "match": {
       "arguments": [
        {
         "val": "\"account1\"",
         "offset": 38
        },
        {
         "val": "\"account2\"",
         "offset": 66
        }
       ],
       "location": "transactionsSteps.SubstrateTransactionsSteps.theSubstrateTransactionIntentFromToEndpointWithAddressIsExecuted(java.lang.String,java.lang.String)"
      },
      "keyword": "When "
     },
     {
      "result": {
       "duration": 87000,
       "status": "passed"
      },
      "line": 76,
      "name": "transaction ledger status is \"Detected or Confirmed\"",
      "match": {
       "arguments": [
        {
         "val": "\"Detected or Confirmed\"",
         "offset": 29
        }
       ],
       "location": "transactionsSteps.TransactionsSteps.transactionLedgerStatusIs(java.lang.String)"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 81000,
       "status": "passed"
      },
      "line": 78,
      "name": "corresponding transfer and fee are present",
      "match": {
       "location": "transactionsSteps.TransactionsSteps.correspondingTransferAndFeeArePresent()"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 114000,
       "status": "passed"
      },
      "line": 79,
      "name": "the transfer to \"account2\" is quarantined",
      "match": {
       "arguments": [
        {
         "val": "\"account2\"",
         "offset": 16
        }
       ],
       "location": "transactionsSteps.TransactionsSteps.theTransferToIsQuarantined(java.lang.String)"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 79000,
       "status": "passed"
      },
      "line": 81,
      "name": "\"account1\" has correct balances of \"WND\" after \"outgoing\" transaction",
      "match": {
       "arguments": [
        {
         "val": "\"account1\"",
         "offset": 0
        },
        {
         "val": "\"WND\"",
         "offset": 35
        },
        {
         "val": "\"outgoing\"",
         "offset": 47
        }
       ],
       "location": "transactionsSteps.TransactionsSteps.hasCorrectBalancesAfterTransaction(java.lang.String,java.lang.String,java.lang.String)"
      },
      "keyword": "Then "
     },
     {
      "result": {
       "duration": 71000,
       "status": "passed"
      },
      "line": 82,
      "name": "\"account2\" has correct balances of \"WND\" after \"incoming\" transaction",
      "match": {
       "arguments": [
        {
         "val": "\"account2\"",
         "offset": 0
        },
        {
         "val": "\"WND\"",
         "offset": 35
        },
        {
         "val": "\"incoming\"",
         "offset": 47
        }
       ],
       "location": "transactionsSteps.TransactionsSteps.hasCorrectBalancesAfterTransaction(java.lang.String,java.lang.String,java.lang.String)"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 62000,
       "status": "passed"
      },
      "line": 84,
      "name": "release quarantined transfers to \"account2\" intent is executed",
      "match": {
       "arguments": [
        {
         "val": "\"account2\"",
         "offset": 33
        }
       ],
       "location": "transactionsSteps.TransactionsSteps.releaseQuarantinedTransfersToIntentIsExecuted(java.lang.String)"
      },
      "keyword": "When "
     },
     {
      "result": {
       "duration": 56000,
       "status": "passed"
      },
      "line": 85,
      "name": "\"account1\" has correct balances of \"WND\" after \"outgoing\" transaction",
      "match": {
       "arguments": [
        {
         "val": "\"account1\"",
         "offset": 0
        },
        {
         "val": "\"WND\"",
         "offset": 35
        },
        {
         "val": "\"outgoing\"",
         "offset": 47
        }
       ],
       "location": "transactionsSteps.TransactionsSteps.hasCorrectBalancesAfterTransaction(java.lang.String,java.lang.String,java.lang.String)"
      },
      "keyword": "Then "
     },
     {
      "result": {
       "duration": 56000,
       "status": "passed"
      },
      "line": 86,
      "name": "\"account2\" has correct balances of \"WND\" after \"incoming\" transaction",
      "match": {
       "arguments": [
        {
         "val": "\"account2\"",
         "offset": 0
        },
        {
         "val": "\"WND\"",
         "offset": 35
        },
        {
         "val": "\"incoming\"",
         "offset": 47
        }
       ],
       "location": "transactionsSteps.TransactionsSteps.hasCorrectBalancesAfterTransaction(java.lang.String,java.lang.String,java.lang.String)"
      },
      "keyword": "Then "
     },
     {
      "result": {
       "duration": 55000,
       "status": "passed"
      },
      "line": 88,
      "name": "\"WND\" funds are sent from \"account2\" to \"account1\"",
      "match": {
       "arguments": [
        {
         "val": "\"WND\"",
         "offset": 0
        },
        {
         "val": "\"account2\"",
         "offset": 26
        },
        {
         "val": "\"account1\"",
         "offset": 40
        }
       ],
       "location": "transactionsSteps.TransactionsSteps.fundsAreSentFromTo(java.lang.String,java.lang.String,java.lang.String)"
      },
      "keyword": "And "
     }
    ],
    "tags": [
     {
      "name": "@transactions-and-accounts"
     },
     {
      "name": "@transactions-and-dry-runs"
     },
     {
      "name": "@substrate-transactions"
     },
     {
      "name": "@substrate"
     },
     {
      "name": "@tr_section-substrate-transactions"
     },
     {
      "name": "@milestone-hmz-1.3"
     },
     {
      "name": "@ref-groups/silo/platform/-/epics/13"
     },
     {
      "name": "@candidate"
     },
     {
      "name": "@id-substrate-transaction-to-endpoint-with--address-keep-alive"
     }
    ]
   },
   {
    "start_timestamp": "2023-01-09T16:17:07.104Z",
    "before": [
     {
      "result": {
       "duration": 53000,
       "status": "passed"
      },
      "match": {
       "location": "PolicySteps.before(io.cucumber.java.Scenario)"
      }
     },
     {
      "result": {
       "duration": 1271012000,
       "status": "passed"
      },
      "match": {
       "location": "Hooks.beforeScenario()"
      }
     }
    ],
    "line": 69,
    "name": "Substrate report demo transaction test 3",
    "description": "",
    "id": "demo-3-substrate-transactions;substrate-transaction-to-endpoint-with--account-address",
    "after": [
     {
      "result": {
       "duration": 113000,
       "status": "passed"
      },
      "match": {
       "location": "Hooks.afterScenario()"
      }
     }
    ],
    "type": "scenario",
    "keyword": "Scenario",
    "steps": [
     {
      "result": {
       "duration": 748911000,
       "status": "passed"
      },
      "line": 70,
      "name": "we have two recovered \"substrate-westend\" accounts",
      "match": {
       "arguments": [
        {
         "val": "\"substrate-westend\"",
         "offset": 22
        }
       ],
       "location": "AccountsSteps.weHaveTwoRecoveredAccounts(java.lang.String)"
      },
      "keyword": "Given "
     },
     {
      "result": {
       "duration": 607119000,
       "status": "passed"
      },
      "line": 71,
      "name": "endpoint using \"account2\" address is created",
      "match": {
       "arguments": [
        {
         "val": "\"account2\"",
         "offset": 15
        }
       ],
       "location": "EndpointsSteps.endpointUsingAddressIsCreated(java.lang.String)"
      },
      "keyword": "And "
     },
     {
      "result": {
       "error_message": "org.junit.AssumptionViolatedException: Dry run returned InternalError \u0027{\"estimate\":{\"hint\":\"InternalError\",\"reason\":\"Substrate ledger not configured for current runtime\",\"type\":\"Failure\"},\"result\":{\"hint\":\"InternalError\",\"reason\":\"Substrate ledger not configured for current runtime\",\"type\":\"Failure\"}}\u0027. \nPayload: \u0027\"accountId\": \"6e992b79-f01a-42d7-acef-6747a316e771\", \"parameters\": {\"feeStrategy\":{\"priority\":\"Medium\",\"type\":\"Priority\"},\"maximumFee\":\"100600001684\",\"pallet\":{\"method\":{\"amount\":\"50000000000\",\"destination\":{\"address\":\"5FkcybNiJ2z3sxUdQJMDPqfduaYiGSUc26dm4YhKY9zDoyEA\",\"type\":\"Address\"},\"type\":\"TransferKeepAlive\"},\"type\":\"Balances\"},\"type\":\"Substrate\"} \u0027\n\tat org.junit.Assume.assumeTrue(Assume.java:68)\n\tat org.junit.Assume.assumeFalse(Assume.java:75)\n\tat helpers.transactions.TransactionsHelper.makeAdHocDryRun(TransactionsHelper.java:41)\n\tat helpers.transactions.TransactionsHelper.dryRunWithDefaultAmounts(TransactionsHelper.java:222)\n\tat AccountsSteps.andHaveEnoughOfForTransactionWithFundsReturn(AccountsSteps.java:555)\n\tat ✽.\"account1\" and \"account2\" have enough of \"WND\" on the balance for native transfer with funds return(file:///Users/yevheniiakrykun/projects/qa-v4/src/test/resources/features/transactions_and_accounts/SubstrateTransactions.feature:73)\n",
       "duration": 2261805000,
       "status": "passed"
      },
      "line": 73,
      "name": "\"account1\" and \"account2\" have enough of \"WND\" on the balance for native transfer with funds return",
      "match": {
       "arguments": [
        {
         "val": "\"account1\"",
         "offset": 0
        },
        {
         "val": "\"account2\"",
         "offset": 15
        },
        {
         "val": "\"WND\"",
         "offset": 41
        }
       ],
       "location": "AccountsSteps.andHaveEnoughOfForTransactionWithFundsReturn(java.lang.String,java.lang.String,java.lang.String)"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 193000,
       "status": "passed"
      },
      "line": 75,
      "name": "the substrate transaction intent from \"account1\" to endpoint with \"account2\" address is executed",
      "match": {
       "arguments": [
        {
         "val": "\"account1\"",
         "offset": 38
        },
        {
         "val": "\"account2\"",
         "offset": 66
        }
       ],
       "location": "transactionsSteps.SubstrateTransactionsSteps.theSubstrateTransactionIntentFromToEndpointWithAddressIsExecuted(java.lang.String,java.lang.String)"
      },
      "keyword": "When "
     },
     {
      "result": {
       "duration": 87000,
       "status": "passed"
      },
      "line": 76,
      "name": "transaction ledger status is \"Detected or Confirmed\"",
      "match": {
       "arguments": [
        {
         "val": "\"Detected or Confirmed\"",
         "offset": 29
        }
       ],
       "location": "transactionsSteps.TransactionsSteps.transactionLedgerStatusIs(java.lang.String)"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 81000,
       "status": "passed"
      },
      "line": 78,
      "name": "corresponding transfer and fee are present",
      "match": {
       "location": "transactionsSteps.TransactionsSteps.correspondingTransferAndFeeArePresent()"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 114000,
       "status": "passed"
      },
      "line": 79,
      "name": "the transfer to \"account2\" is quarantined",
      "match": {
       "arguments": [
        {
         "val": "\"account2\"",
         "offset": 16
        }
       ],
       "location": "transactionsSteps.TransactionsSteps.theTransferToIsQuarantined(java.lang.String)"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 79000,
       "status": "passed"
      },
      "line": 81,
      "name": "\"account1\" has correct balances of \"WND\" after \"outgoing\" transaction",
      "match": {
       "arguments": [
        {
         "val": "\"account1\"",
         "offset": 0
        },
        {
         "val": "\"WND\"",
         "offset": 35
        },
        {
         "val": "\"outgoing\"",
         "offset": 47
        }
       ],
       "location": "transactionsSteps.TransactionsSteps.hasCorrectBalancesAfterTransaction(java.lang.String,java.lang.String,java.lang.String)"
      },
      "keyword": "Then "
     },
     {
      "result": {
       "duration": 71000,
       "status": "passed"
      },
      "line": 82,
      "name": "\"account2\" has correct balances of \"WND\" after \"incoming\" transaction",
      "match": {
       "arguments": [
        {
         "val": "\"account2\"",
         "offset": 0
        },
        {
         "val": "\"WND\"",
         "offset": 35
        },
        {
         "val": "\"incoming\"",
         "offset": 47
        }
       ],
       "location": "transactionsSteps.TransactionsSteps.hasCorrectBalancesAfterTransaction(java.lang.String,java.lang.String,java.lang.String)"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 62000,
       "status": "passed"
      },
      "line": 84,
      "name": "release quarantined transfers to \"account2\" intent is executed",
      "match": {
       "arguments": [
        {
         "val": "\"account2\"",
         "offset": 33
        }
       ],
       "location": "transactionsSteps.TransactionsSteps.releaseQuarantinedTransfersToIntentIsExecuted(java.lang.String)"
      },
      "keyword": "When "
     },
     {
      "result": {
       "duration": 56000,
       "status": "passed"
      },
      "line": 85,
      "name": "\"account1\" has correct balances of \"WND\" after \"outgoing\" transaction",
      "match": {
       "arguments": [
        {
         "val": "\"account1\"",
         "offset": 0
        },
        {
         "val": "\"WND\"",
         "offset": 35
        },
        {
         "val": "\"outgoing\"",
         "offset": 47
        }
       ],
       "location": "transactionsSteps.TransactionsSteps.hasCorrectBalancesAfterTransaction(java.lang.String,java.lang.String,java.lang.String)"
      },
      "keyword": "Then "
     },
     {
      "result": {
       "duration": 56000,
       "status": "passed"
      },
      "line": 86,
      "name": "\"account2\" has correct balances of \"WND\" after \"incoming\" transaction",
      "match": {
       "arguments": [
        {
         "val": "\"account2\"",
         "offset": 0
        },
        {
         "val": "\"WND\"",
         "offset": 35
        },
        {
         "val": "\"incoming\"",
         "offset": 47
        }
       ],
       "location": "transactionsSteps.TransactionsSteps.hasCorrectBalancesAfterTransaction(java.lang.String,java.lang.String,java.lang.String)"
      },
      "keyword": "Then "
     },
     {
      "result": {
       "duration": 55000,
       "status": "passed"
      },
      "line": 88,
      "name": "\"WND\" funds are sent from \"account2\" to \"account1\"",
      "match": {
       "arguments": [
        {
         "val": "\"WND\"",
         "offset": 0
        },
        {
         "val": "\"account2\"",
         "offset": 26
        },
        {
         "val": "\"account1\"",
         "offset": 40
        }
       ],
       "location": "transactionsSteps.TransactionsSteps.fundsAreSentFromTo(java.lang.String,java.lang.String,java.lang.String)"
      },
      "keyword": "And "
     }
    ],
    "tags": [
     {
      "name": "@transactions-and-accounts"
     },
     {
      "name": "@transactions-and-dry-runs"
     },
     {
      "name": "@substrate-transactions"
     },
     {
      "name": "@substrate"
     },
     {
      "name": "@tr_section-substrate-transactions"
     },
     {
      "name": "@milestone-hmz-1.3"
     },
     {
      "name": "@ref-groups/silo/platform/-/epics/13"
     },
     {
      "name": "@candidate"
     },
     {
      "name": "@id-substrate-transaction-to-endpoint-with--address-keep-alive"
     }
    ]
   }
  ],
  "name": "Substrate transactions",
  "description": "",
  "id": "substrate-transactions",
  "keyword": "Feature",
  "uri": "file:src/test/resources/features/transactions_and_accounts/SubstrateTransactions.feature",
  "tags": [
   {
    "name": "@transactions-and-accounts",
    "type": "Tag",
    "location": {
     "line": 1,
     "column": 1
    }
   },
   {
    "name": "@transactions-and-dry-runs",
    "type": "Tag",
    "location": {
     "line": 2,
     "column": 1
    }
   },
   {
    "name": "@substrate-transactions",
    "type": "Tag",
    "location": {
     "line": 3,
     "column": 1
    }
   },
   {
    "name": "@substrate",
    "type": "Tag",
    "location": {
     "line": 4,
     "column": 1
    }
   },
   {
    "name": "@tr_section-substrate-transactions",
    "type": "Tag",
    "location": {
     "line": 5,
     "column": 1
    }
   }
  ]
 },
 {
  "line": 7,
  "elements": [
   {
    "line": 9,
    "name": "",
    "description": "",
    "type": "background",
    "keyword": "Background",
    "steps": [
     {
      "result": {
       "duration": 977000,
       "status": "passed"
      },
      "line": 10,
      "name": "a root domain admin user is logged in",
      "match": {
       "location": "UserSteps.aRootDomainAdminUserIsLoggedIn()"
      },
      "keyword": "Given "
     },
     {
      "result": {
       "duration": 52000,
       "status": "passed"
      },
      "line": 11,
      "name": "the current domain is a root domain",
      "match": {
       "location": "DomainSteps.theCurrentDomainIsARootDomain()"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 402347000,
       "status": "passed"
      },
      "line": 12,
      "name": "the vault is configured",
      "match": {
       "location": "VaultsSteps.theVaultIsConfigured()"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 1055609000,
       "status": "passed"
      },
      "line": 14,
      "name": "pre-conditions for \"tezos-testnet-ithaca\" accounts balances recovery are met",
      "match": {
       "arguments": [
        {
         "val": "\"tezos-testnet-ithaca\"",
         "offset": 19
        }
       ],
       "location": "AccountsSteps.preConditionsForAccountsBalancesRecoveryAreMet(java.lang.String)"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 516974000,
       "status": "passed"
      },
      "line": 15,
      "name": "all recovery transfers are released to accounts",
      "match": {
       "location": "transactionsSteps.TransactionsSteps.allRecoveryQuarantinedTransfersAreReleased()"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 513318000,
       "status": "passed"
      },
      "line": 16,
      "name": "all ongoing quarantined transfers are released to accounts",
      "match": {
       "location": "transactionsSteps.TransactionsSteps.quarantinedTransfersAreReleasedToAccounts()"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 183785000,
       "status": "passed"
      },
      "line": 17,
      "name": "all policies except default are locked",
      "match": {
       "location": "PolicySteps.allPoliciesExceptDefaultAreLocked()"
      },
      "keyword": "And "
     }
    ]
   },
   {
    "start_timestamp": "2023-01-09T16:17:14.752Z",
    "before": [
     {
      "result": {
       "duration": 52000,
       "status": "passed"
      },
      "match": {
       "location": "PolicySteps.before(io.cucumber.java.Scenario)"
      }
     },
     {
      "result": {
       "duration": 1265227000,
       "status": "passed"
      },
      "match": {
       "location": "Hooks.beforeScenario()"
      }
     }
    ],
    "line": 75,
    "name": "Tezos report demo transaction test 1",
    "description": "",
    "id": "demo-1-tezos-transactions;tezos-transaction-to-endpoint-destination",
    "after": [
     {
      "result": {
       "duration": 321000,
       "status": "passed"
      },
      "match": {
       "location": "Hooks.afterScenario()"
      }
     }
    ],
    "type": "scenario",
    "keyword": "Scenario",
    "steps": [
     {
      "result": {
       "duration": 681594000,
       "status": "passed"
      },
      "line": 76,
      "name": "we have two recovered \"tezos-testnet-ithaca\" accounts",
      "match": {
       "arguments": [
        {
         "val": "\"tezos-testnet-ithaca\"",
         "offset": 22
        }
       ],
       "location": "AccountsSteps.weHaveTwoRecoveredAccounts(java.lang.String)"
      },
      "keyword": "Given "
     },
     {
      "result": {
       "duration": 1865225000,
       "status": "passed"
      },
      "line": 77,
      "name": "\"account1\" and \"account2\" have enough of \"tXTZ\" on the balance for native transfer with funds return",
      "match": {
       "arguments": [
        {
         "val": "\"account1\"",
         "offset": 0
        },
        {
         "val": "\"account2\"",
         "offset": 15
        },
        {
         "val": "\"tXTZ\"",
         "offset": 41
        }
       ],
       "location": "AccountsSteps.andHaveEnoughOfForTransactionWithFundsReturn(java.lang.String,java.lang.String,java.lang.String)"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 306526000,
       "status": "passed"
      },
      "line": 79,
      "name": "dry run of tezos transaction from \"account1\" to address of \"account2\" is executed with the default maximumFee",
      "match": {
       "arguments": [
        {
         "val": "\"account1\"",
         "offset": 34
        },
        {
         "val": "\"account2\"",
         "offset": 59
        }
       ],
       "location": "transactionsSteps.TezosTransactionsSteps.dryRunOfTezosTransactionFromStringToAddressOfStringIsExecutedWithTheDefaultMaximumFee(java.lang.String,java.lang.String)"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 297000,
       "status": "passed"
      },
      "line": 80,
      "name": "dry run result is success",
      "match": {
       "location": "transactionsSteps.TransactionsSteps.dryRunResultIsSuccess()"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 1177677000,
       "status": "passed"
      },
      "line": 82,
      "name": "endpoint using \"account2\" address is created",
      "match": {
       "arguments": [
        {
         "val": "\"account2\"",
         "offset": 15
        }
       ],
       "location": "EndpointsSteps.endpointUsingAddressIsCreated(java.lang.String)"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 1428425000,
       "status": "passed"
      },
      "line": 84,
      "name": "the tezos transaction intent from \"account1\" to endpoint with \"account2\" address is executed",
      "match": {
       "arguments": [
        {
         "val": "\"account1\"",
         "offset": 34
        },
        {
         "val": "\"account2\"",
         "offset": 62
        }
       ],
       "location": "transactionsSteps.TezosTransactionsSteps.theTezosTransactionIntentFromToEndpointWithAddressIsExecuted(java.lang.String,java.lang.String)"
      },
      "keyword": "When "
     },
     {
      "result": {
       "duration": 17206273000,
       "status": "passed"
      },
      "line": 85,
      "name": "transaction ledger status is \"Detected or Confirmed\"",
      "match": {
       "arguments": [
        {
         "val": "\"Detected or Confirmed\"",
         "offset": 29
        }
       ],
       "location": "transactionsSteps.TransactionsSteps.transactionLedgerStatusIs(java.lang.String)"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 448195000,
       "status": "passed"
      },
      "line": 87,
      "name": "corresponding transfer and fee are present",
      "match": {
       "location": "transactionsSteps.TransactionsSteps.correspondingTransferAndFeeArePresent()"
      },
      "keyword": "Then "
     },
     {
      "result": {
       "duration": 213884000,
       "status": "passed"
      },
      "line": 88,
      "name": "the transfer to \"account2\" is quarantined",
      "match": {
       "arguments": [
        {
         "val": "\"account2\"",
         "offset": 16
        }
       ],
       "location": "transactionsSteps.TransactionsSteps.theTransferToIsQuarantined(java.lang.String)"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 177038000,
       "status": "passed"
      },
      "line": 89,
      "name": "the transfer to \"account2\" is quarantined",
      "match": {
       "arguments": [
        {
         "val": "\"account2\"",
         "offset": 16
        }
       ],
       "location": "transactionsSteps.TransactionsSteps.theTransferToIsQuarantined(java.lang.String)"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 2151148000,
       "status": "passed"
      },
      "line": 91,
      "name": "\"account1\" has correct balances of \"tXTZ\" after \"outgoing\" transaction",
      "match": {
       "arguments": [
        {
         "val": "\"account1\"",
         "offset": 0
        },
        {
         "val": "\"tXTZ\"",
         "offset": 35
        },
        {
         "val": "\"outgoing\"",
         "offset": 48
        }
       ],
       "location": "transactionsSteps.TransactionsSteps.hasCorrectBalancesAfterTransaction(java.lang.String,java.lang.String,java.lang.String)"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 1614314000,
       "status": "passed"
      },
      "line": 92,
      "name": "\"account2\" has correct balances of \"tXTZ\" after \"incoming\" transaction",
      "match": {
       "arguments": [
        {
         "val": "\"account2\"",
         "offset": 0
        },
        {
         "val": "\"tXTZ\"",
         "offset": 35
        },
        {
         "val": "\"incoming\"",
         "offset": 48
        }
       ],
       "location": "transactionsSteps.TransactionsSteps.hasCorrectBalancesAfterTransaction(java.lang.String,java.lang.String,java.lang.String)"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 802365000,
       "status": "passed"
      },
      "line": 94,
      "name": "release quarantined transfers to \"account2\" intent is executed",
      "match": {
       "arguments": [
        {
         "val": "\"account2\"",
         "offset": 33
        }
       ],
       "location": "transactionsSteps.TransactionsSteps.releaseQuarantinedTransfersToIntentIsExecuted(java.lang.String)"
      },
      "keyword": "When "
     },
     {
      "result": {
       "duration": 2114373000,
       "status": "passed"
      },
      "line": 95,
      "name": "\"account1\" has correct balances of \"tXTZ\" after \"outgoing\" transaction",
      "match": {
       "arguments": [
        {
         "val": "\"account1\"",
         "offset": 0
        },
        {
         "val": "\"tXTZ\"",
         "offset": 35
        },
        {
         "val": "\"outgoing\"",
         "offset": 48
        }
       ],
       "location": "transactionsSteps.TransactionsSteps.hasCorrectBalancesAfterTransaction(java.lang.String,java.lang.String,java.lang.String)"
      },
      "keyword": "Then "
     },
     {
      "result": {
       "duration": 2401341000,
       "status": "passed"
      },
      "line": 96,
      "name": "\"account2\" has correct balances of \"tXTZ\" after \"incoming\" transaction",
      "match": {
       "arguments": [
        {
         "val": "\"account2\"",
         "offset": 0
        },
        {
         "val": "\"tXTZ\"",
         "offset": 35
        },
        {
         "val": "\"incoming\"",
         "offset": 48
        }
       ],
       "location": "transactionsSteps.TransactionsSteps.hasCorrectBalancesAfterTransaction(java.lang.String,java.lang.String,java.lang.String)"
      },
      "keyword": "Then "
     },
     {
      "result": {
       "duration": 15939633000,
       "status": "passed"
      },
      "line": 98,
      "name": "\"tXTZ\" funds are sent from \"account2\" to \"account1\"",
      "match": {
       "arguments": [
        {
         "val": "\"tXTZ\"",
         "offset": 0
        },
        {
         "val": "\"account2\"",
         "offset": 27
        },
        {
         "val": "\"account1\"",
         "offset": 41
        }
       ],
       "location": "transactionsSteps.TransactionsSteps.fundsAreSentFromTo(java.lang.String,java.lang.String,java.lang.String)"
      },
      "keyword": "And "
     }
    ],
    "tags": [
     {
      "name": "@transactions-and-accounts"
     },
     {
      "name": "@transactions-and-dry-runs"
     },
     {
      "name": "@tezos-transactions"
     },
     {
      "name": "@tezos"
     },
     {
      "name": "@tr_section-tezos-transactions"
     },
     {
      "name": "@milestone-hmz-1.3"
     },
     {
      "name": "@ref-groups/silo/platform/-/epics/21"
     },
     {
      "name": "@candidate"
     },
     {
      "name": "@id-tezos-transaction-to-endpoint-destination"
     }
    ]
   },
   {
    "start_timestamp": "2023-01-09T16:17:14.752Z",
    "before": [
     {
      "result": {
       "duration": 52000,
       "status": "passed"
      },
      "match": {
       "location": "PolicySteps.before(io.cucumber.java.Scenario)"
      }
     },
     {
      "result": {
       "duration": 1265227000,
       "status": "passed"
      },
      "match": {
       "location": "Hooks.beforeScenario()"
      }
     }
    ],
    "line": 75,
    "name": "Tezos report demo transaction test 2",
    "description": "",
    "id": "demo-2-tezos-transactions;tezos-transaction-to-endpoint-destination",
    "after": [
     {
      "result": {
       "duration": 321000,
       "status": "passed"
      },
      "match": {
       "location": "Hooks.afterScenario()"
      }
     }
    ],
    "type": "scenario",
    "keyword": "Scenario",
    "steps": [
     {
      "result": {
       "duration": 681594000,
       "status": "passed"
      },
      "line": 76,
      "name": "we have two recovered \"tezos-testnet-ithaca\" accounts",
      "match": {
       "arguments": [
        {
         "val": "\"tezos-testnet-ithaca\"",
         "offset": 22
        }
       ],
       "location": "AccountsSteps.weHaveTwoRecoveredAccounts(java.lang.String)"
      },
      "keyword": "Given "
     },
     {
      "result": {
       "duration": 1865225000,
       "status": "passed"
      },
      "line": 77,
      "name": "\"account1\" and \"account2\" have enough of \"tXTZ\" on the balance for native transfer with funds return",
      "match": {
       "arguments": [
        {
         "val": "\"account1\"",
         "offset": 0
        },
        {
         "val": "\"account2\"",
         "offset": 15
        },
        {
         "val": "\"tXTZ\"",
         "offset": 41
        }
       ],
       "location": "AccountsSteps.andHaveEnoughOfForTransactionWithFundsReturn(java.lang.String,java.lang.String,java.lang.String)"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 306526000,
       "status": "passed"
      },
      "line": 79,
      "name": "dry run of tezos transaction from \"account1\" to address of \"account2\" is executed with the default maximumFee",
      "match": {
       "arguments": [
        {
         "val": "\"account1\"",
         "offset": 34
        },
        {
         "val": "\"account2\"",
         "offset": 59
        }
       ],
       "location": "transactionsSteps.TezosTransactionsSteps.dryRunOfTezosTransactionFromStringToAddressOfStringIsExecutedWithTheDefaultMaximumFee(java.lang.String,java.lang.String)"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 297000,
       "status": "passed"
      },
      "line": 80,
      "name": "dry run result is success",
      "match": {
       "location": "transactionsSteps.TransactionsSteps.dryRunResultIsSuccess()"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 1177677000,
       "status": "passed"
      },
      "line": 82,
      "name": "endpoint using \"account2\" address is created",
      "match": {
       "arguments": [
        {
         "val": "\"account2\"",
         "offset": 15
        }
       ],
       "location": "EndpointsSteps.endpointUsingAddressIsCreated(java.lang.String)"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 1428425000,
       "status": "passed"
      },
      "line": 84,
      "name": "the tezos transaction intent from \"account1\" to endpoint with \"account2\" address is executed",
      "match": {
       "arguments": [
        {
         "val": "\"account1\"",
         "offset": 34
        },
        {
         "val": "\"account2\"",
         "offset": 62
        }
       ],
       "location": "transactionsSteps.TezosTransactionsSteps.theTezosTransactionIntentFromToEndpointWithAddressIsExecuted(java.lang.String,java.lang.String)"
      },
      "keyword": "When "
     },
     {
      "result": {
       "duration": 17206273000,
       "status": "passed"
      },
      "line": 85,
      "name": "transaction ledger status is \"Detected or Confirmed\"",
      "match": {
       "arguments": [
        {
         "val": "\"Detected or Confirmed\"",
         "offset": 29
        }
       ],
       "location": "transactionsSteps.TransactionsSteps.transactionLedgerStatusIs(java.lang.String)"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 448195000,
       "status": "passed"
      },
      "line": 87,
      "name": "corresponding transfer and fee are present",
      "match": {
       "location": "transactionsSteps.TransactionsSteps.correspondingTransferAndFeeArePresent()"
      },
      "keyword": "Then "
     },
     {
      "result": {
       "duration": 213884000,
       "status": "passed"
      },
      "line": 88,
      "name": "the transfer to \"account2\" is quarantined",
      "match": {
       "arguments": [
        {
         "val": "\"account2\"",
         "offset": 16
        }
       ],
       "location": "transactionsSteps.TransactionsSteps.theTransferToIsQuarantined(java.lang.String)"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 177038000,
       "status": "passed"
      },
      "line": 89,
      "name": "the transfer to \"account2\" is quarantined",
      "match": {
       "arguments": [
        {
         "val": "\"account2\"",
         "offset": 16
        }
       ],
       "location": "transactionsSteps.TransactionsSteps.theTransferToIsQuarantined(java.lang.String)"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 2151148000,
       "status": "passed"
      },
      "line": 91,
      "name": "\"account1\" has correct balances of \"tXTZ\" after \"outgoing\" transaction",
      "match": {
       "arguments": [
        {
         "val": "\"account1\"",
         "offset": 0
        },
        {
         "val": "\"tXTZ\"",
         "offset": 35
        },
        {
         "val": "\"outgoing\"",
         "offset": 48
        }
       ],
       "location": "transactionsSteps.TransactionsSteps.hasCorrectBalancesAfterTransaction(java.lang.String,java.lang.String,java.lang.String)"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 1614314000,
       "status": "passed"
      },
      "line": 92,
      "name": "\"account2\" has correct balances of \"tXTZ\" after \"incoming\" transaction",
      "match": {
       "arguments": [
        {
         "val": "\"account2\"",
         "offset": 0
        },
        {
         "val": "\"tXTZ\"",
         "offset": 35
        },
        {
         "val": "\"incoming\"",
         "offset": 48
        }
       ],
       "location": "transactionsSteps.TransactionsSteps.hasCorrectBalancesAfterTransaction(java.lang.String,java.lang.String,java.lang.String)"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 802365000,
       "status": "passed"
      },
      "line": 94,
      "name": "release quarantined transfers to \"account2\" intent is executed",
      "match": {
       "arguments": [
        {
         "val": "\"account2\"",
         "offset": 33
        }
       ],
       "location": "transactionsSteps.TransactionsSteps.releaseQuarantinedTransfersToIntentIsExecuted(java.lang.String)"
      },
      "keyword": "When "
     },
     {
      "result": {
       "duration": 2114373000,
       "status": "passed"
      },
      "line": 95,
      "name": "\"account1\" has correct balances of \"tXTZ\" after \"outgoing\" transaction",
      "match": {
       "arguments": [
        {
         "val": "\"account1\"",
         "offset": 0
        },
        {
         "val": "\"tXTZ\"",
         "offset": 35
        },
        {
         "val": "\"outgoing\"",
         "offset": 48
        }
       ],
       "location": "transactionsSteps.TransactionsSteps.hasCorrectBalancesAfterTransaction(java.lang.String,java.lang.String,java.lang.String)"
      },
      "keyword": "Then "
     },
     {
      "result": {
       "duration": 2401341000,
       "status": "passed"
      },
      "line": 96,
      "name": "\"account2\" has correct balances of \"tXTZ\" after \"incoming\" transaction",
      "match": {
       "arguments": [
        {
         "val": "\"account2\"",
         "offset": 0
        },
        {
         "val": "\"tXTZ\"",
         "offset": 35
        },
        {
         "val": "\"incoming\"",
         "offset": 48
        }
       ],
       "location": "transactionsSteps.TransactionsSteps.hasCorrectBalancesAfterTransaction(java.lang.String,java.lang.String,java.lang.String)"
      },
      "keyword": "Then "
     },
     {
      "result": {
       "duration": 15939633000,
       "status": "passed"
      },
      "line": 98,
      "name": "\"tXTZ\" funds are sent from \"account2\" to \"account1\"",
      "match": {
       "arguments": [
        {
         "val": "\"tXTZ\"",
         "offset": 0
        },
        {
         "val": "\"account2\"",
         "offset": 27
        },
        {
         "val": "\"account1\"",
         "offset": 41
        }
       ],
       "location": "transactionsSteps.TransactionsSteps.fundsAreSentFromTo(java.lang.String,java.lang.String,java.lang.String)"
      },
      "keyword": "And "
     }
    ],
    "tags": [
     {
      "name": "@transactions-and-accounts"
     },
     {
      "name": "@transactions-and-dry-runs"
     },
     {
      "name": "@tezos-transactions"
     },
     {
      "name": "@tezos"
     },
     {
      "name": "@tr_section-tezos-transactions"
     },
     {
      "name": "@milestone-hmz-1.3"
     },
     {
      "name": "@ref-groups/silo/platform/-/epics/21"
     },
     {
      "name": "@candidate"
     },
     {
      "name": "@id-tezos-transaction-to-endpoint-destination"
     }
    ]
   },
   {
    "start_timestamp": "2023-01-09T16:17:14.752Z",
    "before": [
     {
      "result": {
       "duration": 52000,
       "status": "passed"
      },
      "match": {
       "location": "PolicySteps.before(io.cucumber.java.Scenario)"
      }
     },
     {
      "result": {
       "duration": 1265227000,
       "status": "passed"
      },
      "match": {
       "location": "Hooks.beforeScenario()"
      }
     }
    ],
    "line": 75,
    "name": "Tezos report demo transaction test 3",
    "description": "",
    "id": "demo-3-tezos-transactions;tezos-transaction-to-endpoint-destination",
    "after": [
     {
      "result": {
       "duration": 321000,
       "status": "passed"
      },
      "match": {
       "location": "Hooks.afterScenario()"
      }
     }
    ],
    "type": "scenario",
    "keyword": "Scenario",
    "steps": [
     {
      "result": {
       "duration": 681594000,
       "status": "passed"
      },
      "line": 76,
      "name": "we have two recovered \"tezos-testnet-ithaca\" accounts",
      "match": {
       "arguments": [
        {
         "val": "\"tezos-testnet-ithaca\"",
         "offset": 22
        }
       ],
       "location": "AccountsSteps.weHaveTwoRecoveredAccounts(java.lang.String)"
      },
      "keyword": "Given "
     },
     {
      "result": {
       "duration": 1865225000,
       "status": "passed"
      },
      "line": 77,
      "name": "\"account1\" and \"account2\" have enough of \"tXTZ\" on the balance for native transfer with funds return",
      "match": {
       "arguments": [
        {
         "val": "\"account1\"",
         "offset": 0
        },
        {
         "val": "\"account2\"",
         "offset": 15
        },
        {
         "val": "\"tXTZ\"",
         "offset": 41
        }
       ],
       "location": "AccountsSteps.andHaveEnoughOfForTransactionWithFundsReturn(java.lang.String,java.lang.String,java.lang.String)"
      },
      "keyword": "And "
     },
     {
      "result": {
       "error_message": "org.junit.AssumptionViolatedException: assumption error details\n",
       "duration": 306526000,
       "status": "skipped"
      },
      "line": 79,
      "name": "dry run of tezos transaction from \"account1\" to address of \"account2\" is executed with the default maximumFee",
      "match": {
       "arguments": [
        {
         "val": "\"account1\"",
         "offset": 34
        },
        {
         "val": "\"account2\"",
         "offset": 59
        }
       ],
       "location": "transactionsSteps.TezosTransactionsSteps.dryRunOfTezosTransactionFromStringToAddressOfStringIsExecutedWithTheDefaultMaximumFee(java.lang.String,java.lang.String)"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 297000,
       "status": "skipped"
      },
      "line": 80,
      "name": "dry run result is success",
      "match": {
       "location": "transactionsSteps.TransactionsSteps.dryRunResultIsSuccess()"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 1177677000,
       "status": "skipped"
      },
      "line": 82,
      "name": "endpoint using \"account2\" address is created",
      "match": {
       "arguments": [
        {
         "val": "\"account2\"",
         "offset": 15
        }
       ],
       "location": "EndpointsSteps.endpointUsingAddressIsCreated(java.lang.String)"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 1428425000,
       "status": "skipped"
      },
      "line": 84,
      "name": "the tezos transaction intent from \"account1\" to endpoint with \"account2\" address is executed",
      "match": {
       "arguments": [
        {
         "val": "\"account1\"",
         "offset": 34
        },
        {
         "val": "\"account2\"",
         "offset": 62
        }
       ],
       "location": "transactionsSteps.TezosTransactionsSteps.theTezosTransactionIntentFromToEndpointWithAddressIsExecuted(java.lang.String,java.lang.String)"
      },
      "keyword": "When "
     },
     {
      "result": {
       "duration": 17206273000,
       "status": "skipped"
      },
      "line": 85,
      "name": "transaction ledger status is \"Detected or Confirmed\"",
      "match": {
       "arguments": [
        {
         "val": "\"Detected or Confirmed\"",
         "offset": 29
        }
       ],
       "location": "transactionsSteps.TransactionsSteps.transactionLedgerStatusIs(java.lang.String)"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 448195000,
       "status": "skipped"
      },
      "line": 87,
      "name": "corresponding transfer and fee are present",
      "match": {
       "location": "transactionsSteps.TransactionsSteps.correspondingTransferAndFeeArePresent()"
      },
      "keyword": "Then "
     },
     {
      "result": {
       "duration": 213884000,
       "status": "skipped"
      },
      "line": 88,
      "name": "the transfer to \"account2\" is quarantined",
      "match": {
       "arguments": [
        {
         "val": "\"account2\"",
         "offset": 16
        }
       ],
       "location": "transactionsSteps.TransactionsSteps.theTransferToIsQuarantined(java.lang.String)"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 177038000,
       "status": "skipped"
      },
      "line": 89,
      "name": "the transfer to \"account2\" is quarantined",
      "match": {
       "arguments": [
        {
         "val": "\"account2\"",
         "offset": 16
        }
       ],
       "location": "transactionsSteps.TransactionsSteps.theTransferToIsQuarantined(java.lang.String)"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 2151148000,
       "status": "skipped"
      },
      "line": 91,
      "name": "\"account1\" has correct balances of \"tXTZ\" after \"outgoing\" transaction",
      "match": {
       "arguments": [
        {
         "val": "\"account1\"",
         "offset": 0
        },
        {
         "val": "\"tXTZ\"",
         "offset": 35
        },
        {
         "val": "\"outgoing\"",
         "offset": 48
        }
       ],
       "location": "transactionsSteps.TransactionsSteps.hasCorrectBalancesAfterTransaction(java.lang.String,java.lang.String,java.lang.String)"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 1614314000,
       "status": "skipped"
      },
      "line": 92,
      "name": "\"account2\" has correct balances of \"tXTZ\" after \"incoming\" transaction",
      "match": {
       "arguments": [
        {
         "val": "\"account2\"",
         "offset": 0
        },
        {
         "val": "\"tXTZ\"",
         "offset": 35
        },
        {
         "val": "\"incoming\"",
         "offset": 48
        }
       ],
       "location": "transactionsSteps.TransactionsSteps.hasCorrectBalancesAfterTransaction(java.lang.String,java.lang.String,java.lang.String)"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 802365000,
       "status": "skipped"
      },
      "line": 94,
      "name": "release quarantined transfers to \"account2\" intent is executed",
      "match": {
       "arguments": [
        {
         "val": "\"account2\"",
         "offset": 33
        }
       ],
       "location": "transactionsSteps.TransactionsSteps.releaseQuarantinedTransfersToIntentIsExecuted(java.lang.String)"
      },
      "keyword": "When "
     },
     {
      "result": {
       "duration": 2114373000,
       "status": "skipped"
      },
      "line": 95,
      "name": "\"account1\" has correct balances of \"tXTZ\" after \"outgoing\" transaction",
      "match": {
       "arguments": [
        {
         "val": "\"account1\"",
         "offset": 0
        },
        {
         "val": "\"tXTZ\"",
         "offset": 35
        },
        {
         "val": "\"outgoing\"",
         "offset": 48
        }
       ],
       "location": "transactionsSteps.TransactionsSteps.hasCorrectBalancesAfterTransaction(java.lang.String,java.lang.String,java.lang.String)"
      },
      "keyword": "Then "
     },
     {
      "result": {
       "duration": 2401341000,
       "status": "skipped"
      },
      "line": 96,
      "name": "\"account2\" has correct balances of \"tXTZ\" after \"incoming\" transaction",
      "match": {
       "arguments": [
        {
         "val": "\"account2\"",
         "offset": 0
        },
        {
         "val": "\"tXTZ\"",
         "offset": 35
        },
        {
         "val": "\"incoming\"",
         "offset": 48
        }
       ],
       "location": "transactionsSteps.TransactionsSteps.hasCorrectBalancesAfterTransaction(java.lang.String,java.lang.String,java.lang.String)"
      },
      "keyword": "Then "
     },
     {
      "result": {
       "duration": 15939633000,
       "status": "skipped"
      },
      "line": 98,
      "name": "\"tXTZ\" funds are sent from \"account2\" to \"account1\"",
      "match": {
       "arguments": [
        {
         "val": "\"tXTZ\"",
         "offset": 0
        },
        {
         "val": "\"account2\"",
         "offset": 27
        },
        {
         "val": "\"account1\"",
         "offset": 41
        }
       ],
       "location": "transactionsSteps.TransactionsSteps.fundsAreSentFromTo(java.lang.String,java.lang.String,java.lang.String)"
      },
      "keyword": "And "
     }
    ],
    "tags": [
     {
      "name": "@transactions-and-accounts"
     },
     {
      "name": "@transactions-and-dry-runs"
     },
     {
      "name": "@tezos-transactions"
     },
     {
      "name": "@tezos"
     },
     {
      "name": "@tr_section-tezos-transactions"
     },
     {
      "name": "@milestone-hmz-1.3"
     },
     {
      "name": "@ref-groups/silo/platform/-/epics/21"
     },
     {
      "name": "@candidate"
     },
     {
      "name": "@id-tezos-transaction-to-endpoint-destination"
     }
    ]
   },
   {
    "start_timestamp": "2023-01-09T16:17:14.752Z",
    "before": [
     {
      "result": {
       "duration": 52000,
       "status": "passed"
      },
      "match": {
       "location": "PolicySteps.before(io.cucumber.java.Scenario)"
      }
     },
     {
      "result": {
       "duration": 1265227000,
       "status": "passed"
      },
      "match": {
       "location": "Hooks.beforeScenario()"
      }
     }
    ],
    "line": 75,
    "name": "Tezos report demo transaction test 4",
    "description": "",
    "id": "demo-4-tezos-transactions;tezos-transaction-to-endpoint-destination",
    "after": [
     {
      "result": {
       "duration": 321000,
       "status": "passed"
      },
      "match": {
       "location": "Hooks.afterScenario()"
      }
     }
    ],
    "type": "scenario",
    "keyword": "Scenario",
    "steps": [
     {
      "result": {
       "duration": 681594000,
       "status": "passed"
      },
      "line": 76,
      "name": "we have two recovered \"tezos-testnet-ithaca\" accounts",
      "match": {
       "arguments": [
        {
         "val": "\"tezos-testnet-ithaca\"",
         "offset": 22
        }
       ],
       "location": "AccountsSteps.weHaveTwoRecoveredAccounts(java.lang.String)"
      },
      "keyword": "Given "
     },
     {
      "result": {
       "duration": 1865225000,
       "status": "passed"
      },
      "line": 77,
      "name": "\"account1\" and \"account2\" have enough of \"tXTZ\" on the balance for native transfer with funds return",
      "match": {
       "arguments": [
        {
         "val": "\"account1\"",
         "offset": 0
        },
        {
         "val": "\"account2\"",
         "offset": 15
        },
        {
         "val": "\"tXTZ\"",
         "offset": 41
        }
       ],
       "location": "AccountsSteps.andHaveEnoughOfForTransactionWithFundsReturn(java.lang.String,java.lang.String,java.lang.String)"
      },
      "keyword": "And "
     },
     {
      "result": {
       "error_message": "org.junit.AssumptionViolatedException: assumption error details\n",
       "duration": 306526000,
       "status": "skipped"
      },
      "line": 79,
      "name": "dry run of tezos transaction from \"account1\" to address of \"account2\" is executed with the default maximumFee",
      "match": {
       "arguments": [
        {
         "val": "\"account1\"",
         "offset": 34
        },
        {
         "val": "\"account2\"",
         "offset": 59
        }
       ],
       "location": "transactionsSteps.TezosTransactionsSteps.dryRunOfTezosTransactionFromStringToAddressOfStringIsExecutedWithTheDefaultMaximumFee(java.lang.String,java.lang.String)"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 297000,
       "status": "skipped"
      },
      "line": 80,
      "name": "dry run result is success",
      "match": {
       "location": "transactionsSteps.TransactionsSteps.dryRunResultIsSuccess()"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 1177677000,
       "status": "skipped"
      },
      "line": 82,
      "name": "endpoint using \"account2\" address is created",
      "match": {
       "arguments": [
        {
         "val": "\"account2\"",
         "offset": 15
        }
       ],
       "location": "EndpointsSteps.endpointUsingAddressIsCreated(java.lang.String)"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 1428425000,
       "status": "skipped"
      },
      "line": 84,
      "name": "the tezos transaction intent from \"account1\" to endpoint with \"account2\" address is executed",
      "match": {
       "arguments": [
        {
         "val": "\"account1\"",
         "offset": 34
        },
        {
         "val": "\"account2\"",
         "offset": 62
        }
       ],
       "location": "transactionsSteps.TezosTransactionsSteps.theTezosTransactionIntentFromToEndpointWithAddressIsExecuted(java.lang.String,java.lang.String)"
      },
      "keyword": "When "
     },
     {
      "result": {
       "duration": 17206273000,
       "status": "skipped"
      },
      "line": 85,
      "name": "transaction ledger status is \"Detected or Confirmed\"",
      "match": {
       "arguments": [
        {
         "val": "\"Detected or Confirmed\"",
         "offset": 29
        }
       ],
       "location": "transactionsSteps.TransactionsSteps.transactionLedgerStatusIs(java.lang.String)"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 448195000,
       "status": "skipped"
      },
      "line": 87,
      "name": "corresponding transfer and fee are present",
      "match": {
       "location": "transactionsSteps.TransactionsSteps.correspondingTransferAndFeeArePresent()"
      },
      "keyword": "Then "
     },
     {
      "result": {
       "duration": 213884000,
       "status": "skipped"
      },
      "line": 88,
      "name": "the transfer to \"account2\" is quarantined",
      "match": {
       "arguments": [
        {
         "val": "\"account2\"",
         "offset": 16
        }
       ],
       "location": "transactionsSteps.TransactionsSteps.theTransferToIsQuarantined(java.lang.String)"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 177038000,
       "status": "skipped"
      },
      "line": 89,
      "name": "the transfer to \"account2\" is quarantined",
      "match": {
       "arguments": [
        {
         "val": "\"account2\"",
         "offset": 16
        }
       ],
       "location": "transactionsSteps.TransactionsSteps.theTransferToIsQuarantined(java.lang.String)"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 2151148000,
       "status": "skipped"
      },
      "line": 91,
      "name": "\"account1\" has correct balances of \"tXTZ\" after \"outgoing\" transaction",
      "match": {
       "arguments": [
        {
         "val": "\"account1\"",
         "offset": 0
        },
        {
         "val": "\"tXTZ\"",
         "offset": 35
        },
        {
         "val": "\"outgoing\"",
         "offset": 48
        }
       ],
       "location": "transactionsSteps.TransactionsSteps.hasCorrectBalancesAfterTransaction(java.lang.String,java.lang.String,java.lang.String)"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 1614314000,
       "status": "skipped"
      },
      "line": 92,
      "name": "\"account2\" has correct balances of \"tXTZ\" after \"incoming\" transaction",
      "match": {
       "arguments": [
        {
         "val": "\"account2\"",
         "offset": 0
        },
        {
         "val": "\"tXTZ\"",
         "offset": 35
        },
        {
         "val": "\"incoming\"",
         "offset": 48
        }
       ],
       "location": "transactionsSteps.TransactionsSteps.hasCorrectBalancesAfterTransaction(java.lang.String,java.lang.String,java.lang.String)"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 802365000,
       "status": "skipped"
      },
      "line": 94,
      "name": "release quarantined transfers to \"account2\" intent is executed",
      "match": {
       "arguments": [
        {
         "val": "\"account2\"",
         "offset": 33
        }
       ],
       "location": "transactionsSteps.TransactionsSteps.releaseQuarantinedTransfersToIntentIsExecuted(java.lang.String)"
      },
      "keyword": "When "
     },
     {
      "result": {
       "duration": 2114373000,
       "status": "skipped"
      },
      "line": 95,
      "name": "\"account1\" has correct balances of \"tXTZ\" after \"outgoing\" transaction",
      "match": {
       "arguments": [
        {
         "val": "\"account1\"",
         "offset": 0
        },
        {
         "val": "\"tXTZ\"",
         "offset": 35
        },
        {
         "val": "\"outgoing\"",
         "offset": 48
        }
       ],
       "location": "transactionsSteps.TransactionsSteps.hasCorrectBalancesAfterTransaction(java.lang.String,java.lang.String,java.lang.String)"
      },
      "keyword": "Then "
     },
     {
      "result": {
       "duration": 2401341000,
       "status": "skipped"
      },
      "line": 96,
      "name": "\"account2\" has correct balances of \"tXTZ\" after \"incoming\" transaction",
      "match": {
       "arguments": [
        {
         "val": "\"account2\"",
         "offset": 0
        },
        {
         "val": "\"tXTZ\"",
         "offset": 35
        },
        {
         "val": "\"incoming\"",
         "offset": 48
        }
       ],
       "location": "transactionsSteps.TransactionsSteps.hasCorrectBalancesAfterTransaction(java.lang.String,java.lang.String,java.lang.String)"
      },
      "keyword": "Then "
     },
     {
      "result": {
       "duration": 15939633000,
       "status": "skipped"
      },
      "line": 98,
      "name": "\"tXTZ\" funds are sent from \"account2\" to \"account1\"",
      "match": {
       "arguments": [
        {
         "val": "\"tXTZ\"",
         "offset": 0
        },
        {
         "val": "\"account2\"",
         "offset": 27
        },
        {
         "val": "\"account1\"",
         "offset": 41
        }
       ],
       "location": "transactionsSteps.TransactionsSteps.fundsAreSentFromTo(java.lang.String,java.lang.String,java.lang.String)"
      },
      "keyword": "And "
     }
    ],
    "tags": [
     {
      "name": "@transactions-and-accounts"
     },
     {
      "name": "@transactions-and-dry-runs"
     },
     {
      "name": "@tezos-transactions"
     },
     {
      "name": "@tezos"
     },
     {
      "name": "@tr_section-tezos-transactions"
     },
     {
      "name": "@milestone-hmz-1.3"
     },
     {
      "name": "@ref-groups/silo/platform/-/epics/21"
     },
     {
      "name": "@candidate"
     },
     {
      "name": "@id-tezos-transaction-to-endpoint-destination"
     }
    ]
   },
   {
    "start_timestamp": "2023-01-09T16:17:14.752Z",
    "before": [
     {
      "result": {
       "duration": 52000,
       "status": "passed"
      },
      "match": {
       "location": "PolicySteps.before(io.cucumber.java.Scenario)"
      }
     },
     {
      "result": {
       "duration": 1265227000,
       "status": "passed"
      },
      "match": {
       "location": "Hooks.beforeScenario()"
      }
     }
    ],
    "line": 75,
    "name": "Tezos report demo transaction test 5",
    "description": "",
    "id": "demo-5-tezos-transactions;tezos-transaction-to-endpoint-destination",
    "after": [
     {
      "result": {
       "duration": 321000,
       "status": "passed"
      },
      "match": {
       "location": "Hooks.afterScenario()"
      }
     }
    ],
    "type": "scenario",
    "keyword": "Scenario",
    "steps": [
     {
      "result": {
       "duration": 681594000,
       "status": "passed"
      },
      "line": 76,
      "name": "we have two recovered \"tezos-testnet-ithaca\" accounts",
      "match": {
       "arguments": [
        {
         "val": "\"tezos-testnet-ithaca\"",
         "offset": 22
        }
       ],
       "location": "AccountsSteps.weHaveTwoRecoveredAccounts(java.lang.String)"
      },
      "keyword": "Given "
     },
     {
      "result": {
       "duration": 1865225000,
       "status": "passed"
      },
      "line": 77,
      "name": "\"account1\" and \"account2\" have enough of \"tXTZ\" on the balance for native transfer with funds return",
      "match": {
       "arguments": [
        {
         "val": "\"account1\"",
         "offset": 0
        },
        {
         "val": "\"account2\"",
         "offset": 15
        },
        {
         "val": "\"tXTZ\"",
         "offset": 41
        }
       ],
       "location": "AccountsSteps.andHaveEnoughOfForTransactionWithFundsReturn(java.lang.String,java.lang.String,java.lang.String)"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 306526000,
       "status": "passed"
      },
      "line": 79,
      "name": "dry run of tezos transaction from \"account1\" to address of \"account2\" is executed with the default maximumFee",
      "match": {
       "arguments": [
        {
         "val": "\"account1\"",
         "offset": 34
        },
        {
         "val": "\"account2\"",
         "offset": 59
        }
       ],
       "location": "transactionsSteps.TezosTransactionsSteps.dryRunOfTezosTransactionFromStringToAddressOfStringIsExecutedWithTheDefaultMaximumFee(java.lang.String,java.lang.String)"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 297000,
       "status": "passed"
      },
      "line": 80,
      "name": "dry run result is success",
      "match": {
       "location": "transactionsSteps.TransactionsSteps.dryRunResultIsSuccess()"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 1177677000,
       "status": "passed"
      },
      "line": 82,
      "name": "endpoint using \"account2\" address is created",
      "match": {
       "arguments": [
        {
         "val": "\"account2\"",
         "offset": 15
        }
       ],
       "location": "EndpointsSteps.endpointUsingAddressIsCreated(java.lang.String)"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 1428425000,
       "status": "passed"
      },
      "line": 84,
      "name": "the tezos transaction intent from \"account1\" to endpoint with \"account2\" address is executed",
      "match": {
       "arguments": [
        {
         "val": "\"account1\"",
         "offset": 34
        },
        {
         "val": "\"account2\"",
         "offset": 62
        }
       ],
       "location": "transactionsSteps.TezosTransactionsSteps.theTezosTransactionIntentFromToEndpointWithAddressIsExecuted(java.lang.String,java.lang.String)"
      },
      "keyword": "When "
     },
     {
      "result": {
       "duration": 17206273000,
       "status": "passed"
      },
      "line": 85,
      "name": "transaction ledger status is \"Detected or Confirmed\"",
      "match": {
       "arguments": [
        {
         "val": "\"Detected or Confirmed\"",
         "offset": 29
        }
       ],
       "location": "transactionsSteps.TransactionsSteps.transactionLedgerStatusIs(java.lang.String)"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 448195000,
       "status": "passed"
      },
      "line": 87,
      "name": "corresponding transfer and fee are present",
      "match": {
       "location": "transactionsSteps.TransactionsSteps.correspondingTransferAndFeeArePresent()"
      },
      "keyword": "Then "
     },
     {
      "result": {
       "duration": 213884000,
       "status": "passed"
      },
      "line": 88,
      "name": "the transfer to \"account2\" is quarantined",
      "match": {
       "arguments": [
        {
         "val": "\"account2\"",
         "offset": 16
        }
       ],
       "location": "transactionsSteps.TransactionsSteps.theTransferToIsQuarantined(java.lang.String)"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 177038000,
       "status": "passed"
      },
      "line": 89,
      "name": "the transfer to \"account2\" is quarantined",
      "match": {
       "arguments": [
        {
         "val": "\"account2\"",
         "offset": 16
        }
       ],
       "location": "transactionsSteps.TransactionsSteps.theTransferToIsQuarantined(java.lang.String)"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 2151148000,
       "status": "passed"
      },
      "line": 91,
      "name": "\"account1\" has correct balances of \"tXTZ\" after \"outgoing\" transaction",
      "match": {
       "arguments": [
        {
         "val": "\"account1\"",
         "offset": 0
        },
        {
         "val": "\"tXTZ\"",
         "offset": 35
        },
        {
         "val": "\"outgoing\"",
         "offset": 48
        }
       ],
       "location": "transactionsSteps.TransactionsSteps.hasCorrectBalancesAfterTransaction(java.lang.String,java.lang.String,java.lang.String)"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 1614314000,
       "status": "passed"
      },
      "line": 92,
      "name": "\"account2\" has correct balances of \"tXTZ\" after \"incoming\" transaction",
      "match": {
       "arguments": [
        {
         "val": "\"account2\"",
         "offset": 0
        },
        {
         "val": "\"tXTZ\"",
         "offset": 35
        },
        {
         "val": "\"incoming\"",
         "offset": 48
        }
       ],
       "location": "transactionsSteps.TransactionsSteps.hasCorrectBalancesAfterTransaction(java.lang.String,java.lang.String,java.lang.String)"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 802365000,
       "status": "passed"
      },
      "line": 94,
      "name": "release quarantined transfers to \"account2\" intent is executed",
      "match": {
       "arguments": [
        {
         "val": "\"account2\"",
         "offset": 33
        }
       ],
       "location": "transactionsSteps.TransactionsSteps.releaseQuarantinedTransfersToIntentIsExecuted(java.lang.String)"
      },
      "keyword": "When "
     },
     {
      "result": {
       "duration": 2114373000,
       "status": "passed"
      },
      "line": 95,
      "name": "\"account1\" has correct balances of \"tXTZ\" after \"outgoing\" transaction",
      "match": {
       "arguments": [
        {
         "val": "\"account1\"",
         "offset": 0
        },
        {
         "val": "\"tXTZ\"",
         "offset": 35
        },
        {
         "val": "\"outgoing\"",
         "offset": 48
        }
       ],
       "location": "transactionsSteps.TransactionsSteps.hasCorrectBalancesAfterTransaction(java.lang.String,java.lang.String,java.lang.String)"
      },
      "keyword": "Then "
     },
     {
      "result": {
       "error_message": "java.lang.RuntimeException: Error details\n",
       "duration": 2401341000,
       "status": "failed"
      },
      "line": 96,
      "name": "\"account2\" has correct balances of \"tXTZ\" after \"incoming\" transaction",
      "match": {
       "arguments": [
        {
         "val": "\"account2\"",
         "offset": 0
        },
        {
         "val": "\"tXTZ\"",
         "offset": 35
        },
        {
         "val": "\"incoming\"",
         "offset": 48
        }
       ],
       "location": "transactionsSteps.TransactionsSteps.hasCorrectBalancesAfterTransaction(java.lang.String,java.lang.String,java.lang.String)"
      },
      "keyword": "Then "
     },
     {
      "result": {
       "duration": 15939633000,
       "status": "skipped"
      },
      "line": 98,
      "name": "\"tXTZ\" funds are sent from \"account2\" to \"account1\"",
      "match": {
       "arguments": [
        {
         "val": "\"tXTZ\"",
         "offset": 0
        },
        {
         "val": "\"account2\"",
         "offset": 27
        },
        {
         "val": "\"account1\"",
         "offset": 41
        }
       ],
       "location": "transactionsSteps.TransactionsSteps.fundsAreSentFromTo(java.lang.String,java.lang.String,java.lang.String)"
      },
      "keyword": "And "
     }
    ],
    "tags": [
     {
      "name": "@transactions-and-accounts"
     },
     {
      "name": "@transactions-and-dry-runs"
     },
     {
      "name": "@tezos-transactions"
     },
     {
      "name": "@tezos"
     },
     {
      "name": "@tr_section-tezos-transactions"
     },
     {
      "name": "@milestone-hmz-1.3"
     },
     {
      "name": "@ref-groups/silo/platform/-/epics/21"
     },
     {
      "name": "@candidate"
     },
     {
      "name": "@id-tezos-transaction-to-endpoint-destination"
     }
    ]
   }
  ],
  "name": "Tezos transactions",
  "description": "",
  "id": "tezos-transactions",
  "keyword": "Feature",
  "uri": "file:src/test/resources/features/transactions_and_accounts/TezosTransactions.feature",
  "tags": [
   {
    "name": "@transactions-and-accounts",
    "type": "Tag",
    "location": {
     "line": 1,
     "column": 1
    }
   },
   {
    "name": "@transactions-and-dry-runs",
    "type": "Tag",
    "location": {
     "line": 2,
     "column": 1
    }
   },
   {
    "name": "@tezos-transactions",
    "type": "Tag",
    "location": {
     "line": 3,
     "column": 1
    }
   },
   {
    "name": "@tezos",
    "type": "Tag",
    "location": {
     "line": 4,
     "column": 1
    }
   },
   {
    "name": "@tr_section-tezos-transactions",
    "type": "Tag",
    "location": {
     "line": 5,
     "column": 1
    }
   }
  ]
 },
 {
  "line": 7,
  "elements": [
   {
    "line": 9,
    "name": "",
    "description": "",
    "type": "background",
    "keyword": "Background",
    "steps": [
     {
      "result": {
       "duration": 724000,
       "status": "passed"
      },
      "line": 10,
      "name": "a root domain admin user is logged in",
      "match": {
       "location": "UserSteps.aRootDomainAdminUserIsLoggedIn()"
      },
      "keyword": "Given "
     },
     {
      "result": {
       "duration": 28000,
       "status": "passed"
      },
      "line": 11,
      "name": "the current domain is a root domain",
      "match": {
       "location": "DomainSteps.theCurrentDomainIsARootDomain()"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 403846000,
       "status": "passed"
      },
      "line": 12,
      "name": "the vault is configured",
      "match": {
       "location": "VaultsSteps.theVaultIsConfigured()"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 1029662000,
       "status": "passed"
      },
      "line": 14,
      "name": "pre-conditions for \"xrpl-testnet\" accounts balances recovery are met",
      "match": {
       "arguments": [
        {
         "val": "\"xrpl-testnet\"",
         "offset": 19
        }
       ],
       "location": "AccountsSteps.preConditionsForAccountsBalancesRecoveryAreMet(java.lang.String)"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 528607000,
       "status": "passed"
      },
      "line": 15,
      "name": "all recovery transfers are released to accounts",
      "match": {
       "location": "transactionsSteps.TransactionsSteps.allRecoveryQuarantinedTransfersAreReleased()"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 459940000,
       "status": "passed"
      },
      "line": 16,
      "name": "all ongoing quarantined transfers are released to accounts",
      "match": {
       "location": "transactionsSteps.TransactionsSteps.quarantinedTransfersAreReleasedToAccounts()"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 168119000,
       "status": "passed"
      },
      "line": 17,
      "name": "all policies except default are locked",
      "match": {
       "location": "PolicySteps.allPoliciesExceptDefaultAreLocked()"
      },
      "keyword": "And "
     }
    ]
   },
   {
    "start_timestamp": "2023-01-09T16:18:07.288Z",
    "before": [
     {
      "result": {
       "duration": 103000,
       "status": "passed"
      },
      "match": {
       "location": "PolicySteps.before(io.cucumber.java.Scenario)"
      }
     },
     {
      "result": {
       "duration": 1223603000,
       "status": "passed"
      },
      "match": {
       "location": "Hooks.beforeScenario()"
      }
     }
    ],
    "line": 43,
    "name": "XRPL transaction to account destination",
    "description": "",
    "id": "xrpl-transactions;xrpl-transaction-to-account-destination",
    "after": [
     {
      "result": {
       "duration": 322000,
       "status": "passed"
      },
      "match": {
       "location": "Hooks.afterScenario()"
      }
     }
    ],
    "type": "scenario",
    "keyword": "Scenario",
    "steps": [
     {
      "result": {
       "duration": 642781000,
       "status": "passed"
      },
      "line": 44,
      "name": "we have two recovered \"xrpl-testnet\" accounts",
      "match": {
       "arguments": [
        {
         "val": "\"xrpl-testnet\"",
         "offset": 22
        }
       ],
       "location": "AccountsSteps.weHaveTwoRecoveredAccounts(java.lang.String)"
      },
      "keyword": "Given "
     },
     {
      "result": {
       "duration": 1017345000,
       "status": "passed"
      },
      "line": 45,
      "name": "\"account1\" and \"account2\" have enough of \"tXRP\" on the balance for native transfer with funds return",
      "match": {
       "arguments": [
        {
         "val": "\"account1\"",
         "offset": 0
        },
        {
         "val": "\"account2\"",
         "offset": 15
        },
        {
         "val": "\"tXRP\"",
         "offset": 41
        }
       ],
       "location": "AccountsSteps.andHaveEnoughOfForTransactionWithFundsReturn(java.lang.String,java.lang.String,java.lang.String)"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 1405015000,
       "status": "passed"
      },
      "line": 47,
      "name": "the xrp transaction intent from \"account1\" to \"account2\" is executed",
      "match": {
       "arguments": [
        {
         "val": "\"account1\"",
         "offset": 32
        },
        {
         "val": "\"account2\"",
         "offset": 46
        }
       ],
       "location": "transactionsSteps.XRPL_TransactionsSteps.theXrpTransactionIntentFromToIsExecuted(java.lang.String,java.lang.String)"
      },
      "keyword": "When "
     },
     {
      "result": {
       "duration": 12807878000,
       "status": "passed"
      },
      "line": 48,
      "name": "transaction ledger status is \"Confirmed\"",
      "match": {
       "arguments": [
        {
         "val": "\"Confirmed\"",
         "offset": 29
        }
       ],
       "location": "transactionsSteps.TransactionsSteps.transactionLedgerStatusIs(java.lang.String)"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 566972000,
       "status": "passed"
      },
      "line": 50,
      "name": "corresponding transfer and fee are present",
      "match": {
       "location": "transactionsSteps.TransactionsSteps.correspondingTransferAndFeeArePresent()"
      },
      "keyword": "Then "
     },
     {
      "result": {
       "duration": 212464000,
       "status": "passed"
      },
      "line": 51,
      "name": "the transfer to \"account2\" is quarantined",
      "match": {
       "arguments": [
        {
         "val": "\"account2\"",
         "offset": 16
        }
       ],
       "location": "transactionsSteps.TransactionsSteps.theTransferToIsQuarantined(java.lang.String)"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 1785020000,
       "status": "passed"
      },
      "line": 52,
      "name": "\"account1\" has correct balances of \"tXRP\" after \"outgoing\" transaction",
      "match": {
       "arguments": [
        {
         "val": "\"account1\"",
         "offset": 0
        },
        {
         "val": "\"tXRP\"",
         "offset": 35
        },
        {
         "val": "\"outgoing\"",
         "offset": 48
        }
       ],
       "location": "transactionsSteps.TransactionsSteps.hasCorrectBalancesAfterTransaction(java.lang.String,java.lang.String,java.lang.String)"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 1557967000,
       "status": "passed"
      },
      "line": 53,
      "name": "\"account2\" has correct balances of \"tXRP\" after \"incoming\" transaction",
      "match": {
       "arguments": [
        {
         "val": "\"account2\"",
         "offset": 0
        },
        {
         "val": "\"tXRP\"",
         "offset": 35
        },
        {
         "val": "\"incoming\"",
         "offset": 48
        }
       ],
       "location": "transactionsSteps.TransactionsSteps.hasCorrectBalancesAfterTransaction(java.lang.String,java.lang.String,java.lang.String)"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 1418603000,
       "status": "passed"
      },
      "line": 55,
      "name": "release quarantined transfers to \"account2\" intent is executed",
      "match": {
       "arguments": [
        {
         "val": "\"account2\"",
         "offset": 33
        }
       ],
       "location": "transactionsSteps.TransactionsSteps.releaseQuarantinedTransfersToIntentIsExecuted(java.lang.String)"
      },
      "keyword": "When "
     },
     {
      "result": {
       "duration": 1740174000,
       "status": "passed"
      },
      "line": 56,
      "name": "\"account1\" has correct balances of \"tXRP\" after \"outgoing\" transaction",
      "match": {
       "arguments": [
        {
         "val": "\"account1\"",
         "offset": 0
        },
        {
         "val": "\"tXRP\"",
         "offset": 35
        },
        {
         "val": "\"outgoing\"",
         "offset": 48
        }
       ],
       "location": "transactionsSteps.TransactionsSteps.hasCorrectBalancesAfterTransaction(java.lang.String,java.lang.String,java.lang.String)"
      },
      "keyword": "Then "
     },
     {
      "result": {
       "duration": 1597387000,
       "status": "passed"
      },
      "line": 57,
      "name": "\"account2\" has correct balances of \"tXRP\" after \"incoming\" transaction",
      "match": {
       "arguments": [
        {
         "val": "\"account2\"",
         "offset": 0
        },
        {
         "val": "\"tXRP\"",
         "offset": 35
        },
        {
         "val": "\"incoming\"",
         "offset": 48
        }
       ],
       "location": "transactionsSteps.TransactionsSteps.hasCorrectBalancesAfterTransaction(java.lang.String,java.lang.String,java.lang.String)"
      },
      "keyword": "Then "
     },
     {
      "result": {
       "duration": 12781385000,
       "status": "passed"
      },
      "line": 59,
      "name": "\"tXRP\" funds are sent from \"account2\" to \"account1\"",
      "match": {
       "arguments": [
        {
         "val": "\"tXRP\"",
         "offset": 0
        },
        {
         "val": "\"account2\"",
         "offset": 27
        },
        {
         "val": "\"account1\"",
         "offset": 41
        }
       ],
       "location": "transactionsSteps.TransactionsSteps.fundsAreSentFromTo(java.lang.String,java.lang.String,java.lang.String)"
      },
      "keyword": "And "
     }
    ],
    "tags": [
     {
      "name": "@transactions-and-accounts"
     },
     {
      "name": "@transactions-and-dry-runs"
     },
     {
      "name": "@xrp-transactions"
     },
     {
      "name": "@xrpl"
     },
     {
      "name": "@tr_section-xrpl-transactions"
     },
     {
      "name": "@candidate"
     },
     {
      "name": "@milestone-hmz-1.1.1"
     },
     {
      "name": "@id-xrp-transaction-to-account-destination"
     }
    ]
   }
  ],
  "name": "XRPL transactions",
  "description": "",
  "id": "xrpl-transactions",
  "keyword": "Feature",
  "uri": "file:src/test/resources/features/transactions_and_accounts/XRP_Transactions.feature",
  "tags": [
   {
    "name": "@transactions-and-accounts",
    "type": "Tag",
    "location": {
     "line": 1,
     "column": 1
    }
   },
   {
    "name": "@transactions-and-dry-runs",
    "type": "Tag",
    "location": {
     "line": 2,
     "column": 1
    }
   },
   {
    "name": "@xrp-transactions",
    "type": "Tag",
    "location": {
     "line": 3,
     "column": 1
    }
   },
   {
    "name": "@xrpl",
    "type": "Tag",
    "location": {
     "line": 4,
     "column": 1
    }
   },
   {
    "name": "@tr_section-xrpl-transactions",
    "type": "Tag",
    "location": {
     "line": 5,
     "column": 1
    }
   }
  ]
 },
 {
  "line": 7,
  "elements": [
   {
    "line": 9,
    "name": "",
    "description": "",
    "type": "background",
    "keyword": "Background",
    "steps": [
     {
      "result": {
       "duration": 2437000,
       "status": "passed"
      },
      "line": 10,
      "name": "a root domain admin user is logged in",
      "match": {
       "location": "UserSteps.aRootDomainAdminUserIsLoggedIn()"
      },
      "keyword": "Given "
     },
     {
      "result": {
       "duration": 96000,
       "status": "passed"
      },
      "line": 11,
      "name": "the current domain is a root domain",
      "match": {
       "location": "DomainSteps.theCurrentDomainIsARootDomain()"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 466775000,
       "status": "passed"
      },
      "line": 12,
      "name": "the vault is configured",
      "match": {
       "location": "VaultsSteps.theVaultIsConfigured()"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 116469000,
       "status": "passed"
      },
      "line": 13,
      "name": "\"ALOT\" token ticker is created",
      "match": {
       "arguments": [
        {
         "val": "\"ALOT\"",
         "offset": 0
        }
       ],
       "location": "TickerSteps.tokenTickerIsCreated(java.lang.String)"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 1735303000,
       "status": "passed"
      },
      "line": 15,
      "name": "pre-conditions for \"avalanche-c-chain-testnet-fuji\" accounts balances recovery are met",
      "match": {
       "arguments": [
        {
         "val": "\"avalanche-c-chain-testnet-fuji\"",
         "offset": 19
        }
       ],
       "location": "AccountsSteps.preConditionsForAccountsBalancesRecoveryAreMet(java.lang.String)"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 570134000,
       "status": "passed"
      },
      "line": 16,
      "name": "all recovery transfers are released to accounts",
      "match": {
       "location": "transactionsSteps.TransactionsSteps.allRecoveryQuarantinedTransfersAreReleased()"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 490210000,
       "status": "passed"
      },
      "line": 17,
      "name": "all ongoing quarantined transfers are released to accounts",
      "match": {
       "location": "transactionsSteps.TransactionsSteps.quarantinedTransfersAreReleasedToAccounts()"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 196246000,
       "status": "passed"
      },
      "line": 18,
      "name": "all policies except default are locked",
      "match": {
       "location": "PolicySteps.allPoliciesExceptDefaultAreLocked()"
      },
      "keyword": "And "
     }
    ]
   },
   {
    "start_timestamp": "2023-01-09T16:18:48.694Z",
    "before": [
     {
      "result": {
       "duration": 84000,
       "status": "passed"
      },
      "match": {
       "location": "PolicySteps.before(io.cucumber.java.Scenario)"
      }
     },
     {
      "result": {
       "duration": 1055398000,
       "status": "passed"
      },
      "match": {
       "location": "Hooks.beforeScenario()"
      }
     }
    ],
    "line": 24,
    "name": "Avalanche ERC20 report demo transaction with address destination",
    "description": "",
    "id": "demo-1-avalanche-erc20-transactions;avalanche-erc20-transaction-with-address-destination",
    "after": [
     {
      "result": {
       "duration": 967000,
       "status": "passed"
      },
      "match": {
       "location": "Hooks.afterScenario()"
      }
     }
    ],
    "type": "scenario",
    "keyword": "Scenario",
    "steps": [
     {
      "result": {
       "duration": 692998000,
       "status": "passed"
      },
      "line": 25,
      "name": "we have two recovered \"avalanche-c-chain-testnet-fuji\" accounts",
      "match": {
       "arguments": [
        {
         "val": "\"avalanche-c-chain-testnet-fuji\"",
         "offset": 22
        }
       ],
       "location": "AccountsSteps.weHaveTwoRecoveredAccounts(java.lang.String)"
      },
      "keyword": "Given "
     },
     {
      "result": {
       "duration": 1380000,
       "status": "passed"
      },
      "line": 26,
      "name": "parameters are set to prepare for \"ALOT\" erc20 transfer",
      "match": {
       "arguments": [
        {
         "val": "\"ALOT\"",
         "offset": 34
        }
       ],
       "location": "transactionsSteps.ERC20_TransactionsSteps.parametersAreSetToPrepareForErc20Transfer(java.lang.String)"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 627000,
       "status": "passed"
      },
      "line": 27,
      "name": "the following \"avalanche-c-chain-testnet-fuji\" fee strategy is used",
      "match": {
       "arguments": [
        {
         "val": "\"avalanche-c-chain-testnet-fuji\"",
         "offset": 14
        }
       ],
       "location": "transactionsSteps.TransactionsSteps.theFollowingFeeStrategyIsUsed(java.lang.String,io.cucumber.datatable.DataTable)"
      },
      "rows": [
       {
        "cells": [
         "type",
         "Priority"
        ]
       },
       {
        "cells": [
         "priority",
         "Medium"
        ]
       }
      ],
      "keyword": "And "
     },
     {
      "result": {
       "duration": 1933945000,
       "status": "passed"
      },
      "line": 31,
      "name": "\"account1\" and \"account2\" have enough of native currency and \"ALOT\" on the balance for token transfer with funds return",
      "match": {
       "arguments": [
        {
         "val": "\"account1\"",
         "offset": 0
        },
        {
         "val": "\"account2\"",
         "offset": 15
        },
        {
         "val": "\"ALOT\"",
         "offset": 61
        }
       ],
       "location": "AccountsSteps.andHaveEnoughOfAndOnTheBalanceForTransactionWithFundsReturn(java.lang.String,java.lang.String,java.lang.String)"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 483417000,
       "status": "passed"
      },
      "line": 33,
      "name": "the maximumFee value is set to satisfy the chosen fee strategy for erc20 transfer of \"ALOT\" from \"account1\" to \"account2\"",
      "match": {
       "arguments": [
        {
         "val": "\"ALOT\"",
         "offset": 85
        },
        {
         "val": "\"account1\"",
         "offset": 97
        },
        {
         "val": "\"account2\"",
         "offset": 111
        }
       ],
       "location": "transactionsSteps.ERC20_TransactionsSteps.theMaximumFeeValueIsSetToSatisfyTheChosenFeeStrategyForErcTransferOfFromTo(java.lang.String,java.lang.String,java.lang.String)"
      },
      "keyword": "Given "
     },
     {
      "result": {
       "duration": 127084000,
       "status": "passed"
      },
      "line": 34,
      "name": "dry run of erc20 transfer of \"ALOT\" from \"account1\" to \"account2\" is executed with the fee strategy specified above",
      "match": {
       "arguments": [
        {
         "val": "\"ALOT\"",
         "offset": 29
        },
        {
         "val": "\"account1\"",
         "offset": 41
        },
        {
         "val": "\"account2\"",
         "offset": 55
        }
       ],
       "location": "transactionsSteps.ERC20_TransactionsSteps.dryRunOfErcTransferFromToIsExecutedWithTheFeeStrategySpecifiedAbove(java.lang.String,java.lang.String,java.lang.String)"
      },
      "keyword": "And "
     },
     {
      "result": {
       "error_message": "java.lang.RuntimeException: Error details\n",
       "duration": 420000,
       "status": "failed"
      },
      "line": 35,
      "name": "dry run result is success",
      "match": {
       "location": "transactionsSteps.TransactionsSteps.dryRunResultIsSuccess()"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 982866000,
       "status": "skipped"
      },
      "line": 37,
      "name": "the \"ALOT\" transaction intent from \"account1\" to \"account2\" is executed using a call of smart contract transfer function",
      "match": {
       "arguments": [
        {
         "val": "\"ALOT\"",
         "offset": 4
        },
        {
         "val": "\"account1\"",
         "offset": 35
        },
        {
         "val": "\"account2\"",
         "offset": 49
        }
       ],
       "location": "transactionsSteps.ERC20_TransactionsSteps.theTransactionIntentFromToIsExecutedUsingACallOfSmartContractFunction(java.lang.String,java.lang.String,java.lang.String)"
      },
      "keyword": "When "
     },
     {
      "result": {
       "duration": 14070192000,
       "status": "skipped"
      },
      "line": 38,
      "name": "transaction ledger status is \"Detected or Confirmed\"",
      "match": {
       "arguments": [
        {
         "val": "\"Detected or Confirmed\"",
         "offset": 29
        }
       ],
       "location": "transactionsSteps.TransactionsSteps.transactionLedgerStatusIs(java.lang.String)"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 510428000,
       "status": "skipped"
      },
      "line": 40,
      "name": "corresponding transfer and fee are present",
      "match": {
       "location": "transactionsSteps.TransactionsSteps.correspondingTransferAndFeeArePresent()"
      },
      "keyword": "Then "
     },
     {
      "result": {
       "duration": 203132000,
       "status": "skipped"
      },
      "line": 41,
      "name": "the transfer to \"account2\" is quarantined",
      "match": {
       "arguments": [
        {
         "val": "\"account2\"",
         "offset": 16
        }
       ],
       "location": "transactionsSteps.TransactionsSteps.theTransferToIsQuarantined(java.lang.String)"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 828604000,
       "status": "skipped"
      },
      "line": 42,
      "name": "\"account1\" has correct balances of \"ALOT\" after \"outgoing\" transaction",
      "match": {
       "arguments": [
        {
         "val": "\"account1\"",
         "offset": 0
        },
        {
         "val": "\"ALOT\"",
         "offset": 35
        },
        {
         "val": "\"outgoing\"",
         "offset": 48
        }
       ],
       "location": "transactionsSteps.TransactionsSteps.hasCorrectBalancesAfterTransaction(java.lang.String,java.lang.String,java.lang.String)"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 753253000,
       "status": "skipped"
      },
      "line": 43,
      "name": "\"account2\" has correct balances of \"ALOT\" after \"incoming\" transaction",
      "match": {
       "arguments": [
        {
         "val": "\"account2\"",
         "offset": 0
        },
        {
         "val": "\"ALOT\"",
         "offset": 35
        },
        {
         "val": "\"incoming\"",
         "offset": 48
        }
       ],
       "location": "transactionsSteps.TransactionsSteps.hasCorrectBalancesAfterTransaction(java.lang.String,java.lang.String,java.lang.String)"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 1323529000,
       "status": "skipped"
      },
      "line": 45,
      "name": "release quarantined transfers to \"account2\" intent is executed",
      "match": {
       "arguments": [
        {
         "val": "\"account2\"",
         "offset": 33
        }
       ],
       "location": "transactionsSteps.TransactionsSteps.releaseQuarantinedTransfersToIntentIsExecuted(java.lang.String)"
      },
      "keyword": "When "
     },
     {
      "result": {
       "duration": 811793000,
       "status": "skipped"
      },
      "line": 46,
      "name": "\"account1\" has correct balances of \"ALOT\" after \"outgoing\" transaction",
      "match": {
       "arguments": [
        {
         "val": "\"account1\"",
         "offset": 0
        },
        {
         "val": "\"ALOT\"",
         "offset": 35
        },
        {
         "val": "\"outgoing\"",
         "offset": 48
        }
       ],
       "location": "transactionsSteps.TransactionsSteps.hasCorrectBalancesAfterTransaction(java.lang.String,java.lang.String,java.lang.String)"
      },
      "keyword": "Then "
     },
     {
      "result": {
       "duration": 766361000,
       "status": "skipped"
      },
      "line": 47,
      "name": "\"account2\" has correct balances of \"ALOT\" after \"incoming\" transaction",
      "match": {
       "arguments": [
        {
         "val": "\"account2\"",
         "offset": 0
        },
        {
         "val": "\"ALOT\"",
         "offset": 35
        },
        {
         "val": "\"incoming\"",
         "offset": 48
        }
       ],
       "location": "transactionsSteps.TransactionsSteps.hasCorrectBalancesAfterTransaction(java.lang.String,java.lang.String,java.lang.String)"
      },
      "keyword": "Then "
     },
     {
      "result": {
       "duration": 15887392000,
       "status": "skipped"
      },
      "line": 49,
      "name": "\"ALOT\" funds are sent from \"account2\" to \"account1\"",
      "match": {
       "arguments": [
        {
         "val": "\"ALOT\"",
         "offset": 0
        },
        {
         "val": "\"account2\"",
         "offset": 27
        },
        {
         "val": "\"account1\"",
         "offset": 41
        }
       ],
       "location": "transactionsSteps.TransactionsSteps.fundsAreSentFromTo(java.lang.String,java.lang.String,java.lang.String)"
      },
      "keyword": "And "
     }
    ],
    "tags": [
     {
      "name": "@transactions-and-accounts"
     },
     {
      "name": "@transactions-and-dry-runs"
     },
     {
      "name": "@avax-erc-20-transactions"
     },
     {
      "name": "@avax"
     },
     {
      "name": "@tr_section-avax-erc-20-transactions"
     },
     {
      "name": "@smoke"
     },
     {
      "name": "@milestone-hmz-1.0"
     },
     {
      "name": "@candidate"
     },
     {
      "name": "@id-avax-erc-20-transaction-with-address-destination"
     }
    ]
   }
  ],
  "name": "Avalanche ERC20 transactions",
  "description": "",
  "id": "avalanche-erc20-transactions",
  "keyword": "Feature",
  "uri": "file:src/test/resources/features/transactions_and_accounts/eth_and_eth_like/AvalancheERC20Transfers.feature",
  "tags": [
   {
    "name": "@transactions-and-accounts",
    "type": "Tag",
    "location": {
     "line": 1,
     "column": 1
    }
   },
   {
    "name": "@transactions-and-dry-runs",
    "type": "Tag",
    "location": {
     "line": 2,
     "column": 1
    }
   },
   {
    "name": "@avax-erc-20-transactions",
    "type": "Tag",
    "location": {
     "line": 3,
     "column": 1
    }
   },
   {
    "name": "@avax",
    "type": "Tag",
    "location": {
     "line": 4,
     "column": 1
    }
   },
   {
    "name": "@tr_section-avax-erc-20-transactions",
    "type": "Tag",
    "location": {
     "line": 5,
     "column": 1
    }
   }
  ]
 },
 {
  "line": 6,
  "elements": [
   {
    "line": 8,
    "name": "",
    "description": "",
    "type": "background",
    "keyword": "Background",
    "steps": [
     {
      "result": {
       "duration": 6289000,
       "status": "passed"
      },
      "line": 9,
      "name": "a root domain admin user is logged in",
      "match": {
       "location": "UserSteps.aRootDomainAdminUserIsLoggedIn()"
      },
      "keyword": "Given "
     },
     {
      "result": {
       "duration": 93000,
       "status": "passed"
      },
      "line": 10,
      "name": "the current domain is a root domain",
      "match": {
       "location": "DomainSteps.theCurrentDomainIsARootDomain()"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 448941000,
       "status": "passed"
      },
      "line": 11,
      "name": "the vault is configured",
      "match": {
       "location": "VaultsSteps.theVaultIsConfigured()"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 1044040000,
       "status": "passed"
      },
      "line": 13,
      "name": "pre-conditions for \"avalanche-c-chain-testnet-fuji\" accounts balances recovery are met",
      "match": {
       "arguments": [
        {
         "val": "\"avalanche-c-chain-testnet-fuji\"",
         "offset": 19
        }
       ],
       "location": "AccountsSteps.preConditionsForAccountsBalancesRecoveryAreMet(java.lang.String)"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 575193000,
       "status": "passed"
      },
      "line": 14,
      "name": "all recovery transfers are released to accounts",
      "match": {
       "location": "transactionsSteps.TransactionsSteps.allRecoveryQuarantinedTransfersAreReleased()"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 178845000,
       "status": "passed"
      },
      "line": 15,
      "name": "all policies except default are locked",
      "match": {
       "location": "PolicySteps.allPoliciesExceptDefaultAreLocked()"
      },
      "keyword": "And "
     }
    ]
   },
   {
    "start_timestamp": "2023-01-09T16:19:32.869Z",
    "before": [
     {
      "result": {
       "duration": 175000,
       "status": "passed"
      },
      "match": {
       "location": "PolicySteps.before(io.cucumber.java.Scenario)"
      }
     },
     {
      "result": {
       "duration": 1177709000,
       "status": "passed"
      },
      "match": {
       "location": "Hooks.beforeScenario()"
      }
     }
    ],
    "line": 79,
    "name": "tAVAX transaction to endpoint destination",
    "description": "",
    "id": "avalanche-native-transactions;tavax-transaction-to-endpoint-destination",
    "after": [
     {
      "result": {
       "duration": 1578000,
       "status": "passed"
      },
      "match": {
       "location": "Hooks.afterScenario()"
      }
     }
    ],
    "type": "scenario",
    "keyword": "Scenario",
    "steps": [
     {
      "result": {
       "duration": 733609000,
       "status": "passed"
      },
      "line": 80,
      "name": "we have two recovered \"avalanche-c-chain-testnet-fuji\" accounts",
      "match": {
       "arguments": [
        {
         "val": "\"avalanche-c-chain-testnet-fuji\"",
         "offset": 22
        }
       ],
       "location": "AccountsSteps.weHaveTwoRecoveredAccounts(java.lang.String)"
      },
      "keyword": "Given "
     },
     {
      "result": {
       "duration": 619602000,
       "status": "passed"
      },
      "line": 81,
      "name": "endpoint using \"account2\" address is created",
      "match": {
       "arguments": [
        {
         "val": "\"account2\"",
         "offset": 15
        }
       ],
       "location": "EndpointsSteps.endpointUsingAddressIsCreated(java.lang.String)"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 722000,
       "status": "passed"
      },
      "line": 83,
      "name": "the following \"avalanche-c-chain-testnet-fuji\" fee strategy is used",
      "match": {
       "arguments": [
        {
         "val": "\"avalanche-c-chain-testnet-fuji\"",
         "offset": 14
        }
       ],
       "location": "transactionsSteps.TransactionsSteps.theFollowingFeeStrategyIsUsed(java.lang.String,io.cucumber.datatable.DataTable)"
      },
      "rows": [
       {
        "cells": [
         "type",
         "Priority"
        ]
       },
       {
        "cells": [
         "priority",
         "Medium"
        ]
       }
      ],
      "keyword": "And "
     },
     {
      "result": {
       "duration": 1375534000,
       "status": "passed"
      },
      "line": 87,
      "name": "\"account1\" and \"account2\" have enough of \"tAVAX\" on the balance for native transfer with funds return",
      "match": {
       "arguments": [
        {
         "val": "\"account1\"",
         "offset": 0
        },
        {
         "val": "\"account2\"",
         "offset": 15
        },
        {
         "val": "\"tAVAX\"",
         "offset": 41
        }
       ],
       "location": "AccountsSteps.andHaveEnoughOfForTransactionWithFundsReturn(java.lang.String,java.lang.String,java.lang.String)"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 252544000,
       "status": "passed"
      },
      "line": 88,
      "name": "the maximumFee value is set sufficient to satisfy the chosen fee strategy for ethereum transaction from \"account1\" to given endpoint",
      "match": {
       "arguments": [
        {
         "val": "\"account1\"",
         "offset": 104
        }
       ],
       "location": "transactionsSteps.EthereumTransactionsSteps.theMaximumFeeValueIsSetSufficientToSatisfyTheChosenFeeStrategyForTransactionFromToEndpointWithExtAddress(java.lang.String)"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 148304000,
       "status": "passed"
      },
      "line": 89,
      "name": "dry run of ethereum transaction from \"account1\" to endpoint is executed with the fee strategy specified above",
      "match": {
       "arguments": [
        {
         "val": "\"account1\"",
         "offset": 37
        }
       ],
       "location": "transactionsSteps.EthereumTransactionsSteps.dryRunOfEthereumTransactionFromToEndpointWithAddress(java.lang.String)"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 300000,
       "status": "passed"
      },
      "line": 90,
      "name": "dry run result is success",
      "match": {
       "location": "transactionsSteps.TransactionsSteps.dryRunResultIsSuccess()"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 1460577000,
       "status": "passed"
      },
      "line": 92,
      "name": "the ethereum transaction intent to send \"tAVAX\" from \"account1\" to endpoint with \"account2\" address is executed",
      "match": {
       "arguments": [
        {
         "val": "\"tAVAX\"",
         "offset": 40
        },
        {
         "val": "\"account1\"",
         "offset": 53
        },
        {
         "val": "\"account2\"",
         "offset": 81
        }
       ],
       "location": "transactionsSteps.EthereumTransactionsSteps.theEthereumTransactionIntentFromToEndpointWithAddressIsExecuted(java.lang.String,java.lang.String,java.lang.String)"
      },
      "keyword": "When "
     },
     {
      "result": {
       "duration": 14738001000,
       "status": "passed"
      },
      "line": 93,
      "name": "transaction ledger status is \"Detected or Confirmed\"",
      "match": {
       "arguments": [
        {
         "val": "\"Detected or Confirmed\"",
         "offset": 29
        }
       ],
       "location": "transactionsSteps.TransactionsSteps.transactionLedgerStatusIs(java.lang.String)"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 561849000,
       "status": "passed"
      },
      "line": 95,
      "name": "corresponding transfer and fee are present",
      "match": {
       "location": "transactionsSteps.TransactionsSteps.correspondingTransferAndFeeArePresent()"
      },
      "keyword": "Then "
     },
     {
      "result": {
       "duration": 155866000,
       "status": "passed"
      },
      "line": 96,
      "name": "the transfer to \"account2\" is quarantined",
      "match": {
       "arguments": [
        {
         "val": "\"account2\"",
         "offset": 16
        }
       ],
       "location": "transactionsSteps.TransactionsSteps.theTransferToIsQuarantined(java.lang.String)"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 1464670000,
       "status": "passed"
      },
      "line": 98,
      "name": "\"account1\" has correct balances of \"tAVAX\" after \"outgoing\" transaction",
      "match": {
       "arguments": [
        {
         "val": "\"account1\"",
         "offset": 0
        },
        {
         "val": "\"tAVAX\"",
         "offset": 35
        },
        {
         "val": "\"outgoing\"",
         "offset": 49
        }
       ],
       "location": "transactionsSteps.TransactionsSteps.hasCorrectBalancesAfterTransaction(java.lang.String,java.lang.String,java.lang.String)"
      },
      "keyword": "Then "
     },
     {
      "result": {
       "duration": 1183177000,
       "status": "passed"
      },
      "line": 99,
      "name": "\"account2\" has correct balances of \"tAVAX\" after \"incoming\" transaction",
      "match": {
       "arguments": [
        {
         "val": "\"account2\"",
         "offset": 0
        },
        {
         "val": "\"tAVAX\"",
         "offset": 35
        },
        {
         "val": "\"incoming\"",
         "offset": 49
        }
       ],
       "location": "transactionsSteps.TransactionsSteps.hasCorrectBalancesAfterTransaction(java.lang.String,java.lang.String,java.lang.String)"
      },
      "keyword": "Then "
     },
     {
      "result": {
       "duration": 1450948000,
       "status": "passed"
      },
      "line": 101,
      "name": "release quarantined transfers to \"account2\" intent is executed",
      "match": {
       "arguments": [
        {
         "val": "\"account2\"",
         "offset": 33
        }
       ],
       "location": "transactionsSteps.TransactionsSteps.releaseQuarantinedTransfersToIntentIsExecuted(java.lang.String)"
      },
      "keyword": "When "
     },
     {
      "result": {
       "duration": 1581326000,
       "status": "passed"
      },
      "line": 102,
      "name": "\"account1\" has correct balances of \"tAVAX\" after \"outgoing\" transaction",
      "match": {
       "arguments": [
        {
         "val": "\"account1\"",
         "offset": 0
        },
        {
         "val": "\"tAVAX\"",
         "offset": 35
        },
        {
         "val": "\"outgoing\"",
         "offset": 49
        }
       ],
       "location": "transactionsSteps.TransactionsSteps.hasCorrectBalancesAfterTransaction(java.lang.String,java.lang.String,java.lang.String)"
      },
      "keyword": "Then "
     },
     {
      "result": {
       "duration": 1394176000,
       "status": "passed"
      },
      "line": 103,
      "name": "\"account2\" has correct balances of \"tAVAX\" after \"incoming\" transaction",
      "match": {
       "arguments": [
        {
         "val": "\"account2\"",
         "offset": 0
        },
        {
         "val": "\"tAVAX\"",
         "offset": 35
        },
        {
         "val": "\"incoming\"",
         "offset": 49
        }
       ],
       "location": "transactionsSteps.TransactionsSteps.hasCorrectBalancesAfterTransaction(java.lang.String,java.lang.String,java.lang.String)"
      },
      "keyword": "Then "
     },
     {
      "result": {
       "duration": 14035380000,
       "status": "passed"
      },
      "line": 105,
      "name": "\"tAVAX\" funds are sent from \"account2\" to \"account1\"",
      "match": {
       "arguments": [
        {
         "val": "\"tAVAX\"",
         "offset": 0
        },
        {
         "val": "\"account2\"",
         "offset": 28
        },
        {
         "val": "\"account1\"",
         "offset": 42
        }
       ],
       "location": "transactionsSteps.TransactionsSteps.fundsAreSentFromTo(java.lang.String,java.lang.String,java.lang.String)"
      },
      "keyword": "And "
     }
    ],
    "tags": [
     {
      "name": "@transactions-and-accounts"
     },
     {
      "name": "@transactions-and-dry-runs"
     },
     {
      "name": "@avax"
     },
     {
      "name": "@tr_section-avalanche-transactions"
     },
     {
      "name": "@milestone-hmz-1.6"
     },
     {
      "name": "@candidate"
     },
     {
      "name": "@id-avax-transaction-to-endpoint-destination"
     }
    ]
   }
  ],
  "name": "Avalanche native transactions",
  "description": "",
  "id": "avalanche-native-transactions",
  "keyword": "Feature",
  "uri": "file:src/test/resources/features/transactions_and_accounts/eth_and_eth_like/AvalancheNativeTransactions.feature",
  "tags": [
   {
    "name": "@transactions-and-accounts",
    "type": "Tag",
    "location": {
     "line": 1,
     "column": 1
    }
   },
   {
    "name": "@transactions-and-dry-runs",
    "type": "Tag",
    "location": {
     "line": 2,
     "column": 1
    }
   },
   {
    "name": "@avax",
    "type": "Tag",
    "location": {
     "line": 3,
     "column": 1
    }
   },
   {
    "name": "@tr_section-avalanche-transactions",
    "type": "Tag",
    "location": {
     "line": 4,
     "column": 1
    }
   }
  ]
 },
 {
  "line": 7,
  "elements": [
   {
    "line": 9,
    "name": "",
    "description": "",
    "type": "background",
    "keyword": "Background",
    "steps": [
     {
      "result": {
       "duration": 1316000,
       "status": "passed"
      },
      "line": 10,
      "name": "a root domain admin user is logged in",
      "match": {
       "location": "UserSteps.aRootDomainAdminUserIsLoggedIn()"
      },
      "keyword": "Given "
     },
     {
      "result": {
       "duration": 50000,
       "status": "passed"
      },
      "line": 11,
      "name": "the current domain is a root domain",
      "match": {
       "location": "DomainSteps.theCurrentDomainIsARootDomain()"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 377451000,
       "status": "passed"
      },
      "line": 12,
      "name": "the vault is configured",
      "match": {
       "location": "VaultsSteps.theVaultIsConfigured()"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 2276460000,
       "status": "passed"
      },
      "line": 14,
      "name": "pre-conditions for \"bsc-testnet\" accounts balances recovery are met",
      "match": {
       "arguments": [
        {
         "val": "\"bsc-testnet\"",
         "offset": 19
        }
       ],
       "location": "AccountsSteps.preConditionsForAccountsBalancesRecoveryAreMet(java.lang.String)"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 75815000,
       "status": "passed"
      },
      "line": 15,
      "name": "\"USDT\" token ticker is created",
      "match": {
       "arguments": [
        {
         "val": "\"USDT\"",
         "offset": 0
        }
       ],
       "location": "TickerSteps.tokenTickerIsCreated(java.lang.String)"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 596462000,
       "status": "passed"
      },
      "line": 16,
      "name": "all recovery transfers are released to accounts",
      "match": {
       "location": "transactionsSteps.TransactionsSteps.allRecoveryQuarantinedTransfersAreReleased()"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 470270000,
       "status": "passed"
      },
      "line": 17,
      "name": "all ongoing quarantined transfers are released to accounts",
      "match": {
       "location": "transactionsSteps.TransactionsSteps.quarantinedTransfersAreReleasedToAccounts()"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 156973000,
       "status": "passed"
      },
      "line": 18,
      "name": "all policies except default are locked",
      "match": {
       "location": "PolicySteps.allPoliciesExceptDefaultAreLocked()"
      },
      "keyword": "And "
     }
    ]
   },
   {
    "start_timestamp": "2023-01-09T16:20:17.591Z",
    "before": [
     {
      "result": {
       "duration": 81000,
       "status": "passed"
      },
      "match": {
       "location": "PolicySteps.before(io.cucumber.java.Scenario)"
      }
     },
     {
      "result": {
       "duration": 1032053000,
       "status": "passed"
      },
      "match": {
       "location": "Hooks.beforeScenario()"
      }
     }
    ],
    "line": 24,
    "name": "BSC USDT transaction with address destination",
    "description": "",
    "id": "bsc-erc20-usdt-transactions;bsc-usdt-transaction-with-address-destination",
    "after": [
     {
      "result": {
       "duration": 378000,
       "status": "passed"
      },
      "match": {
       "location": "Hooks.afterScenario()"
      }
     }
    ],
    "type": "scenario",
    "keyword": "Scenario",
    "steps": [
     {
      "result": {
       "duration": 645882000,
       "status": "passed"
      },
      "line": 25,
      "name": "we have two recovered \"bsc-testnet\" accounts",
      "match": {
       "arguments": [
        {
         "val": "\"bsc-testnet\"",
         "offset": 22
        }
       ],
       "location": "AccountsSteps.weHaveTwoRecoveredAccounts(java.lang.String)"
      },
      "keyword": "Given "
     },
     {
      "result": {
       "duration": 339000,
       "status": "passed"
      },
      "line": 26,
      "name": "parameters are set to prepare for \"USDT\" erc20 transfer",
      "match": {
       "arguments": [
        {
         "val": "\"USDT\"",
         "offset": 34
        }
       ],
       "location": "transactionsSteps.ERC20_TransactionsSteps.parametersAreSetToPrepareForErc20Transfer(java.lang.String)"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 900000,
       "status": "passed"
      },
      "line": 27,
      "name": "the following \"bsc-testnet\" fee strategy is used",
      "match": {
       "arguments": [
        {
         "val": "\"bsc-testnet\"",
         "offset": 14
        }
       ],
       "location": "transactionsSteps.TransactionsSteps.theFollowingFeeStrategyIsUsed(java.lang.String,io.cucumber.datatable.DataTable)"
      },
      "rows": [
       {
        "cells": [
         "type",
         "Priority"
        ]
       },
       {
        "cells": [
         "priority",
         "Medium"
        ]
       }
      ],
      "keyword": "And "
     },
     {
      "result": {
       "duration": 2646509000,
       "status": "passed"
      },
      "line": 31,
      "name": "\"account1\" and \"account2\" have enough of native currency and \"USDT\" on the balance for token transfer with funds return",
      "match": {
       "arguments": [
        {
         "val": "\"account1\"",
         "offset": 0
        },
        {
         "val": "\"account2\"",
         "offset": 15
        },
        {
         "val": "\"USDT\"",
         "offset": 61
        }
       ],
       "location": "AccountsSteps.andHaveEnoughOfAndOnTheBalanceForTransactionWithFundsReturn(java.lang.String,java.lang.String,java.lang.String)"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 1327896000,
       "status": "passed"
      },
      "line": 33,
      "name": "the maximumFee value is set to satisfy the chosen fee strategy for erc20 transfer of \"USDT\" from \"account1\" to \"account2\"",
      "match": {
       "arguments": [
        {
         "val": "\"USDT\"",
         "offset": 85
        },
        {
         "val": "\"account1\"",
         "offset": 97
        },
        {
         "val": "\"account2\"",
         "offset": 111
        }
       ],
       "location": "transactionsSteps.ERC20_TransactionsSteps.theMaximumFeeValueIsSetToSatisfyTheChosenFeeStrategyForErcTransferOfFromTo(java.lang.String,java.lang.String,java.lang.String)"
      },
      "keyword": "Given "
     },
     {
      "result": {
       "duration": 131210000,
       "status": "passed"
      },
      "line": 34,
      "name": "dry run of erc20 transfer of \"USDT\" from \"account1\" to \"account2\" is executed with the fee strategy specified above",
      "match": {
       "arguments": [
        {
         "val": "\"USDT\"",
         "offset": 29
        },
        {
         "val": "\"account1\"",
         "offset": 41
        },
        {
         "val": "\"account2\"",
         "offset": 55
        }
       ],
       "location": "transactionsSteps.ERC20_TransactionsSteps.dryRunOfErcTransferFromToIsExecutedWithTheFeeStrategySpecifiedAbove(java.lang.String,java.lang.String,java.lang.String)"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 220000,
       "status": "passed"
      },
      "line": 35,
      "name": "dry run result is success",
      "match": {
       "location": "transactionsSteps.TransactionsSteps.dryRunResultIsSuccess()"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 1520225000,
       "status": "passed"
      },
      "line": 37,
      "name": "the \"USDT\" transaction intent from \"account1\" to \"account2\" is executed using a call of smart contract transfer function",
      "match": {
       "arguments": [
        {
         "val": "\"USDT\"",
         "offset": 4
        },
        {
         "val": "\"account1\"",
         "offset": 35
        },
        {
         "val": "\"account2\"",
         "offset": 49
        }
       ],
       "location": "transactionsSteps.ERC20_TransactionsSteps.theTransactionIntentFromToIsExecutedUsingACallOfSmartContractFunction(java.lang.String,java.lang.String,java.lang.String)"
      },
      "keyword": "When "
     },
     {
      "result": {
       "duration": 11149499000,
       "status": "passed"
      },
      "line": 39,
      "name": "transaction ledger status is \"Detected or Confirmed\"",
      "match": {
       "arguments": [
        {
         "val": "\"Detected or Confirmed\"",
         "offset": 29
        }
       ],
       "location": "transactionsSteps.TransactionsSteps.transactionLedgerStatusIs(java.lang.String)"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 442757000,
       "status": "passed"
      },
      "line": 41,
      "name": "corresponding transfer and fee are present",
      "match": {
       "location": "transactionsSteps.TransactionsSteps.correspondingTransferAndFeeArePresent()"
      },
      "keyword": "Then "
     },
     {
      "result": {
       "duration": 170120000,
       "status": "passed"
      },
      "line": 42,
      "name": "the transfer to \"account2\" is quarantined",
      "match": {
       "arguments": [
        {
         "val": "\"account2\"",
         "offset": 16
        }
       ],
       "location": "transactionsSteps.TransactionsSteps.theTransferToIsQuarantined(java.lang.String)"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 924727000,
       "status": "passed"
      },
      "line": 43,
      "name": "\"account1\" has correct balances of \"USDT\" after \"outgoing\" transaction",
      "match": {
       "arguments": [
        {
         "val": "\"account1\"",
         "offset": 0
        },
        {
         "val": "\"USDT\"",
         "offset": 35
        },
        {
         "val": "\"outgoing\"",
         "offset": 48
        }
       ],
       "location": "transactionsSteps.TransactionsSteps.hasCorrectBalancesAfterTransaction(java.lang.String,java.lang.String,java.lang.String)"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 816362000,
       "status": "passed"
      },
      "line": 44,
      "name": "\"account2\" has correct balances of \"USDT\" after \"incoming\" transaction",
      "match": {
       "arguments": [
        {
         "val": "\"account2\"",
         "offset": 0
        },
        {
         "val": "\"USDT\"",
         "offset": 35
        },
        {
         "val": "\"incoming\"",
         "offset": 48
        }
       ],
       "location": "transactionsSteps.TransactionsSteps.hasCorrectBalancesAfterTransaction(java.lang.String,java.lang.String,java.lang.String)"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 1389750000,
       "status": "passed"
      },
      "line": 46,
      "name": "release quarantined transfers to \"account2\" intent is executed",
      "match": {
       "arguments": [
        {
         "val": "\"account2\"",
         "offset": 33
        }
       ],
       "location": "transactionsSteps.TransactionsSteps.releaseQuarantinedTransfersToIntentIsExecuted(java.lang.String)"
      },
      "keyword": "When "
     },
     {
      "result": {
       "duration": 937586000,
       "status": "passed"
      },
      "line": 47,
      "name": "\"account1\" has correct balances of \"USDT\" after \"outgoing\" transaction",
      "match": {
       "arguments": [
        {
         "val": "\"account1\"",
         "offset": 0
        },
        {
         "val": "\"USDT\"",
         "offset": 35
        },
        {
         "val": "\"outgoing\"",
         "offset": 48
        }
       ],
       "location": "transactionsSteps.TransactionsSteps.hasCorrectBalancesAfterTransaction(java.lang.String,java.lang.String,java.lang.String)"
      },
      "keyword": "Then "
     },
     {
      "result": {
       "duration": 790388000,
       "status": "passed"
      },
      "line": 48,
      "name": "\"account2\" has correct balances of \"USDT\" after \"incoming\" transaction",
      "match": {
       "arguments": [
        {
         "val": "\"account2\"",
         "offset": 0
        },
        {
         "val": "\"USDT\"",
         "offset": 35
        },
        {
         "val": "\"incoming\"",
         "offset": 48
        }
       ],
       "location": "transactionsSteps.TransactionsSteps.hasCorrectBalancesAfterTransaction(java.lang.String,java.lang.String,java.lang.String)"
      },
      "keyword": "Then "
     },
     {
      "result": {
       "duration": 16243290000,
       "status": "passed"
      },
      "line": 50,
      "name": "\"USDT\" funds are sent from \"account2\" to \"account1\"",
      "match": {
       "arguments": [
        {
         "val": "\"USDT\"",
         "offset": 0
        },
        {
         "val": "\"account2\"",
         "offset": 27
        },
        {
         "val": "\"account1\"",
         "offset": 41
        }
       ],
       "location": "transactionsSteps.TransactionsSteps.fundsAreSentFromTo(java.lang.String,java.lang.String,java.lang.String)"
      },
      "keyword": "And "
     }
    ],
    "tags": [
     {
      "name": "@transactions-and-accounts"
     },
     {
      "name": "@transactions-and-dry-runs"
     },
     {
      "name": "@bsc-usdt-transactions"
     },
     {
      "name": "@bsc"
     },
     {
      "name": "@tr_section-bsc-usdt-transactions"
     },
     {
      "name": "@smoke"
     },
     {
      "name": "@milestone-hmz-1.6"
     },
     {
      "name": "@candidate"
     },
     {
      "name": "@id-bsc-usdt-transaction-with-address-destination"
     }
    ]
   }
  ],
  "name": "BSC ERC20 USDT transactions",
  "description": "",
  "id": "bsc-erc20-usdt-transactions",
  "keyword": "Feature",
  "uri": "file:src/test/resources/features/transactions_and_accounts/eth_and_eth_like/BSC_ERC20_Transfers.feature",
  "tags": [
   {
    "name": "@transactions-and-accounts",
    "type": "Tag",
    "location": {
     "line": 1,
     "column": 1
    }
   },
   {
    "name": "@transactions-and-dry-runs",
    "type": "Tag",
    "location": {
     "line": 2,
     "column": 1
    }
   },
   {
    "name": "@bsc-usdt-transactions",
    "type": "Tag",
    "location": {
     "line": 3,
     "column": 1
    }
   },
   {
    "name": "@bsc",
    "type": "Tag",
    "location": {
     "line": 4,
     "column": 1
    }
   },
   {
    "name": "@tr_section-bsc-usdt-transactions",
    "type": "Tag",
    "location": {
     "line": 5,
     "column": 1
    }
   }
  ]
 },
 {
  "line": 6,
  "elements": [
   {
    "line": 8,
    "name": "",
    "description": "",
    "type": "background",
    "keyword": "Background",
    "steps": [
     {
      "result": {
       "duration": 1861000,
       "status": "passed"
      },
      "line": 9,
      "name": "a root domain admin user is logged in",
      "match": {
       "location": "UserSteps.aRootDomainAdminUserIsLoggedIn()"
      },
      "keyword": "Given "
     },
     {
      "result": {
       "duration": 87000,
       "status": "passed"
      },
      "line": 10,
      "name": "the current domain is a root domain",
      "match": {
       "location": "DomainSteps.theCurrentDomainIsARootDomain()"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 437356000,
       "status": "passed"
      },
      "line": 11,
      "name": "the vault is configured",
      "match": {
       "location": "VaultsSteps.theVaultIsConfigured()"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 1022473000,
       "status": "passed"
      },
      "line": 13,
      "name": "pre-conditions for \"bsc-testnet\" accounts balances recovery are met",
      "match": {
       "arguments": [
        {
         "val": "\"bsc-testnet\"",
         "offset": 19
        }
       ],
       "location": "AccountsSteps.preConditionsForAccountsBalancesRecoveryAreMet(java.lang.String)"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 544221000,
       "status": "passed"
      },
      "line": 14,
      "name": "all recovery transfers are released to accounts",
      "match": {
       "location": "transactionsSteps.TransactionsSteps.allRecoveryQuarantinedTransfersAreReleased()"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 183902000,
       "status": "passed"
      },
      "line": 15,
      "name": "all policies except default are locked",
      "match": {
       "location": "PolicySteps.allPoliciesExceptDefaultAreLocked()"
      },
      "keyword": "And "
     }
    ]
   },
   {
    "start_timestamp": "2023-01-09T16:21:01.797Z",
    "before": [
     {
      "result": {
       "duration": 124000,
       "status": "passed"
      },
      "match": {
       "location": "PolicySteps.before(io.cucumber.java.Scenario)"
      }
     },
     {
      "result": {
       "duration": 1153447000,
       "status": "passed"
      },
      "match": {
       "location": "Hooks.beforeScenario()"
      }
     }
    ],
    "line": 50,
    "name": "BSC native transaction to address destination",
    "description": "",
    "id": "bsc-native-transactions;bsc-native-transaction-to-address-destination",
    "after": [
     {
      "result": {
       "duration": 504000,
       "status": "passed"
      },
      "match": {
       "location": "Hooks.afterScenario()"
      }
     }
    ],
    "type": "scenario",
    "keyword": "Scenario",
    "steps": [
     {
      "result": {
       "duration": 657813000,
       "status": "passed"
      },
      "line": 51,
      "name": "we have two recovered \"bsc-testnet\" accounts",
      "match": {
       "arguments": [
        {
         "val": "\"bsc-testnet\"",
         "offset": 22
        }
       ],
       "location": "AccountsSteps.weHaveTwoRecoveredAccounts(java.lang.String)"
      },
      "keyword": "Given "
     },
     {
      "result": {
       "duration": 627000,
       "status": "passed"
      },
      "line": 53,
      "name": "the following \"bsc-testnet\" fee strategy is used",
      "match": {
       "arguments": [
        {
         "val": "\"bsc-testnet\"",
         "offset": 14
        }
       ],
       "location": "transactionsSteps.TransactionsSteps.theFollowingFeeStrategyIsUsed(java.lang.String,io.cucumber.datatable.DataTable)"
      },
      "rows": [
       {
        "cells": [
         "type",
         "Priority"
        ]
       },
       {
        "cells": [
         "priority",
         "Medium"
        ]
       }
      ],
      "keyword": "And "
     },
     {
      "result": {
       "duration": 960648000,
       "status": "passed"
      },
      "line": 57,
      "name": "the maximumFee value is set sufficient to satisfy the chosen fee strategy for ethereum transaction from \"account1\" to address of \"account2\"",
      "match": {
       "arguments": [
        {
         "val": "\"account1\"",
         "offset": 104
        },
        {
         "val": "\"account2\"",
         "offset": 129
        }
       ],
       "location": "transactionsSteps.EthereumTransactionsSteps.theMaximumFeeValueIsSetSufficientToSatisfyTheChosenFeeStrategyForTransactionFromToAddressOf(java.lang.String,java.lang.String)"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 472554000,
       "status": "passed"
      },
      "line": 58,
      "name": "dry run of ethereum transaction from \"account1\" to address of \"account2\" is executed with the fee strategy specified above",
      "match": {
       "arguments": [
        {
         "val": "\"account1\"",
         "offset": 37
        },
        {
         "val": "\"account2\"",
         "offset": 62
        }
       ],
       "location": "transactionsSteps.EthereumTransactionsSteps.dryRunOfEthereumTransactionFromToAddressOfIsExecuted(java.lang.String,java.lang.String)"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 633000,
       "status": "passed"
      },
      "line": 59,
      "name": "dry run result is success",
      "match": {
       "location": "transactionsSteps.TransactionsSteps.dryRunResultIsSuccess()"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 1454439000,
       "status": "passed"
      },
      "line": 61,
      "name": "ethereum transaction to send \"tBNB\" from \"account1\" to address of \"account2\" is executed",
      "match": {
       "arguments": [
        {
         "val": "\"tBNB\"",
         "offset": 29
        },
        {
         "val": "\"account1\"",
         "offset": 41
        },
        {
         "val": "\"account2\"",
         "offset": 66
        }
       ],
       "location": "transactionsSteps.EthereumTransactionsSteps.ethereumTransactionFromToAddressOfIsExecuted(java.lang.String,java.lang.String,java.lang.String)"
      },
      "keyword": "When "
     },
     {
      "result": {
       "duration": 13648908000,
       "status": "passed"
      },
      "line": 62,
      "name": "transaction ledger status is \"Detected or Confirmed\"",
      "match": {
       "arguments": [
        {
         "val": "\"Detected or Confirmed\"",
         "offset": 29
        }
       ],
       "location": "transactionsSteps.TransactionsSteps.transactionLedgerStatusIs(java.lang.String)"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 465330000,
       "status": "passed"
      },
      "line": 64,
      "name": "corresponding transfer and fee are present",
      "match": {
       "location": "transactionsSteps.TransactionsSteps.correspondingTransferAndFeeArePresent()"
      },
      "keyword": "Then "
     },
     {
      "result": {
       "duration": 174635000,
       "status": "passed"
      },
      "line": 65,
      "name": "the transfer to \"account2\" is quarantined",
      "match": {
       "arguments": [
        {
         "val": "\"account2\"",
         "offset": 16
        }
       ],
       "location": "transactionsSteps.TransactionsSteps.theTransferToIsQuarantined(java.lang.String)"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 9954575000,
       "status": "passed"
      },
      "line": 67,
      "name": "\"account1\" has correct balances of \"tBNB\" after \"outgoing\" transaction",
      "match": {
       "arguments": [
        {
         "val": "\"account1\"",
         "offset": 0
        },
        {
         "val": "\"tBNB\"",
         "offset": 35
        },
        {
         "val": "\"outgoing\"",
         "offset": 48
        }
       ],
       "location": "transactionsSteps.TransactionsSteps.hasCorrectBalancesAfterTransaction(java.lang.String,java.lang.String,java.lang.String)"
      },
      "keyword": "Then "
     },
     {
      "result": {
       "duration": 1236057000,
       "status": "passed"
      },
      "line": 68,
      "name": "\"account2\" has correct balances of \"tBNB\" after \"incoming\" transaction",
      "match": {
       "arguments": [
        {
         "val": "\"account2\"",
         "offset": 0
        },
        {
         "val": "\"tBNB\"",
         "offset": 35
        },
        {
         "val": "\"incoming\"",
         "offset": 48
        }
       ],
       "location": "transactionsSteps.TransactionsSteps.hasCorrectBalancesAfterTransaction(java.lang.String,java.lang.String,java.lang.String)"
      },
      "keyword": "Then "
     },
     {
      "result": {
       "duration": 1310134000,
       "status": "passed"
      },
      "line": 70,
      "name": "release quarantined transfers to \"account2\" intent is executed",
      "match": {
       "arguments": [
        {
         "val": "\"account2\"",
         "offset": 33
        }
       ],
       "location": "transactionsSteps.TransactionsSteps.releaseQuarantinedTransfersToIntentIsExecuted(java.lang.String)"
      },
      "keyword": "When "
     },
     {
      "result": {
       "duration": 1646514000,
       "status": "passed"
      },
      "line": 71,
      "name": "\"account1\" has correct balances of \"tBNB\" after \"outgoing\" transaction",
      "match": {
       "arguments": [
        {
         "val": "\"account1\"",
         "offset": 0
        },
        {
         "val": "\"tBNB\"",
         "offset": 35
        },
        {
         "val": "\"outgoing\"",
         "offset": 48
        }
       ],
       "location": "transactionsSteps.TransactionsSteps.hasCorrectBalancesAfterTransaction(java.lang.String,java.lang.String,java.lang.String)"
      },
      "keyword": "Then "
     },
     {
      "result": {
       "duration": 1221494000,
       "status": "passed"
      },
      "line": 72,
      "name": "\"account2\" has correct balances of \"tBNB\" after \"incoming\" transaction",
      "match": {
       "arguments": [
        {
         "val": "\"account2\"",
         "offset": 0
        },
        {
         "val": "\"tBNB\"",
         "offset": 35
        },
        {
         "val": "\"incoming\"",
         "offset": 48
        }
       ],
       "location": "transactionsSteps.TransactionsSteps.hasCorrectBalancesAfterTransaction(java.lang.String,java.lang.String,java.lang.String)"
      },
      "keyword": "Then "
     },
     {
      "result": {
       "duration": 19134520000,
       "status": "passed"
      },
      "line": 74,
      "name": "\"tBNB\" funds are sent from \"account2\" to \"account1\"",
      "match": {
       "arguments": [
        {
         "val": "\"tBNB\"",
         "offset": 0
        },
        {
         "val": "\"account2\"",
         "offset": 27
        },
        {
         "val": "\"account1\"",
         "offset": 41
        }
       ],
       "location": "transactionsSteps.TransactionsSteps.fundsAreSentFromTo(java.lang.String,java.lang.String,java.lang.String)"
      },
      "keyword": "And "
     }
    ],
    "tags": [
     {
      "name": "@transactions-and-accounts"
     },
     {
      "name": "@transactions-and-dry-runs"
     },
     {
      "name": "@bsc"
     },
     {
      "name": "@tr_section-bsc-native-transactions"
     },
     {
      "name": "@milestone-hmz-1.6"
     },
     {
      "name": "@candidate"
     },
     {
      "name": "@id-bsc-native-transaction-to-address-destination"
     }
    ]
   }
  ],
  "name": "BSC native transactions",
  "description": "",
  "id": "bsc-native-transactions",
  "keyword": "Feature",
  "uri": "file:src/test/resources/features/transactions_and_accounts/eth_and_eth_like/BSC_NativeTransactions.feature",
  "tags": [
   {
    "name": "@transactions-and-accounts",
    "type": "Tag",
    "location": {
     "line": 1,
     "column": 1
    }
   },
   {
    "name": "@transactions-and-dry-runs",
    "type": "Tag",
    "location": {
     "line": 2,
     "column": 1
    }
   },
   {
    "name": "@bsc",
    "type": "Tag",
    "location": {
     "line": 3,
     "column": 1
    }
   },
   {
    "name": "@tr_section-bsc-native-transactions",
    "type": "Tag",
    "location": {
     "line": 4,
     "column": 1
    }
   }
  ]
 },
 {
  "line": 7,
  "elements": [
   {
    "line": 9,
    "name": "",
    "description": "",
    "type": "background",
    "keyword": "Background",
    "steps": [
     {
      "result": {
       "duration": 1851000,
       "status": "passed"
      },
      "line": 10,
      "name": "a root domain admin user is logged in",
      "match": {
       "location": "UserSteps.aRootDomainAdminUserIsLoggedIn()"
      },
      "keyword": "Given "
     },
     {
      "result": {
       "duration": 105000,
       "status": "passed"
      },
      "line": 11,
      "name": "the current domain is a root domain",
      "match": {
       "location": "DomainSteps.theCurrentDomainIsARootDomain()"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 402807000,
       "status": "passed"
      },
      "line": 12,
      "name": "the vault is configured",
      "match": {
       "location": "VaultsSteps.theVaultIsConfigured()"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 1097824000,
       "status": "passed"
      },
      "line": 14,
      "name": "pre-conditions for \"ethereum-testnet-goerli\" accounts balances recovery are met",
      "match": {
       "arguments": [
        {
         "val": "\"ethereum-testnet-goerli\"",
         "offset": 19
        }
       ],
       "location": "AccountsSteps.preConditionsForAccountsBalancesRecoveryAreMet(java.lang.String)"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 66409000,
       "status": "passed"
      },
      "line": 15,
      "name": "\"MTC\" token ticker is created",
      "match": {
       "arguments": [
        {
         "val": "\"MTC\"",
         "offset": 0
        }
       ],
       "location": "TickerSteps.tokenTickerIsCreated(java.lang.String)"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 548694000,
       "status": "passed"
      },
      "line": 16,
      "name": "all recovery transfers are released to accounts",
      "match": {
       "location": "transactionsSteps.TransactionsSteps.allRecoveryQuarantinedTransfersAreReleased()"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 458297000,
       "status": "passed"
      },
      "line": 17,
      "name": "all ongoing quarantined transfers are released to accounts",
      "match": {
       "location": "transactionsSteps.TransactionsSteps.quarantinedTransfersAreReleasedToAccounts()"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 166497000,
       "status": "passed"
      },
      "line": 18,
      "name": "all policies except default are locked",
      "match": {
       "location": "PolicySteps.allPoliciesExceptDefaultAreLocked()"
      },
      "keyword": "And "
     }
    ]
   },
   {
    "start_timestamp": "2023-01-09T16:21:57.558Z",
    "before": [
     {
      "result": {
       "duration": 88000,
       "status": "passed"
      },
      "match": {
       "location": "PolicySteps.before(io.cucumber.java.Scenario)"
      }
     },
     {
      "result": {
       "duration": 1118052000,
       "status": "passed"
      },
      "match": {
       "location": "Hooks.beforeScenario()"
      }
     }
    ],
    "line": 61,
    "name": "ETH ERC20 transaction to ABI endpoint",
    "description": "",
    "id": "ethereum-erc20-transactions;eth-erc20-transaction-to-abi-endpoint",
    "after": [
     {
      "result": {
       "duration": 1797000,
       "status": "passed"
      },
      "match": {
       "location": "Hooks.afterScenario()"
      }
     }
    ],
    "type": "scenario",
    "keyword": "Scenario",
    "steps": [
     {
      "result": {
       "duration": 689232000,
       "status": "passed"
      },
      "line": 62,
      "name": "we have two recovered \"ethereum-testnet-goerli\" accounts",
      "match": {
       "arguments": [
        {
         "val": "\"ethereum-testnet-goerli\"",
         "offset": 22
        }
       ],
       "location": "AccountsSteps.weHaveTwoRecoveredAccounts(java.lang.String)"
      },
      "keyword": "Given "
     },
     {
      "result": {
       "duration": 145000,
       "status": "passed"
      },
      "line": 63,
      "name": "parameters are set to prepare for \"MTC\" erc20 transfer",
      "match": {
       "arguments": [
        {
         "val": "\"MTC\"",
         "offset": 34
        }
       ],
       "location": "transactionsSteps.ERC20_TransactionsSteps.parametersAreSetToPrepareForErc20Transfer(java.lang.String)"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 247000,
       "status": "passed"
      },
      "line": 64,
      "name": "the following \"ethereum-testnet-goerli\" fee strategy is used",
      "match": {
       "arguments": [
        {
         "val": "\"ethereum-testnet-goerli\"",
         "offset": 14
        }
       ],
       "location": "transactionsSteps.TransactionsSteps.theFollowingFeeStrategyIsUsed(java.lang.String,io.cucumber.datatable.DataTable)"
      },
      "rows": [
       {
        "cells": [
         "type",
         "Priority"
        ]
       },
       {
        "cells": [
         "priority",
         "Medium"
        ]
       }
      ],
      "keyword": "And "
     },
     {
      "result": {
       "duration": 622151000,
       "status": "passed"
      },
      "line": 68,
      "name": "\"account1\" has enough of native currency to pay for erc20 smart contract call of \"MTC\" mint function",
      "match": {
       "arguments": [
        {
         "val": "\"account1\"",
         "offset": 0
        },
        {
         "val": "\"MTC\"",
         "offset": 81
        }
       ],
       "location": "AccountsSteps.hasEnoughOfNativeCurrencyToPayForSmartContractCallOfMint(java.lang.String,java.lang.String)"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 290423000,
       "status": "passed"
      },
      "line": 69,
      "name": "the maximumFee value is set to satisfy the chosen fee strategy for \"MTC\" mint transaction from \"account1\"",
      "match": {
       "arguments": [
        {
         "val": "\"MTC\"",
         "offset": 67
        },
        {
         "val": "\"account1\"",
         "offset": 95
        }
       ],
       "location": "transactionsSteps.ERC20_TransactionsSteps.theMaximumFeeValueIsSetSufficientToSatisfyTheChosenFeeStrategyForMintTransactionFrom(java.lang.String,java.lang.String)"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 16770078000,
       "status": "passed"
      },
      "line": 70,
      "name": "\"account1\" has minted token \"MTC\"",
      "match": {
       "arguments": [
        {
         "val": "\"account1\"",
         "offset": 0
        },
        {
         "val": "\"MTC\"",
         "offset": 28
        }
       ],
       "location": "transactionsSteps.ERC20_TransactionsSteps.hasTokenInItsBalances(java.lang.String,java.lang.String)"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 2656617000,
       "status": "passed"
      },
      "line": 72,
      "name": "\"account1\" and \"account2\" have enough of native currency and \"MTC\" on the balance for token transfer with funds return",
      "match": {
       "arguments": [
        {
         "val": "\"account1\"",
         "offset": 0
        },
        {
         "val": "\"account2\"",
         "offset": 15
        },
        {
         "val": "\"MTC\"",
         "offset": 61
        }
       ],
       "location": "AccountsSteps.andHaveEnoughOfAndOnTheBalanceForTransactionWithFundsReturn(java.lang.String,java.lang.String,java.lang.String)"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 537315000,
       "status": "passed"
      },
      "line": 73,
      "name": "endpoint with ABI of \"MTC\" is created",
      "match": {
       "arguments": [
        {
         "val": "\"MTC\"",
         "offset": 21
        }
       ],
       "location": "EndpointsSteps.endpointWithABIIsCreated(java.lang.String)"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 245295000,
       "status": "passed"
      },
      "line": 75,
      "name": "the maximumFee value is set to satisfy the chosen fee strategy for erc20 transfer of \"MTC\" from \"account1\" to \"account2\" using endpoint with ABI",
      "match": {
       "arguments": [
        {
         "val": "\"MTC\"",
         "offset": 85
        },
        {
         "val": "\"account1\"",
         "offset": 96
        },
        {
         "val": "\"account2\"",
         "offset": 110
        }
       ],
       "location": "transactionsSteps.ERC20_TransactionsSteps.theMaximumFeeValueIsSetToSatisfyTheChosenFeeStrategyForErcTransferFromToUsingEndpointWithABI(java.lang.String,java.lang.String,java.lang.String)"
      },
      "keyword": "Given "
     },
     {
      "result": {
       "duration": 164514000,
       "status": "passed"
      },
      "line": 76,
      "name": "dry run of erc20 transfer from \"account1\" to \"account2\" using endpoint with ABI is executed with the fee strategy specified above",
      "match": {
       "arguments": [
        {
         "val": "\"account1\"",
         "offset": 31
        },
        {
         "val": "\"account2\"",
         "offset": 45
        }
       ],
       "location": "transactionsSteps.ERC20_TransactionsSteps.dryRunOfErcTransferFromToUsingEndpointWithABIIsExecutedWithTheFeeStrategySpecifiedAbove(java.lang.String,java.lang.String)"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 193000,
       "status": "passed"
      },
      "line": 77,
      "name": "dry run result is success",
      "match": {
       "location": "transactionsSteps.TransactionsSteps.dryRunResultIsSuccess()"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 1529712000,
       "status": "passed"
      },
      "line": 79,
      "name": "the transaction intent from \"account1\" to \"account2\" is executed using transaction order to endpoint with ABI",
      "match": {
       "arguments": [
        {
         "val": "\"account1\"",
         "offset": 28
        },
        {
         "val": "\"account2\"",
         "offset": 42
        }
       ],
       "location": "transactionsSteps.ERC20_TransactionsSteps.theTransactionIntentFromToIsExecutedUsingTransactionOrderToEndpointWithABI(java.lang.String,java.lang.String)"
      },
      "keyword": "When "
     },
     {
      "result": {
       "duration": 20066273000,
       "status": "passed"
      },
      "line": 80,
      "name": "transaction ledger status is \"Detected or Confirmed\"",
      "match": {
       "arguments": [
        {
         "val": "\"Detected or Confirmed\"",
         "offset": 29
        }
       ],
       "location": "transactionsSteps.TransactionsSteps.transactionLedgerStatusIs(java.lang.String)"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 452674000,
       "status": "passed"
      },
      "line": 82,
      "name": "corresponding transfer and fee are present",
      "match": {
       "location": "transactionsSteps.TransactionsSteps.correspondingTransferAndFeeArePresent()"
      },
      "keyword": "Then "
     },
     {
      "result": {
       "duration": 170094000,
       "status": "passed"
      },
      "line": 83,
      "name": "the transfer to \"account2\" is quarantined",
      "match": {
       "arguments": [
        {
         "val": "\"account2\"",
         "offset": 16
        }
       ],
       "location": "transactionsSteps.TransactionsSteps.theTransferToIsQuarantined(java.lang.String)"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 1091284000,
       "status": "passed"
      },
      "line": 85,
      "name": "\"account1\" has correct balances of \"MTC\" after \"outgoing\" transaction",
      "match": {
       "arguments": [
        {
         "val": "\"account1\"",
         "offset": 0
        },
        {
         "val": "\"MTC\"",
         "offset": 35
        },
        {
         "val": "\"outgoing\"",
         "offset": 47
        }
       ],
       "location": "transactionsSteps.TransactionsSteps.hasCorrectBalancesAfterTransaction(java.lang.String,java.lang.String,java.lang.String)"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 798354000,
       "status": "passed"
      },
      "line": 86,
      "name": "\"account2\" has correct balances of \"MTC\" after \"incoming\" transaction",
      "match": {
       "arguments": [
        {
         "val": "\"account2\"",
         "offset": 0
        },
        {
         "val": "\"MTC\"",
         "offset": 35
        },
        {
         "val": "\"incoming\"",
         "offset": 47
        }
       ],
       "location": "transactionsSteps.TransactionsSteps.hasCorrectBalancesAfterTransaction(java.lang.String,java.lang.String,java.lang.String)"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 1316227000,
       "status": "passed"
      },
      "line": 88,
      "name": "release quarantined transfers to \"account2\" intent is executed",
      "match": {
       "arguments": [
        {
         "val": "\"account2\"",
         "offset": 33
        }
       ],
       "location": "transactionsSteps.TransactionsSteps.releaseQuarantinedTransfersToIntentIsExecuted(java.lang.String)"
      },
      "keyword": "When "
     },
     {
      "result": {
       "duration": 979907000,
       "status": "passed"
      },
      "line": 89,
      "name": "\"account1\" has correct balances of \"MTC\" after \"outgoing\" transaction",
      "match": {
       "arguments": [
        {
         "val": "\"account1\"",
         "offset": 0
        },
        {
         "val": "\"MTC\"",
         "offset": 35
        },
        {
         "val": "\"outgoing\"",
         "offset": 47
        }
       ],
       "location": "transactionsSteps.TransactionsSteps.hasCorrectBalancesAfterTransaction(java.lang.String,java.lang.String,java.lang.String)"
      },
      "keyword": "Then "
     },
     {
      "result": {
       "duration": 1738154000,
       "status": "passed"
      },
      "line": 90,
      "name": "\"account2\" has correct balances of \"MTC\" after \"incoming\" transaction",
      "match": {
       "arguments": [
        {
         "val": "\"account2\"",
         "offset": 0
        },
        {
         "val": "\"MTC\"",
         "offset": 35
        },
        {
         "val": "\"incoming\"",
         "offset": 47
        }
       ],
       "location": "transactionsSteps.TransactionsSteps.hasCorrectBalancesAfterTransaction(java.lang.String,java.lang.String,java.lang.String)"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 211538394000,
       "status": "passed"
      },
      "line": 92,
      "name": "\"MTC\" funds are sent from \"account2\" to \"account1\"",
      "match": {
       "arguments": [
        {
         "val": "\"MTC\"",
         "offset": 0
        },
        {
         "val": "\"account2\"",
         "offset": 26
        },
        {
         "val": "\"account1\"",
         "offset": 40
        }
       ],
       "location": "transactionsSteps.TransactionsSteps.fundsAreSentFromTo(java.lang.String,java.lang.String,java.lang.String)"
      },
      "keyword": "And "
     }
    ],
    "tags": [
     {
      "name": "@transactions-and-accounts"
     },
     {
      "name": "@transactions-and-dry-runs"
     },
     {
      "name": "@eth-erc20-transactions"
     },
     {
      "name": "@ethereum"
     },
     {
      "name": "@tr_section-eth-erc20-transactions"
     },
     {
      "name": "@candidate"
     },
     {
      "name": "@milestone-hmz-1.0"
     },
     {
      "name": "@id-eth-erc20-transaction-to-abi-endpoint"
     }
    ]
   }
  ],
  "name": "Ethereum ERC20 transactions",
  "description": "",
  "id": "ethereum-erc20-transactions",
  "keyword": "Feature",
  "uri": "file:src/test/resources/features/transactions_and_accounts/eth_and_eth_like/ETH_ERC20_Transactions.feature",
  "tags": [
   {
    "name": "@transactions-and-accounts",
    "type": "Tag",
    "location": {
     "line": 1,
     "column": 1
    }
   },
   {
    "name": "@transactions-and-dry-runs",
    "type": "Tag",
    "location": {
     "line": 2,
     "column": 1
    }
   },
   {
    "name": "@eth-erc20-transactions",
    "type": "Tag",
    "location": {
     "line": 3,
     "column": 1
    }
   },
   {
    "name": "@ethereum",
    "type": "Tag",
    "location": {
     "line": 4,
     "column": 1
    }
   },
   {
    "name": "@tr_section-eth-erc20-transactions",
    "type": "Tag",
    "location": {
     "line": 5,
     "column": 1
    }
   }
  ]
 },
 {
  "line": 7,
  "elements": [
   {
    "line": 9,
    "name": "",
    "description": "",
    "type": "background",
    "keyword": "Background",
    "steps": [
     {
      "result": {
       "duration": 1409000,
       "status": "passed"
      },
      "line": 10,
      "name": "a root domain admin user is logged in",
      "match": {
       "location": "UserSteps.aRootDomainAdminUserIsLoggedIn()"
      },
      "keyword": "Given "
     },
     {
      "result": {
       "duration": 70000,
       "status": "passed"
      },
      "line": 11,
      "name": "the current domain is a root domain",
      "match": {
       "location": "DomainSteps.theCurrentDomainIsARootDomain()"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 426582000,
       "status": "passed"
      },
      "line": 12,
      "name": "the vault is configured",
      "match": {
       "location": "VaultsSteps.theVaultIsConfigured()"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 1080396000,
       "status": "passed"
      },
      "line": 14,
      "name": "pre-conditions for \"ethereum-testnet-goerli\" accounts balances recovery are met",
      "match": {
       "arguments": [
        {
         "val": "\"ethereum-testnet-goerli\"",
         "offset": 19
        }
       ],
       "location": "AccountsSteps.preConditionsForAccountsBalancesRecoveryAreMet(java.lang.String)"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 520112000,
       "status": "passed"
      },
      "line": 15,
      "name": "all recovery transfers are released to accounts",
      "match": {
       "location": "transactionsSteps.TransactionsSteps.allRecoveryQuarantinedTransfersAreReleased()"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 168298000,
       "status": "passed"
      },
      "line": 16,
      "name": "all policies except default are locked",
      "match": {
       "location": "PolicySteps.allPoliciesExceptDefaultAreLocked()"
      },
      "keyword": "And "
     }
    ]
   },
   {
    "start_timestamp": "2023-01-09T16:26:23.174Z",
    "before": [
     {
      "result": {
       "duration": 111000,
       "status": "passed"
      },
      "match": {
       "location": "PolicySteps.before(io.cucumber.java.Scenario)"
      }
     },
     {
      "result": {
       "duration": 1304060000,
       "status": "passed"
      },
      "match": {
       "location": "Hooks.beforeScenario()"
      }
     }
    ],
    "line": 51,
    "name": "Ethereum transaction to address destination",
    "description": "",
    "id": "ethereum-native-transactions;ethereum-transaction-to-address-destination",
    "after": [
     {
      "result": {
       "duration": 642000,
       "status": "passed"
      },
      "match": {
       "location": "Hooks.afterScenario()"
      }
     }
    ],
    "type": "scenario",
    "keyword": "Scenario",
    "steps": [
     {
      "result": {
       "duration": 663231000,
       "status": "passed"
      },
      "line": 52,
      "name": "we have two recovered \"ethereum-testnet-goerli\" accounts",
      "match": {
       "arguments": [
        {
         "val": "\"ethereum-testnet-goerli\"",
         "offset": 22
        }
       ],
       "location": "AccountsSteps.weHaveTwoRecoveredAccounts(java.lang.String)"
      },
      "keyword": "Given "
     },
     {
      "result": {
       "duration": 676000,
       "status": "passed"
      },
      "line": 54,
      "name": "the following \"ethereum-testnet-goerli\" fee strategy is used",
      "match": {
       "arguments": [
        {
         "val": "\"ethereum-testnet-goerli\"",
         "offset": 14
        }
       ],
       "location": "transactionsSteps.TransactionsSteps.theFollowingFeeStrategyIsUsed(java.lang.String,io.cucumber.datatable.DataTable)"
      },
      "rows": [
       {
        "cells": [
         "type",
         "Priority"
        ]
       },
       {
        "cells": [
         "priority",
         "Medium"
        ]
       }
      ],
      "keyword": "And "
     },
     {
      "result": {
       "duration": 2001868000,
       "status": "passed"
      },
      "line": 58,
      "name": "\"account1\" and \"account2\" have enough of \"tETH\" on the balance for native transfer with funds return",
      "match": {
       "arguments": [
        {
         "val": "\"account1\"",
         "offset": 0
        },
        {
         "val": "\"account2\"",
         "offset": 15
        },
        {
         "val": "\"tETH\"",
         "offset": 41
        }
       ],
       "location": "AccountsSteps.andHaveEnoughOfForTransactionWithFundsReturn(java.lang.String,java.lang.String,java.lang.String)"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 453655000,
       "status": "passed"
      },
      "line": 59,
      "name": "the maximumFee value is set sufficient to satisfy the chosen fee strategy for ethereum transaction from \"account1\" to address of \"account2\"",
      "match": {
       "arguments": [
        {
         "val": "\"account1\"",
         "offset": 104
        },
        {
         "val": "\"account2\"",
         "offset": 129
        }
       ],
       "location": "transactionsSteps.EthereumTransactionsSteps.theMaximumFeeValueIsSetSufficientToSatisfyTheChosenFeeStrategyForTransactionFromToAddressOf(java.lang.String,java.lang.String)"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 191205000,
       "status": "passed"
      },
      "line": 60,
      "name": "dry run of ethereum transaction from \"account1\" to address of \"account2\" is executed with the fee strategy specified above",
      "match": {
       "arguments": [
        {
         "val": "\"account1\"",
         "offset": 37
        },
        {
         "val": "\"account2\"",
         "offset": 62
        }
       ],
       "location": "transactionsSteps.EthereumTransactionsSteps.dryRunOfEthereumTransactionFromToAddressOfIsExecuted(java.lang.String,java.lang.String)"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 224000,
       "status": "passed"
      },
      "line": 61,
      "name": "dry run result is success",
      "match": {
       "location": "transactionsSteps.TransactionsSteps.dryRunResultIsSuccess()"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 1463368000,
       "status": "passed"
      },
      "line": 63,
      "name": "ethereum transaction to send \"tETH\" from \"account1\" to address of \"account2\" is executed",
      "match": {
       "arguments": [
        {
         "val": "\"tETH\"",
         "offset": 29
        },
        {
         "val": "\"account1\"",
         "offset": 41
        },
        {
         "val": "\"account2\"",
         "offset": 66
        }
       ],
       "location": "transactionsSteps.EthereumTransactionsSteps.ethereumTransactionFromToAddressOfIsExecuted(java.lang.String,java.lang.String,java.lang.String)"
      },
      "keyword": "When "
     },
     {
      "result": {
       "duration": 22345529000,
       "status": "passed"
      },
      "line": 64,
      "name": "transaction ledger status is \"Detected or Confirmed\"",
      "match": {
       "arguments": [
        {
         "val": "\"Detected or Confirmed\"",
         "offset": 29
        }
       ],
       "location": "transactionsSteps.TransactionsSteps.transactionLedgerStatusIs(java.lang.String)"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 466897000,
       "status": "passed"
      },
      "line": 66,
      "name": "corresponding transfer and fee are present",
      "match": {
       "location": "transactionsSteps.TransactionsSteps.correspondingTransferAndFeeArePresent()"
      },
      "keyword": "Then "
     },
     {
      "result": {
       "duration": 188901000,
       "status": "passed"
      },
      "line": 67,
      "name": "the transfer to \"account2\" is quarantined",
      "match": {
       "arguments": [
        {
         "val": "\"account2\"",
         "offset": 16
        }
       ],
       "location": "transactionsSteps.TransactionsSteps.theTransferToIsQuarantined(java.lang.String)"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 2684272000,
       "status": "passed"
      },
      "line": 69,
      "name": "\"account1\" has correct balances of \"tETH\" after \"outgoing\" transaction",
      "match": {
       "arguments": [
        {
         "val": "\"account1\"",
         "offset": 0
        },
        {
         "val": "\"tETH\"",
         "offset": 35
        },
        {
         "val": "\"outgoing\"",
         "offset": 48
        }
       ],
       "location": "transactionsSteps.TransactionsSteps.hasCorrectBalancesAfterTransaction(java.lang.String,java.lang.String,java.lang.String)"
      },
      "keyword": "Then "
     },
     {
      "result": {
       "duration": 1215953000,
       "status": "passed"
      },
      "line": 70,
      "name": "\"account2\" has correct balances of \"tETH\" after \"incoming\" transaction",
      "match": {
       "arguments": [
        {
         "val": "\"account2\"",
         "offset": 0
        },
        {
         "val": "\"tETH\"",
         "offset": 35
        },
        {
         "val": "\"incoming\"",
         "offset": 48
        }
       ],
       "location": "transactionsSteps.TransactionsSteps.hasCorrectBalancesAfterTransaction(java.lang.String,java.lang.String,java.lang.String)"
      },
      "keyword": "Then "
     },
     {
      "result": {
       "duration": 758476000,
       "status": "passed"
      },
      "line": 72,
      "name": "release quarantined transfers to \"account2\" intent is executed",
      "match": {
       "arguments": [
        {
         "val": "\"account2\"",
         "offset": 33
        }
       ],
       "location": "transactionsSteps.TransactionsSteps.releaseQuarantinedTransfersToIntentIsExecuted(java.lang.String)"
      },
      "keyword": "When "
     },
     {
      "result": {
       "duration": 2873755000,
       "status": "passed"
      },
      "line": 73,
      "name": "\"account1\" has correct balances of \"tETH\" after \"outgoing\" transaction",
      "match": {
       "arguments": [
        {
         "val": "\"account1\"",
         "offset": 0
        },
        {
         "val": "\"tETH\"",
         "offset": 35
        },
        {
         "val": "\"outgoing\"",
         "offset": 48
        }
       ],
       "location": "transactionsSteps.TransactionsSteps.hasCorrectBalancesAfterTransaction(java.lang.String,java.lang.String,java.lang.String)"
      },
      "keyword": "Then "
     },
     {
      "result": {
       "duration": 1144030000,
       "status": "passed"
      },
      "line": 74,
      "name": "\"account2\" has correct balances of \"tETH\" after \"incoming\" transaction",
      "match": {
       "arguments": [
        {
         "val": "\"account2\"",
         "offset": 0
        },
        {
         "val": "\"tETH\"",
         "offset": 35
        },
        {
         "val": "\"incoming\"",
         "offset": 48
        }
       ],
       "location": "transactionsSteps.TransactionsSteps.hasCorrectBalancesAfterTransaction(java.lang.String,java.lang.String,java.lang.String)"
      },
      "keyword": "Then "
     },
     {
      "result": {
       "duration": 15659441000,
       "status": "passed"
      },
      "line": 75,
      "name": "\"tETH\" funds are sent from \"account2\" to \"account1\"",
      "match": {
       "arguments": [
        {
         "val": "\"tETH\"",
         "offset": 0
        },
        {
         "val": "\"account2\"",
         "offset": 27
        },
        {
         "val": "\"account1\"",
         "offset": 41
        }
       ],
       "location": "transactionsSteps.TransactionsSteps.fundsAreSentFromTo(java.lang.String,java.lang.String,java.lang.String)"
      },
      "keyword": "And "
     }
    ],
    "tags": [
     {
      "name": "@transactions-and-accounts"
     },
     {
      "name": "@transactions-and-dry-runs"
     },
     {
      "name": "@ethereum-transactions"
     },
     {
      "name": "@ethereum"
     },
     {
      "name": "@tr_section-ethereum-transactions"
     },
     {
      "name": "@candidate"
     },
     {
      "name": "@milestone-hmz-1.0"
     },
     {
      "name": "@id-ethereum-transaction-to-address-destination"
     }
    ]
   }
  ],
  "name": "Ethereum native transactions",
  "description": "",
  "id": "ethereum-native-transactions",
  "keyword": "Feature",
  "uri": "file:src/test/resources/features/transactions_and_accounts/eth_and_eth_like/EthereumTransactions.feature",
  "tags": [
   {
    "name": "@transactions-and-accounts",
    "type": "Tag",
    "location": {
     "line": 1,
     "column": 1
    }
   },
   {
    "name": "@transactions-and-dry-runs",
    "type": "Tag",
    "location": {
     "line": 2,
     "column": 1
    }
   },
   {
    "name": "@ethereum-transactions",
    "type": "Tag",
    "location": {
     "line": 3,
     "column": 1
    }
   },
   {
    "name": "@ethereum",
    "type": "Tag",
    "location": {
     "line": 4,
     "column": 1
    }
   },
   {
    "name": "@tr_section-ethereum-transactions",
    "type": "Tag",
    "location": {
     "line": 5,
     "column": 1
    }
   }
  ]
 },
 {
  "line": 6,
  "elements": [
   {
    "line": 8,
    "name": "",
    "description": "",
    "type": "background",
    "keyword": "Background",
    "steps": [
     {
      "result": {
       "duration": 1750000,
       "status": "passed"
      },
      "line": 9,
      "name": "a root domain admin user is logged in",
      "match": {
       "location": "UserSteps.aRootDomainAdminUserIsLoggedIn()"
      },
      "keyword": "Given "
     },
     {
      "result": {
       "duration": 56000,
       "status": "passed"
      },
      "line": 10,
      "name": "the current domain is a root domain",
      "match": {
       "location": "DomainSteps.theCurrentDomainIsARootDomain()"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 501423000,
       "status": "passed"
      },
      "line": 11,
      "name": "the vault is configured",
      "match": {
       "location": "VaultsSteps.theVaultIsConfigured()"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 1589787000,
       "status": "passed"
      },
      "line": 13,
      "name": "pre-conditions for \"ethereum-testnet-goerli\" accounts balances recovery are met",
      "match": {
       "arguments": [
        {
         "val": "\"ethereum-testnet-goerli\"",
         "offset": 19
        }
       ],
       "location": "AccountsSteps.preConditionsForAccountsBalancesRecoveryAreMet(java.lang.String)"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 557928000,
       "status": "passed"
      },
      "line": 14,
      "name": "all recovery transfers are released to accounts",
      "match": {
       "location": "transactionsSteps.TransactionsSteps.allRecoveryQuarantinedTransfersAreReleased()"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 192298000,
       "status": "passed"
      },
      "line": 15,
      "name": "all policies except default are locked",
      "match": {
       "location": "PolicySteps.allPoliciesExceptDefaultAreLocked()"
      },
      "keyword": "And "
     }
    ]
   },
   {
    "start_timestamp": "2023-01-09T16:27:18.846Z",
    "before": [
     {
      "result": {
       "duration": 159000,
       "status": "passed"
      },
      "match": {
       "location": "PolicySteps.before(io.cucumber.java.Scenario)"
      }
     },
     {
      "result": {
       "duration": 1187856000,
       "status": "passed"
      },
      "match": {
       "location": "Hooks.beforeScenario()"
      }
     }
    ],
    "line": 22,
    "name": "Replace Broadcasting Ethereum report demo transaction with too low fee",
    "description": "",
    "id": "demo-1-ethereum-transactions-cancellation-and-replacement;replace-broadcasting-ethereum-transaction-with-too-low-fee",
    "after": [
     {
      "result": {
       "duration": 262000,
       "status": "passed"
      },
      "match": {
       "location": "Hooks.afterScenario()"
      }
     }
    ],
    "type": "scenario",
    "keyword": "Scenario",
    "steps": [
     {
      "result": {
       "duration": 659459000,
       "status": "passed"
      },
      "line": 23,
      "name": "we have two recovered \"ethereum-testnet-goerli\" accounts",
      "match": {
       "arguments": [
        {
         "val": "\"ethereum-testnet-goerli\"",
         "offset": 22
        }
       ],
       "location": "AccountsSteps.weHaveTwoRecoveredAccounts(java.lang.String)"
      },
      "keyword": "Given "
     },
     {
      "result": {
       "duration": 75539000,
       "status": "passed"
      },
      "line": 25,
      "name": "the following \"ethereum-testnet-goerli\" fee strategy is used",
      "match": {
       "arguments": [
        {
         "val": "\"ethereum-testnet-goerli\"",
         "offset": 14
        }
       ],
       "location": "transactionsSteps.TransactionsSteps.theFollowingFeeStrategyIsUsed(java.lang.String,io.cucumber.datatable.DataTable)"
      },
      "rows": [
       {
        "cells": [
         "type",
         "SpecifiedRate"
        ]
       },
       {
        "cells": [
         "gasPrice",
         "Low"
        ]
       }
      ],
      "keyword": "And "
     },
     {
      "result": {
       "duration": 1312623000,
       "status": "passed"
      },
      "line": 29,
      "name": "\"account1\" has enough of \"tETH\" for native transfer",
      "match": {
       "arguments": [
        {
         "val": "\"account1\"",
         "offset": 0
        },
        {
         "val": "\"tETH\"",
         "offset": 25
        }
       ],
       "location": "AccountsSteps.hasEnoughOfFundsForTransactionToExternalAccountAddress(java.lang.String,java.lang.String)"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 162814000,
       "status": "passed"
      },
      "line": 30,
      "name": "the maximumFee value is set sufficient to satisfy the chosen fee strategy for ethereum transaction from \"account1\" to \"account2\"",
      "match": {
       "arguments": [
        {
         "val": "\"account1\"",
         "offset": 104
        },
        {
         "val": "\"account2\"",
         "offset": 118
        }
       ],
       "location": "transactionsSteps.EthereumTransactionsSteps.theMaximumFeeValueIsSetSufficientToSatisfyTheChosenFeeStrategyForTransactionFromTo(java.lang.String,java.lang.String)"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 519000,
       "status": "passed"
      },
      "line": 31,
      "name": "the ethereum fee rate is amended to be \"80\" percent less then specified current market rate",
      "match": {
       "arguments": [
        {
         "val": "\"80\"",
         "offset": 39
        }
       ],
       "location": "transactionsSteps.EthereumTransactionsSteps.theFeeRateIsAmendedToBeLessThenSpecifiedCurrentMarketRate(java.lang.String)"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 1521704000,
       "status": "passed"
      },
      "line": 33,
      "name": "ethereum transaction to send \"tETH\" from \"account1\" to \"account2\" is executed",
      "match": {
       "arguments": [
        {
         "val": "\"tETH\"",
         "offset": 29
        },
        {
         "val": "\"account1\"",
         "offset": 41
        },
        {
         "val": "\"account2\"",
         "offset": 55
        }
       ],
       "location": "transactionsSteps.EthereumTransactionsSteps.ethereumTransactionFromToIsExecuted(java.lang.String,java.lang.String,java.lang.String)"
      },
      "keyword": "When "
     },
     {
      "result": {
       "error_message": "java.lang.RuntimeException: Error details\n",
       "duration": 269312000,
       "status": "failed"
      },
      "line": 34,
      "name": "transaction processing status is \"Broadcasting\"",
      "match": {
       "arguments": [
        {
         "val": "\"Broadcasting\"",
         "offset": 33
        }
       ],
       "location": "transactionsSteps.TransactionsSteps.transactionProcessingStatusIs(java.lang.String)"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 537000,
       "status": "skipped"
      },
      "line": 36,
      "name": "the following \"ethereum-testnet-goerli\" fee strategy is used",
      "match": {
       "arguments": [
        {
         "val": "\"ethereum-testnet-goerli\"",
         "offset": 14
        }
       ],
       "location": "transactionsSteps.TransactionsSteps.theFollowingFeeStrategyIsUsed(java.lang.String,io.cucumber.datatable.DataTable)"
      },
      "rows": [
       {
        "cells": [
         "type",
         "Priority"
        ]
       },
       {
        "cells": [
         "priority",
         "High"
        ]
       }
      ],
      "keyword": "Given "
     },
     {
      "result": {
       "duration": 961131000,
       "status": "skipped"
      },
      "line": 40,
      "name": "\"account1\" has enough of \"tETH\" for native transfer",
      "match": {
       "arguments": [
        {
         "val": "\"account1\"",
         "offset": 0
        },
        {
         "val": "\"tETH\"",
         "offset": 25
        }
       ],
       "location": "AccountsSteps.hasEnoughOfFundsForTransactionToExternalAccountAddress(java.lang.String,java.lang.String)"
      },
      "keyword": "Given "
     },
     {
      "result": {
       "duration": 260734000,
       "status": "skipped"
      },
      "line": 41,
      "name": "the maximumFee value is set sufficient to satisfy the chosen fee strategy for ethereum transaction from \"account1\" to \"account2\"",
      "match": {
       "arguments": [
        {
         "val": "\"account1\"",
         "offset": 104
        },
        {
         "val": "\"account2\"",
         "offset": 118
        }
       ],
       "location": "transactionsSteps.EthereumTransactionsSteps.theMaximumFeeValueIsSetSufficientToSatisfyTheChosenFeeStrategyForTransactionFromTo(java.lang.String,java.lang.String)"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 1378071000,
       "status": "skipped"
      },
      "line": 43,
      "name": "replacement transaction from \"account1\" to \"account2\" is executed",
      "match": {
       "arguments": [
        {
         "val": "\"account1\"",
         "offset": 29
        },
        {
         "val": "\"account2\"",
         "offset": 43
        }
       ],
       "location": "transactionsSteps.EthereumTransactionsSteps.replace(java.lang.String,java.lang.String)"
      },
      "keyword": "When "
     },
     {
      "result": {
       "duration": 24264534000,
       "status": "skipped"
      },
      "line": 44,
      "name": "replacement transaction ledger status is \"Detected or Confirmed\"",
      "match": {
       "arguments": [
        {
         "val": "\"Detected or Confirmed\"",
         "offset": 41
        }
       ],
       "location": "transactionsSteps.TransactionsSteps.replacementTransactionProcessStatusIs(java.lang.String)"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 309785000,
       "status": "skipped"
      },
      "line": 45,
      "name": "transaction processing status is \"Interrupted\" with cause \"Replacement\"",
      "match": {
       "arguments": [
        {
         "val": "\"Interrupted\"",
         "offset": 33
        },
        {
         "val": "\"Replacement\"",
         "offset": 58
        }
       ],
       "location": "transactionsSteps.TransactionsSteps.transactionProcessingStatusIsWithCauseAndReason(java.lang.String,java.lang.String)"
      },
      "keyword": "Then "
     }
    ],
    "tags": [
     {
      "name": "@transactions-and-accounts"
     },
     {
      "name": "@transactions-and-dry-runs"
     },
     {
      "name": "@ethereum"
     },
     {
      "name": "@tr_section-cancel-or-replace-ethereum-tx"
     },
     {
      "name": "@candidate"
     },
     {
      "name": "@smoke"
     },
     {
      "name": "@ref-2"
     },
     {
      "name": "@id-replace-ethereum-transaction-with-too-low-fee"
     }
    ]
   },
   {
    "line": 8,
    "name": "",
    "description": "",
    "type": "background",
    "keyword": "Background",
    "steps": [
     {
      "result": {
       "duration": 576000,
       "status": "passed"
      },
      "line": 9,
      "name": "a root domain admin user is logged in",
      "match": {
       "location": "UserSteps.aRootDomainAdminUserIsLoggedIn()"
      },
      "keyword": "Given "
     },
     {
      "result": {
       "duration": 22000,
       "status": "passed"
      },
      "line": 10,
      "name": "the current domain is a root domain",
      "match": {
       "location": "DomainSteps.theCurrentDomainIsARootDomain()"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 388884000,
       "status": "passed"
      },
      "line": 11,
      "name": "the vault is configured",
      "match": {
       "location": "VaultsSteps.theVaultIsConfigured()"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 993494000,
       "status": "passed"
      },
      "line": 13,
      "name": "pre-conditions for \"ethereum-testnet-goerli\" accounts balances recovery are met",
      "match": {
       "arguments": [
        {
         "val": "\"ethereum-testnet-goerli\"",
         "offset": 19
        }
       ],
       "location": "AccountsSteps.preConditionsForAccountsBalancesRecoveryAreMet(java.lang.String)"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 524595000,
       "status": "passed"
      },
      "line": 14,
      "name": "all recovery transfers are released to accounts",
      "match": {
       "location": "transactionsSteps.TransactionsSteps.allRecoveryQuarantinedTransfersAreReleased()"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 157143000,
       "status": "passed"
      },
      "line": 15,
      "name": "all policies except default are locked",
      "match": {
       "location": "PolicySteps.allPoliciesExceptDefaultAreLocked()"
      },
      "keyword": "And "
     }
    ]
   },
   {
    "start_timestamp": "2023-01-09T16:27:54.101Z",
    "before": [
     {
      "result": {
       "duration": 117000,
       "status": "passed"
      },
      "match": {
       "location": "PolicySteps.before(io.cucumber.java.Scenario)"
      }
     },
     {
      "result": {
       "duration": 1115806000,
       "status": "passed"
      },
      "match": {
       "location": "Hooks.beforeScenario()"
      }
     }
    ],
    "line": 51,
    "name": "Cancel intent for ethereum transaction. Insufficient maximumFee",
    "description": "",
    "id": "ethereum-transactions-cancellation-and-replacement;cancel-intent-for-ethereum-transaction.-insufficient-maximumfee",
    "after": [
     {
      "result": {
       "duration": 386000,
       "status": "passed"
      },
      "match": {
       "location": "Hooks.afterScenario()"
      }
     }
    ],
    "type": "scenario",
    "keyword": "Scenario",
    "steps": [
     {
      "result": {
       "duration": 671134000,
       "status": "passed"
      },
      "line": 52,
      "name": "we have two recovered \"ethereum-testnet-goerli\" accounts",
      "match": {
       "arguments": [
        {
         "val": "\"ethereum-testnet-goerli\"",
         "offset": 22
        }
       ],
       "location": "AccountsSteps.weHaveTwoRecoveredAccounts(java.lang.String)"
      },
      "keyword": "Given "
     },
     {
      "result": {
       "duration": 1423305000,
       "status": "passed"
      },
      "line": 54,
      "name": "\"account1\" has enough of \"tETH\" for native transfer",
      "match": {
       "arguments": [
        {
         "val": "\"account1\"",
         "offset": 0
        },
        {
         "val": "\"tETH\"",
         "offset": 25
        }
       ],
       "location": "AccountsSteps.hasEnoughOfFundsForTransactionToExternalAccountAddress(java.lang.String,java.lang.String)"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 846000,
       "status": "passed"
      },
      "line": 55,
      "name": "the following \"ethereum-testnet-goerli\" fee strategy is used",
      "match": {
       "arguments": [
        {
         "val": "\"ethereum-testnet-goerli\"",
         "offset": 14
        }
       ],
       "location": "transactionsSteps.TransactionsSteps.theFollowingFeeStrategyIsUsed(java.lang.String,io.cucumber.datatable.DataTable)"
      },
      "rows": [
       {
        "cells": [
         "type",
         "Priority"
        ]
       },
       {
        "cells": [
         "priority",
         "Medium"
        ]
       }
      ],
      "keyword": "And "
     },
     {
      "result": {
       "duration": 260724000,
       "status": "passed"
      },
      "line": 59,
      "name": "the maximumFee value is set to \"10\" percent less then required to satisfy the chosen fee strategy for ethereum transaction from \"account1\" to \"account2\"",
      "match": {
       "arguments": [
        {
         "val": "\"10\"",
         "offset": 31
        },
        {
         "val": "\"account1\"",
         "offset": 128
        },
        {
         "val": "\"account2\"",
         "offset": 142
        }
       ],
       "location": "transactionsSteps.EthereumTransactionsSteps.theMaximumFeeValueIsSetToLessThenRequired(java.lang.String,java.lang.String,java.lang.String)"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 1476926000,
       "status": "passed"
      },
      "line": 60,
      "name": "ethereum transaction to send \"tETH\" from \"account1\" to \"account2\" is executed",
      "match": {
       "arguments": [
        {
         "val": "\"tETH\"",
         "offset": 29
        },
        {
         "val": "\"account1\"",
         "offset": 41
        },
        {
         "val": "\"account2\"",
         "offset": 55
        }
       ],
       "location": "transactionsSteps.EthereumTransactionsSteps.ethereumTransactionFromToIsExecuted(java.lang.String,java.lang.String,java.lang.String)"
      },
      "keyword": "When "
     },
     {
      "result": {
       "duration": 389742000,
       "status": "passed"
      },
      "line": 61,
      "name": "transaction processing status is \"Preparing\" with hint \"CurrentlyFeesTooLarge\"",
      "match": {
       "arguments": [
        {
         "val": "\"Preparing\"",
         "offset": 33
        },
        {
         "val": "\"CurrentlyFeesTooLarge\"",
         "offset": 55
        }
       ],
       "location": "transactionsSteps.TransactionsSteps.transactionProcessingStatusIsWithHint(java.lang.String,java.lang.String)"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 469000,
       "status": "passed"
      },
      "line": 63,
      "name": "the following \"ethereum-testnet-goerli\" fee strategy is used",
      "match": {
       "arguments": [
        {
         "val": "\"ethereum-testnet-goerli\"",
         "offset": 14
        }
       ],
       "location": "transactionsSteps.TransactionsSteps.theFollowingFeeStrategyIsUsed(java.lang.String,io.cucumber.datatable.DataTable)"
      },
      "rows": [
       {
        "cells": [
         "type",
         "Priority"
        ]
       },
       {
        "cells": [
         "priority",
         "Medium"
        ]
       }
      ],
      "keyword": "Given "
     },
     {
      "result": {
       "duration": 822444000,
       "status": "passed"
      },
      "line": 67,
      "name": "the maximumFee value is set sufficient to satisfy the chosen fee strategy for ethereum transaction from \"account1\" to \"account2\"",
      "match": {
       "arguments": [
        {
         "val": "\"account1\"",
         "offset": 104
        },
        {
         "val": "\"account2\"",
         "offset": 118
        }
       ],
       "location": "transactionsSteps.EthereumTransactionsSteps.theMaximumFeeValueIsSetSufficientToSatisfyTheChosenFeeStrategyForTransactionFromTo(java.lang.String,java.lang.String)"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 1013971000,
       "status": "passed"
      },
      "line": 69,
      "name": "cancellation intent for transaction order is executed",
      "match": {
       "location": "transactionsSteps.EthereumTransactionsSteps.cancellationIntentForEthTxOrderExecuted()"
      },
      "keyword": "When "
     },
     {
      "result": {
       "duration": 301993000,
       "status": "passed"
      },
      "line": 70,
      "name": "transaction processing status is \"Interrupted\" with cause \"Cancellation\"",
      "match": {
       "arguments": [
        {
         "val": "\"Interrupted\"",
         "offset": 33
        },
        {
         "val": "\"Cancellation\"",
         "offset": 58
        }
       ],
       "location": "transactionsSteps.TransactionsSteps.transactionProcessingStatusIsWithCauseAndReason(java.lang.String,java.lang.String)"
      },
      "keyword": "Then "
     },
     {
      "result": {
       "duration": 151126000,
       "status": "passed"
      },
      "line": 71,
      "name": "transaction processing status contains a reason from the user",
      "match": {
       "location": "transactionsSteps.TransactionsSteps.transactionProcessingStatusContainsAReasonFromTheUser()"
      },
      "keyword": "And "
     }
    ],
    "tags": [
     {
      "name": "@transactions-and-accounts"
     },
     {
      "name": "@transactions-and-dry-runs"
     },
     {
      "name": "@ethereum"
     },
     {
      "name": "@tr_section-cancel-or-replace-ethereum-tx"
     },
     {
      "name": "@candidate"
     },
     {
      "name": "@smoke"
     },
     {
      "name": "@ref-2"
     },
     {
      "name": "@id-cancel-ethereum-transaction-insufficient-max-fee"
     }
    ]
   },
   {
    "line": 8,
    "name": "",
    "description": "",
    "type": "background",
    "keyword": "Background",
    "steps": [
     {
      "result": {
       "duration": 2220000,
       "status": "passed"
      },
      "line": 9,
      "name": "a root domain admin user is logged in",
      "match": {
       "location": "UserSteps.aRootDomainAdminUserIsLoggedIn()"
      },
      "keyword": "Given "
     },
     {
      "result": {
       "duration": 100000,
       "status": "passed"
      },
      "line": 10,
      "name": "the current domain is a root domain",
      "match": {
       "location": "DomainSteps.theCurrentDomainIsARootDomain()"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 451913000,
       "status": "passed"
      },
      "line": 11,
      "name": "the vault is configured",
      "match": {
       "location": "VaultsSteps.theVaultIsConfigured()"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 1038036000,
       "status": "passed"
      },
      "line": 13,
      "name": "pre-conditions for \"ethereum-testnet-goerli\" accounts balances recovery are met",
      "match": {
       "arguments": [
        {
         "val": "\"ethereum-testnet-goerli\"",
         "offset": 19
        }
       ],
       "location": "AccountsSteps.preConditionsForAccountsBalancesRecoveryAreMet(java.lang.String)"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 526839000,
       "status": "passed"
      },
      "line": 14,
      "name": "all recovery transfers are released to accounts",
      "match": {
       "location": "transactionsSteps.TransactionsSteps.allRecoveryQuarantinedTransfersAreReleased()"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 154271000,
       "status": "passed"
      },
      "line": 15,
      "name": "all policies except default are locked",
      "match": {
       "location": "PolicySteps.allPoliciesExceptDefaultAreLocked()"
      },
      "keyword": "And "
     }
    ]
   },
   {
    "start_timestamp": "2023-01-09T16:28:03.872Z",
    "before": [
     {
      "result": {
       "duration": 75000,
       "status": "passed"
      },
      "match": {
       "location": "PolicySteps.before(io.cucumber.java.Scenario)"
      }
     },
     {
      "result": {
       "duration": 1030448000,
       "status": "passed"
      },
      "match": {
       "location": "Hooks.beforeScenario()"
      }
     }
    ],
    "line": 77,
    "name": "Cancel intent for ethereum transaction with too low fee. Report demo. Replacement path",
    "description": "",
    "id": "demo-2-ethereum-transactions-cancellation-and-replacement;cancel-intent-for-ethereum-transaction-with-too-low-fee.-replacement-path",
    "after": [
     {
      "result": {
       "duration": 428000,
       "status": "passed"
      },
      "match": {
       "location": "Hooks.afterScenario()"
      }
     }
    ],
    "type": "scenario",
    "keyword": "Scenario",
    "steps": [
     {
      "result": {
       "duration": 694755000,
       "status": "passed"
      },
      "line": 78,
      "name": "we have two recovered \"ethereum-testnet-goerli\" accounts",
      "match": {
       "arguments": [
        {
         "val": "\"ethereum-testnet-goerli\"",
         "offset": 22
        }
       ],
       "location": "AccountsSteps.weHaveTwoRecoveredAccounts(java.lang.String)"
      },
      "keyword": "Given "
     },
     {
      "result": {
       "duration": 85671000,
       "status": "passed"
      },
      "line": 80,
      "name": "the following \"ethereum-testnet-goerli\" fee strategy is used",
      "match": {
       "arguments": [
        {
         "val": "\"ethereum-testnet-goerli\"",
         "offset": 14
        }
       ],
       "location": "transactionsSteps.TransactionsSteps.theFollowingFeeStrategyIsUsed(java.lang.String,io.cucumber.datatable.DataTable)"
      },
      "rows": [
       {
        "cells": [
         "type",
         "SpecifiedRate"
        ]
       },
       {
        "cells": [
         "gasPrice",
         "Low"
        ]
       }
      ],
      "keyword": "And "
     },
     {
      "result": {
       "duration": 1386332000,
       "status": "passed"
      },
      "line": 84,
      "name": "\"account1\" has enough of \"tETH\" for native transfer",
      "match": {
       "arguments": [
        {
         "val": "\"account1\"",
         "offset": 0
        },
        {
         "val": "\"tETH\"",
         "offset": 25
        }
       ],
       "location": "AccountsSteps.hasEnoughOfFundsForTransactionToExternalAccountAddress(java.lang.String,java.lang.String)"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 381000,
       "status": "passed"
      },
      "line": 85,
      "name": "the ethereum fee rate is amended to be \"10\" percent less then specified current market rate",
      "match": {
       "arguments": [
        {
         "val": "\"10\"",
         "offset": 39
        }
       ],
       "location": "transactionsSteps.EthereumTransactionsSteps.theFeeRateIsAmendedToBeLessThenSpecifiedCurrentMarketRate(java.lang.String)"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 168158000,
       "status": "passed"
      },
      "line": 86,
      "name": "the maximumFee value is set sufficient to satisfy the chosen fee strategy for ethereum transaction from \"account1\" to \"account2\"",
      "match": {
       "arguments": [
        {
         "val": "\"account1\"",
         "offset": 104
        },
        {
         "val": "\"account2\"",
         "offset": 118
        }
       ],
       "location": "transactionsSteps.EthereumTransactionsSteps.theMaximumFeeValueIsSetSufficientToSatisfyTheChosenFeeStrategyForTransactionFromTo(java.lang.String,java.lang.String)"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 694467000,
       "status": "passed"
      },
      "line": 88,
      "name": "\"account1\" has enough of \"tETH\" for native transfer",
      "match": {
       "arguments": [
        {
         "val": "\"account1\"",
         "offset": 0
        },
        {
         "val": "\"tETH\"",
         "offset": 25
        }
       ],
       "location": "AccountsSteps.hasEnoughOfFundsForTransactionToExternalAccountAddress(java.lang.String,java.lang.String)"
      },
      "keyword": "Given "
     },
     {
      "result": {
       "duration": 1523120000,
       "status": "passed"
      },
      "line": 89,
      "name": "ethereum transaction to send \"tETH\" from \"account1\" to \"account2\" is executed",
      "match": {
       "arguments": [
        {
         "val": "\"tETH\"",
         "offset": 29
        },
        {
         "val": "\"account1\"",
         "offset": 41
        },
        {
         "val": "\"account2\"",
         "offset": 55
        }
       ],
       "location": "transactionsSteps.EthereumTransactionsSteps.ethereumTransactionFromToIsExecuted(java.lang.String,java.lang.String,java.lang.String)"
      },
      "keyword": "When "
     },
     {
      "result": {
       "duration": 268891000,
       "status": "passed"
      },
      "line": 90,
      "name": "transaction processing status is \"Broadcasting\"",
      "match": {
       "arguments": [
        {
         "val": "\"Broadcasting\"",
         "offset": 33
        }
       ],
       "location": "transactionsSteps.TransactionsSteps.transactionProcessingStatusIs(java.lang.String)"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 977588000,
       "status": "passed"
      },
      "line": 92,
      "name": "cancellation intent for transaction order is executed",
      "match": {
       "location": "transactionsSteps.EthereumTransactionsSteps.cancellationIntentForEthTxOrderExecuted()"
      },
      "keyword": "When "
     },
     {
      "result": {
       "error_message": "java.lang.RuntimeException: Error details\n",
       "duration": 330278000,
       "status": "failed"
      },
      "line": 93,
      "name": "transaction processing status is \"Interrupted\" with cause \"Replacement\"",
      "match": {
       "arguments": [
        {
         "val": "\"Interrupted\"",
         "offset": 33
        },
        {
         "val": "\"Replacement\"",
         "offset": 58
        }
       ],
       "location": "transactionsSteps.TransactionsSteps.transactionProcessingStatusIsWithCauseAndReason(java.lang.String,java.lang.String)"
      },
      "keyword": "Then "
     }
    ],
    "tags": [
     {
      "name": "@transactions-and-accounts"
     },
     {
      "name": "@transactions-and-dry-runs"
     },
     {
      "name": "@ethereum"
     },
     {
      "name": "@tr_section-cancel-or-replace-ethereum-tx"
     },
     {
      "name": "@candidate"
     },
     {
      "name": "@smoke"
     },
     {
      "name": "@ref-2"
     },
     {
      "name": "@id-cancel-eth-transaction-replacement-path"
     }
    ]
   }
  ],
  "name": "Ethereum transactions cancellation and replacement",
  "description": "",
  "id": "ethereum-transactions-cancellation-and-replacement",
  "keyword": "Feature",
  "uri": "file:src/test/resources/features/transactions_and_accounts/eth_and_eth_like/EthereumTransactionsCancelReplace.feature",
  "tags": [
   {
    "name": "@transactions-and-accounts",
    "type": "Tag",
    "location": {
     "line": 1,
     "column": 1
    }
   },
   {
    "name": "@transactions-and-dry-runs",
    "type": "Tag",
    "location": {
     "line": 2,
     "column": 1
    }
   },
   {
    "name": "@ethereum",
    "type": "Tag",
    "location": {
     "line": 3,
     "column": 1
    }
   },
   {
    "name": "@tr_section-cancel-or-replace-ethereum-tx",
    "type": "Tag",
    "location": {
     "line": 4,
     "column": 1
    }
   }
  ]
 },
 {
  "line": 6,
  "elements": [
   {
    "line": 8,
    "name": "",
    "description": "",
    "type": "background",
    "keyword": "Background",
    "steps": [
     {
      "result": {
       "duration": 552000,
       "status": "passed"
      },
      "line": 9,
      "name": "a root domain admin user is logged in",
      "match": {
       "location": "UserSteps.aRootDomainAdminUserIsLoggedIn()"
      },
      "keyword": "Given "
     },
     {
      "result": {
       "duration": 23000,
       "status": "passed"
      },
      "line": 10,
      "name": "the current domain is a root domain",
      "match": {
       "location": "DomainSteps.theCurrentDomainIsARootDomain()"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 382447000,
       "status": "passed"
      },
      "line": 11,
      "name": "the vault is configured",
      "match": {
       "location": "VaultsSteps.theVaultIsConfigured()"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 984353000,
       "status": "passed"
      },
      "line": 13,
      "name": "pre-conditions for \"polygon-testnet-mumbai\" accounts balances recovery are met",
      "match": {
       "arguments": [
        {
         "val": "\"polygon-testnet-mumbai\"",
         "offset": 19
        }
       ],
       "location": "AccountsSteps.preConditionsForAccountsBalancesRecoveryAreMet(java.lang.String)"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 536060000,
       "status": "passed"
      },
      "line": 14,
      "name": "all recovery transfers are released to accounts",
      "match": {
       "location": "transactionsSteps.TransactionsSteps.allRecoveryQuarantinedTransfersAreReleased()"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 173656000,
       "status": "passed"
      },
      "line": 15,
      "name": "all policies except default are locked",
      "match": {
       "location": "PolicySteps.allPoliciesExceptDefaultAreLocked()"
      },
      "keyword": "And "
     }
    ]
   },
   {
    "start_timestamp": "2023-01-09T16:28:13.236Z",
    "before": [
     {
      "result": {
       "duration": 76000,
       "status": "passed"
      },
      "match": {
       "location": "PolicySteps.before(io.cucumber.java.Scenario)"
      }
     },
     {
      "result": {
       "duration": 1050351000,
       "status": "passed"
      },
      "match": {
       "location": "Hooks.beforeScenario()"
      }
     }
    ],
    "line": 50,
    "name": "Matic transaction to address destination",
    "description": "",
    "id": "polygon-native-transactions;matic-transaction-to-address-destination",
    "after": [
     {
      "result": {
       "duration": 1038000,
       "status": "passed"
      },
      "match": {
       "location": "Hooks.afterScenario()"
      }
     }
    ],
    "type": "scenario",
    "keyword": "Scenario",
    "steps": [
     {
      "result": {
       "duration": 673386000,
       "status": "passed"
      },
      "line": 51,
      "name": "we have two recovered \"polygon-testnet-mumbai\" accounts",
      "match": {
       "arguments": [
        {
         "val": "\"polygon-testnet-mumbai\"",
         "offset": 22
        }
       ],
       "location": "AccountsSteps.weHaveTwoRecoveredAccounts(java.lang.String)"
      },
      "keyword": "Given "
     },
     {
      "result": {
       "duration": 205000,
       "status": "passed"
      },
      "line": 53,
      "name": "the following \"polygon-testnet-mumbai\" fee strategy is used",
      "match": {
       "arguments": [
        {
         "val": "\"polygon-testnet-mumbai\"",
         "offset": 14
        }
       ],
       "location": "transactionsSteps.TransactionsSteps.theFollowingFeeStrategyIsUsed(java.lang.String,io.cucumber.datatable.DataTable)"
      },
      "rows": [
       {
        "cells": [
         "type",
         "Priority"
        ]
       },
       {
        "cells": [
         "priority",
         "Medium"
        ]
       }
      ],
      "keyword": "And "
     },
     {
      "result": {
       "duration": 1455805000,
       "status": "passed"
      },
      "line": 57,
      "name": "\"account1\" and \"account2\" have enough of \"tMATIC\" on the balance for native transfer with funds return",
      "match": {
       "arguments": [
        {
         "val": "\"account1\"",
         "offset": 0
        },
        {
         "val": "\"account2\"",
         "offset": 15
        },
        {
         "val": "\"tMATIC\"",
         "offset": 41
        }
       ],
       "location": "AccountsSteps.andHaveEnoughOfForTransactionWithFundsReturn(java.lang.String,java.lang.String,java.lang.String)"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 218101000,
       "status": "passed"
      },
      "line": 59,
      "name": "the maximumFee value is set sufficient to satisfy the chosen fee strategy for ethereum transaction from \"account1\" to address of \"account2\"",
      "match": {
       "arguments": [
        {
         "val": "\"account1\"",
         "offset": 104
        },
        {
         "val": "\"account2\"",
         "offset": 129
        }
       ],
       "location": "transactionsSteps.EthereumTransactionsSteps.theMaximumFeeValueIsSetSufficientToSatisfyTheChosenFeeStrategyForTransactionFromToAddressOf(java.lang.String,java.lang.String)"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 131030000,
       "status": "passed"
      },
      "line": 60,
      "name": "dry run of ethereum transaction from \"account1\" to address of \"account2\" is executed with the fee strategy specified above",
      "match": {
       "arguments": [
        {
         "val": "\"account1\"",
         "offset": 37
        },
        {
         "val": "\"account2\"",
         "offset": 62
        }
       ],
       "location": "transactionsSteps.EthereumTransactionsSteps.dryRunOfEthereumTransactionFromToAddressOfIsExecuted(java.lang.String,java.lang.String)"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 367000,
       "status": "passed"
      },
      "line": 61,
      "name": "dry run result is success",
      "match": {
       "location": "transactionsSteps.TransactionsSteps.dryRunResultIsSuccess()"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 2224868000,
       "status": "passed"
      },
      "line": 63,
      "name": "ethereum transaction to send \"tMATIC\" from \"account1\" to address of \"account2\" is executed",
      "match": {
       "arguments": [
        {
         "val": "\"tMATIC\"",
         "offset": 29
        },
        {
         "val": "\"account1\"",
         "offset": 43
        },
        {
         "val": "\"account2\"",
         "offset": 68
        }
       ],
       "location": "transactionsSteps.EthereumTransactionsSteps.ethereumTransactionFromToAddressOfIsExecuted(java.lang.String,java.lang.String,java.lang.String)"
      },
      "keyword": "When "
     },
     {
      "result": {
       "duration": 18617538000,
       "status": "passed"
      },
      "line": 64,
      "name": "transaction ledger status is \"Detected or Confirmed\"",
      "match": {
       "arguments": [
        {
         "val": "\"Detected or Confirmed\"",
         "offset": 29
        }
       ],
       "location": "transactionsSteps.TransactionsSteps.transactionLedgerStatusIs(java.lang.String)"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 472899000,
       "status": "passed"
      },
      "line": 66,
      "name": "corresponding transfer and fee are present",
      "match": {
       "location": "transactionsSteps.TransactionsSteps.correspondingTransferAndFeeArePresent()"
      },
      "keyword": "Then "
     },
     {
      "result": {
       "duration": 158742000,
       "status": "passed"
      },
      "line": 67,
      "name": "the transfer to \"account2\" is quarantined",
      "match": {
       "arguments": [
        {
         "val": "\"account2\"",
         "offset": 16
        }
       ],
       "location": "transactionsSteps.TransactionsSteps.theTransferToIsQuarantined(java.lang.String)"
      },
      "keyword": "And "
     },
     {
      "result": {
       "duration": 1424649000,
       "status": "passed"
      },
      "line": 69,
      "name": "\"account1\" has correct balances of \"tMATIC\" after \"outgoing\" transaction",
      "match": {
       "arguments": [
        {
         "val": "\"account1\"",
         "offset": 0
        },
        {
         "val": "\"tMATIC\"",
         "offset": 35
        },
        {
         "val": "\"outgoing\"",
         "offset": 50
        }
       ],
       "location": "transactionsSteps.TransactionsSteps.hasCorrectBalancesAfterTransaction(java.lang.String,java.lang.String,java.lang.String)"
      },
      "keyword": "Then "
     },
     {
      "result": {
       "duration": 1145998000,
       "status": "passed"
      },
      "line": 70,
      "name": "\"account2\" has correct balances of \"tMATIC\" after \"incoming\" transaction",
      "match": {
       "arguments": [
        {
         "val": "\"account2\"",
         "offset": 0
        },
        {
         "val": "\"tMATIC\"",
         "offset": 35
        },
        {
         "val": "\"incoming\"",
         "offset": 50
        }
       ],
       "location": "transactionsSteps.TransactionsSteps.hasCorrectBalancesAfterTransaction(java.lang.String,java.lang.String,java.lang.String)"
      },
      "keyword": "Then "
     },
     {
      "result": {
       "duration": 844654000,
       "status": "passed"
      },
      "line": 72,
      "name": "release quarantined transfers to \"account2\" intent is executed",
      "match": {
       "arguments": [
        {
         "val": "\"account2\"",
         "offset": 33
        }
       ],
       "location": "transactionsSteps.TransactionsSteps.releaseQuarantinedTransfersToIntentIsExecuted(java.lang.String)"
      },
      "keyword": "When "
     },
     {
      "result": {
       "duration": 1357909000,
       "status": "passed"
      },
      "line": 73,
      "name": "\"account1\" has correct balances of \"tMATIC\" after \"outgoing\" transaction",
      "match": {
       "arguments": [
        {
         "val": "\"account1\"",
         "offset": 0
        },
        {
         "val": "\"tMATIC\"",
         "offset": 35
        },
        {
         "val": "\"outgoing\"",
         "offset": 50
        }
       ],
       "location": "transactionsSteps.TransactionsSteps.hasCorrectBalancesAfterTransaction(java.lang.String,java.lang.String,java.lang.String)"
      },
      "keyword": "Then "
     },
     {
      "result": {
       "duration": 1251651000,
       "status": "passed"
      },
      "line": 74,
      "name": "\"account2\" has correct balances of \"tMATIC\" after \"incoming\" transaction",
      "match": {
       "arguments": [
        {
         "val": "\"account2\"",
         "offset": 0
        },
        {
         "val": "\"tMATIC\"",
         "offset": 35
        },
        {
         "val": "\"incoming\"",
         "offset": 50
        }
       ],
       "location": "transactionsSteps.TransactionsSteps.hasCorrectBalancesAfterTransaction(java.lang.String,java.lang.String,java.lang.String)"
      },
      "keyword": "Then "
     },
     {
      "result": {
       "duration": 15202259000,
       "status": "passed"
      },
      "line": 75,
      "name": "\"tMATIC\" funds are sent from \"account2\" to \"account1\"",
      "match": {
       "arguments": [
        {
         "val": "\"tMATIC\"",
         "offset": 0
        },
        {
         "val": "\"account2\"",
         "offset": 29
        },
        {
         "val": "\"account1\"",
         "offset": 43
        }
       ],
       "location": "transactionsSteps.TransactionsSteps.fundsAreSentFromTo(java.lang.String,java.lang.String,java.lang.String)"
      },
      "keyword": "And "
     }
    ],
    "tags": [
     {
      "name": "@transactions-and-accounts"
     },
     {
      "name": "@transactions-and-dry-runs"
     },
     {
      "name": "@polygon"
     },
     {
      "name": "@tr_section-polygon-transactions"
     },
     {
      "name": "@milestone-hmz-1.6"
     },
     {
      "name": "@candidate"
     },
     {
      "name": "@id-matic-transaction-to-address-destination"
     }
    ]
   }
  ],
  "name": "Polygon native transactions",
  "description": "",
  "id": "polygon-native-transactions",
  "keyword": "Feature",
  "uri": "file:src/test/resources/features/transactions_and_accounts/eth_and_eth_like/PolygonNativeTransactions.feature",
  "tags": [
   {
    "name": "@transactions-and-accounts",
    "type": "Tag",
    "location": {
     "line": 1,
     "column": 1
    }
   },
   {
    "name": "@transactions-and-dry-runs",
    "type": "Tag",
    "location": {
     "line": 2,
     "column": 1
    }
   },
   {
    "name": "@polygon",
    "type": "Tag",
    "location": {
     "line": 3,
     "column": 1
    }
   },
   {
    "name": "@tr_section-polygon-transactions",
    "type": "Tag",
    "location": {
     "line": 4,
     "column": 1
    }
   }
  ]
 }
]